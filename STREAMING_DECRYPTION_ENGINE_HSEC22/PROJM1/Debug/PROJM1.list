
PROJM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004290  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004350  08004350  00014350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043cc  080043cc  00020560  2**0
                  CONTENTS
  4 .ARM          00000000  080043cc  080043cc  00020560  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043cc  080043cc  00020560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043cc  080043cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043d0  080043d0  000143d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000560  20000000  080043d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000560  08004934  00020560  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  08004934  00020608  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020560  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a43  00000000  00000000  00020588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013c9  00000000  00000000  00027fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000618  00000000  00000000  00029398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000580  00000000  00000000  000299b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188bd  00000000  00000000  00029f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a55  00000000  00000000  000427ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000891ff  00000000  00000000  0004c242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5441  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013f4  00000000  00000000  000d5494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000560 	.word	0x20000560
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004338 	.word	0x08004338

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000564 	.word	0x20000564
 8000104:	08004338 	.word	0x08004338

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <mul2>:
 * Multiply two numbers in the GF(2^8) finite field defined
 * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
static inline uint8_t mul2(uint8_t a) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	b25b      	sxtb	r3, r3
 8000232:	2b00      	cmp	r3, #0
 8000234:	da08      	bge.n	8000248 <mul2+0x28>
 8000236:	1dfb      	adds	r3, r7, #7
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	005b      	lsls	r3, r3, #1
 800023c:	b25b      	sxtb	r3, r3
 800023e:	221b      	movs	r2, #27
 8000240:	4053      	eors	r3, r2
 8000242:	b25b      	sxtb	r3, r3
 8000244:	b2db      	uxtb	r3, r3
 8000246:	e003      	b.n	8000250 <mul2+0x30>
 8000248:	1dfb      	adds	r3, r7, #7
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	18db      	adds	r3, r3, r3
 800024e:	b2db      	uxtb	r3, r3
}
 8000250:	0018      	movs	r0, r3
 8000252:	46bd      	mov	sp, r7
 8000254:	b002      	add	sp, #8
 8000256:	bd80      	pop	{r7, pc}

08000258 <inv_shift_rows>:
 *  Row0: s0  s4  s8  s12   >>> 0 byte
 *  Row1: s1  s5  s9  s13   >>> 1 byte
 *  Row2: s2  s6  s10 s14   >>> 2 bytes
 *  Row3: s3  s7  s11 s15   >>> 3 bytes
 */
static void inv_shift_rows(uint8_t *state) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
    uint8_t temp;
    // row1
    temp        = *(state+13);
 8000260:	210f      	movs	r1, #15
 8000262:	187b      	adds	r3, r7, r1
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	7b52      	ldrb	r2, [r2, #13]
 8000268:	701a      	strb	r2, [r3, #0]
    *(state+13) = *(state+9);
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	330d      	adds	r3, #13
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	7a52      	ldrb	r2, [r2, #9]
 8000272:	701a      	strb	r2, [r3, #0]
    *(state+9)  = *(state+5);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	3309      	adds	r3, #9
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	7952      	ldrb	r2, [r2, #5]
 800027c:	701a      	strb	r2, [r3, #0]
    *(state+5)  = *(state+1);
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	3305      	adds	r3, #5
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	7852      	ldrb	r2, [r2, #1]
 8000286:	701a      	strb	r2, [r3, #0]
    *(state+1)  = temp;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	3301      	adds	r3, #1
 800028c:	187a      	adds	r2, r7, r1
 800028e:	7812      	ldrb	r2, [r2, #0]
 8000290:	701a      	strb	r2, [r3, #0]
    // row2
    temp        = *(state+14);
 8000292:	187b      	adds	r3, r7, r1
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	7b92      	ldrb	r2, [r2, #14]
 8000298:	701a      	strb	r2, [r3, #0]
    *(state+14) = *(state+6);
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	330e      	adds	r3, #14
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	7992      	ldrb	r2, [r2, #6]
 80002a2:	701a      	strb	r2, [r3, #0]
    *(state+6)  = temp;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	3306      	adds	r3, #6
 80002a8:	187a      	adds	r2, r7, r1
 80002aa:	7812      	ldrb	r2, [r2, #0]
 80002ac:	701a      	strb	r2, [r3, #0]
    temp        = *(state+10);
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	7a92      	ldrb	r2, [r2, #10]
 80002b4:	701a      	strb	r2, [r3, #0]
    *(state+10) = *(state+2);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	330a      	adds	r3, #10
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	7892      	ldrb	r2, [r2, #2]
 80002be:	701a      	strb	r2, [r3, #0]
    *(state+2)  = temp;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	3302      	adds	r3, #2
 80002c4:	187a      	adds	r2, r7, r1
 80002c6:	7812      	ldrb	r2, [r2, #0]
 80002c8:	701a      	strb	r2, [r3, #0]
    // row3
    temp        = *(state+3);
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	687a      	ldr	r2, [r7, #4]
 80002ce:	78d2      	ldrb	r2, [r2, #3]
 80002d0:	701a      	strb	r2, [r3, #0]
    *(state+3)  = *(state+7);
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	3303      	adds	r3, #3
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	79d2      	ldrb	r2, [r2, #7]
 80002da:	701a      	strb	r2, [r3, #0]
    *(state+7)  = *(state+11);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	3307      	adds	r3, #7
 80002e0:	687a      	ldr	r2, [r7, #4]
 80002e2:	7ad2      	ldrb	r2, [r2, #11]
 80002e4:	701a      	strb	r2, [r3, #0]
    *(state+11) = *(state+15);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	330b      	adds	r3, #11
 80002ea:	687a      	ldr	r2, [r7, #4]
 80002ec:	7bd2      	ldrb	r2, [r2, #15]
 80002ee:	701a      	strb	r2, [r3, #0]
    *(state+15) = temp;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	330f      	adds	r3, #15
 80002f4:	187a      	adds	r2, r7, r1
 80002f6:	7812      	ldrb	r2, [r2, #0]
 80002f8:	701a      	strb	r2, [r3, #0]
}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	46bd      	mov	sp, r7
 80002fe:	b004      	add	sp, #16
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <aes_key_schedule_128>:

void aes_key_schedule_128(const uint8_t *key, uint8_t *roundkeys) {
 8000304:	b5b0      	push	{r4, r5, r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]
    uint8_t temp[4];
    uint8_t *last4bytes; // point to the last 4 bytes of one round
    uint8_t *lastround;
    uint8_t i;

    for (i = 0; i < 16; ++i) {
 800030e:	2313      	movs	r3, #19
 8000310:	18fb      	adds	r3, r7, r3
 8000312:	2200      	movs	r2, #0
 8000314:	701a      	strb	r2, [r3, #0]
 8000316:	e00d      	b.n	8000334 <aes_key_schedule_128+0x30>
        *roundkeys++ = *key++;
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	1c53      	adds	r3, r2, #1
 800031c:	607b      	str	r3, [r7, #4]
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	1c59      	adds	r1, r3, #1
 8000322:	6039      	str	r1, [r7, #0]
 8000324:	7812      	ldrb	r2, [r2, #0]
 8000326:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 16; ++i) {
 8000328:	2213      	movs	r2, #19
 800032a:	18bb      	adds	r3, r7, r2
 800032c:	18ba      	adds	r2, r7, r2
 800032e:	7812      	ldrb	r2, [r2, #0]
 8000330:	3201      	adds	r2, #1
 8000332:	701a      	strb	r2, [r3, #0]
 8000334:	2213      	movs	r2, #19
 8000336:	18bb      	adds	r3, r7, r2
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b0f      	cmp	r3, #15
 800033c:	d9ec      	bls.n	8000318 <aes_key_schedule_128+0x14>
    }

    last4bytes = roundkeys-4;
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	3b04      	subs	r3, #4
 8000342:	617b      	str	r3, [r7, #20]
    for (i = 0; i < AES_ROUNDS; ++i) {
 8000344:	18bb      	adds	r3, r7, r2
 8000346:	2200      	movs	r2, #0
 8000348:	701a      	strb	r2, [r3, #0]
 800034a:	e110      	b.n	800056e <aes_key_schedule_128+0x26a>
        // k0-k3 for next round
        temp[3] = SBOX[*last4bytes++];
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	1c5a      	adds	r2, r3, #1
 8000350:	617a      	str	r2, [r7, #20]
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	001a      	movs	r2, r3
 8000356:	4b8b      	ldr	r3, [pc, #556]	; (8000584 <aes_key_schedule_128+0x280>)
 8000358:	5c9a      	ldrb	r2, [r3, r2]
 800035a:	2008      	movs	r0, #8
 800035c:	183b      	adds	r3, r7, r0
 800035e:	70da      	strb	r2, [r3, #3]
        temp[0] = SBOX[*last4bytes++];
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	1c5a      	adds	r2, r3, #1
 8000364:	617a      	str	r2, [r7, #20]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	001a      	movs	r2, r3
 800036a:	4b86      	ldr	r3, [pc, #536]	; (8000584 <aes_key_schedule_128+0x280>)
 800036c:	5c9a      	ldrb	r2, [r3, r2]
 800036e:	183b      	adds	r3, r7, r0
 8000370:	701a      	strb	r2, [r3, #0]
        temp[1] = SBOX[*last4bytes++];
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	1c5a      	adds	r2, r3, #1
 8000376:	617a      	str	r2, [r7, #20]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	001a      	movs	r2, r3
 800037c:	4b81      	ldr	r3, [pc, #516]	; (8000584 <aes_key_schedule_128+0x280>)
 800037e:	5c9a      	ldrb	r2, [r3, r2]
 8000380:	183b      	adds	r3, r7, r0
 8000382:	705a      	strb	r2, [r3, #1]
        temp[2] = SBOX[*last4bytes++];
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	1c5a      	adds	r2, r3, #1
 8000388:	617a      	str	r2, [r7, #20]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	001a      	movs	r2, r3
 800038e:	4b7d      	ldr	r3, [pc, #500]	; (8000584 <aes_key_schedule_128+0x280>)
 8000390:	5c9a      	ldrb	r2, [r3, r2]
 8000392:	183b      	adds	r3, r7, r0
 8000394:	709a      	strb	r2, [r3, #2]
        temp[0] ^= RC[i];
 8000396:	183b      	adds	r3, r7, r0
 8000398:	781a      	ldrb	r2, [r3, #0]
 800039a:	2513      	movs	r5, #19
 800039c:	197b      	adds	r3, r7, r5
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	4979      	ldr	r1, [pc, #484]	; (8000588 <aes_key_schedule_128+0x284>)
 80003a2:	5ccb      	ldrb	r3, [r1, r3]
 80003a4:	4053      	eors	r3, r2
 80003a6:	b2da      	uxtb	r2, r3
 80003a8:	0004      	movs	r4, r0
 80003aa:	193b      	adds	r3, r7, r4
 80003ac:	701a      	strb	r2, [r3, #0]
        lastround = roundkeys-16;
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	3b10      	subs	r3, #16
 80003b2:	60fb      	str	r3, [r7, #12]
        *roundkeys++ = temp[0] ^ *lastround++;
 80003b4:	193b      	adds	r3, r7, r4
 80003b6:	7819      	ldrb	r1, [r3, #0]
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	1c5a      	adds	r2, r3, #1
 80003bc:	60fa      	str	r2, [r7, #12]
 80003be:	781a      	ldrb	r2, [r3, #0]
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	1c58      	adds	r0, r3, #1
 80003c4:	6038      	str	r0, [r7, #0]
 80003c6:	404a      	eors	r2, r1
 80003c8:	b2d2      	uxtb	r2, r2
 80003ca:	701a      	strb	r2, [r3, #0]
        *roundkeys++ = temp[1] ^ *lastround++;
 80003cc:	193b      	adds	r3, r7, r4
 80003ce:	7859      	ldrb	r1, [r3, #1]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	1c5a      	adds	r2, r3, #1
 80003d4:	60fa      	str	r2, [r7, #12]
 80003d6:	781a      	ldrb	r2, [r3, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	1c58      	adds	r0, r3, #1
 80003dc:	6038      	str	r0, [r7, #0]
 80003de:	404a      	eors	r2, r1
 80003e0:	b2d2      	uxtb	r2, r2
 80003e2:	701a      	strb	r2, [r3, #0]
        *roundkeys++ = temp[2] ^ *lastround++;
 80003e4:	193b      	adds	r3, r7, r4
 80003e6:	7899      	ldrb	r1, [r3, #2]
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	1c5a      	adds	r2, r3, #1
 80003ec:	60fa      	str	r2, [r7, #12]
 80003ee:	781a      	ldrb	r2, [r3, #0]
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	1c58      	adds	r0, r3, #1
 80003f4:	6038      	str	r0, [r7, #0]
 80003f6:	404a      	eors	r2, r1
 80003f8:	b2d2      	uxtb	r2, r2
 80003fa:	701a      	strb	r2, [r3, #0]
        *roundkeys++ = temp[3] ^ *lastround++;
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	78d9      	ldrb	r1, [r3, #3]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	1c5a      	adds	r2, r3, #1
 8000404:	60fa      	str	r2, [r7, #12]
 8000406:	781a      	ldrb	r2, [r3, #0]
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	1c58      	adds	r0, r3, #1
 800040c:	6038      	str	r0, [r7, #0]
 800040e:	404a      	eors	r2, r1
 8000410:	b2d2      	uxtb	r2, r2
 8000412:	701a      	strb	r2, [r3, #0]
        // k4-k7 for next round
        *roundkeys++ = *last4bytes++ ^ *lastround++;
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	1c5a      	adds	r2, r3, #1
 8000418:	617a      	str	r2, [r7, #20]
 800041a:	7819      	ldrb	r1, [r3, #0]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	1c5a      	adds	r2, r3, #1
 8000420:	60fa      	str	r2, [r7, #12]
 8000422:	781a      	ldrb	r2, [r3, #0]
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	1c58      	adds	r0, r3, #1
 8000428:	6038      	str	r0, [r7, #0]
 800042a:	404a      	eors	r2, r1
 800042c:	b2d2      	uxtb	r2, r2
 800042e:	701a      	strb	r2, [r3, #0]
        *roundkeys++ = *last4bytes++ ^ *lastround++;
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	1c5a      	adds	r2, r3, #1
 8000434:	617a      	str	r2, [r7, #20]
 8000436:	7819      	ldrb	r1, [r3, #0]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	1c5a      	adds	r2, r3, #1
 800043c:	60fa      	str	r2, [r7, #12]
 800043e:	781a      	ldrb	r2, [r3, #0]
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	1c58      	adds	r0, r3, #1
 8000444:	6038      	str	r0, [r7, #0]
 8000446:	404a      	eors	r2, r1
 8000448:	b2d2      	uxtb	r2, r2
 800044a:	701a      	strb	r2, [r3, #0]
        *roundkeys++ = *last4bytes++ ^ *lastround++;
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	1c5a      	adds	r2, r3, #1
 8000450:	617a      	str	r2, [r7, #20]
 8000452:	7819      	ldrb	r1, [r3, #0]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	1c5a      	adds	r2, r3, #1
 8000458:	60fa      	str	r2, [r7, #12]
 800045a:	781a      	ldrb	r2, [r3, #0]
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	1c58      	adds	r0, r3, #1
 8000460:	6038      	str	r0, [r7, #0]
 8000462:	404a      	eors	r2, r1
 8000464:	b2d2      	uxtb	r2, r2
 8000466:	701a      	strb	r2, [r3, #0]
        *roundkeys++ = *last4bytes++ ^ *lastround++;
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	1c5a      	adds	r2, r3, #1
 800046c:	617a      	str	r2, [r7, #20]
 800046e:	7819      	ldrb	r1, [r3, #0]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	1c5a      	adds	r2, r3, #1
 8000474:	60fa      	str	r2, [r7, #12]
 8000476:	781a      	ldrb	r2, [r3, #0]
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	1c58      	adds	r0, r3, #1
 800047c:	6038      	str	r0, [r7, #0]
 800047e:	404a      	eors	r2, r1
 8000480:	b2d2      	uxtb	r2, r2
 8000482:	701a      	strb	r2, [r3, #0]
        // k8-k11 for next round
        *roundkeys++ = *last4bytes++ ^ *lastround++;
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	617a      	str	r2, [r7, #20]
 800048a:	7819      	ldrb	r1, [r3, #0]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	1c5a      	adds	r2, r3, #1
 8000490:	60fa      	str	r2, [r7, #12]
 8000492:	781a      	ldrb	r2, [r3, #0]
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	1c58      	adds	r0, r3, #1
 8000498:	6038      	str	r0, [r7, #0]
 800049a:	404a      	eors	r2, r1
 800049c:	b2d2      	uxtb	r2, r2
 800049e:	701a      	strb	r2, [r3, #0]
        *roundkeys++ = *last4bytes++ ^ *lastround++;
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	1c5a      	adds	r2, r3, #1
 80004a4:	617a      	str	r2, [r7, #20]
 80004a6:	7819      	ldrb	r1, [r3, #0]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	1c5a      	adds	r2, r3, #1
 80004ac:	60fa      	str	r2, [r7, #12]
 80004ae:	781a      	ldrb	r2, [r3, #0]
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	1c58      	adds	r0, r3, #1
 80004b4:	6038      	str	r0, [r7, #0]
 80004b6:	404a      	eors	r2, r1
 80004b8:	b2d2      	uxtb	r2, r2
 80004ba:	701a      	strb	r2, [r3, #0]
        *roundkeys++ = *last4bytes++ ^ *lastround++;
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	617a      	str	r2, [r7, #20]
 80004c2:	7819      	ldrb	r1, [r3, #0]
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	1c5a      	adds	r2, r3, #1
 80004c8:	60fa      	str	r2, [r7, #12]
 80004ca:	781a      	ldrb	r2, [r3, #0]
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	1c58      	adds	r0, r3, #1
 80004d0:	6038      	str	r0, [r7, #0]
 80004d2:	404a      	eors	r2, r1
 80004d4:	b2d2      	uxtb	r2, r2
 80004d6:	701a      	strb	r2, [r3, #0]
        *roundkeys++ = *last4bytes++ ^ *lastround++;
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	1c5a      	adds	r2, r3, #1
 80004dc:	617a      	str	r2, [r7, #20]
 80004de:	7819      	ldrb	r1, [r3, #0]
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	1c5a      	adds	r2, r3, #1
 80004e4:	60fa      	str	r2, [r7, #12]
 80004e6:	781a      	ldrb	r2, [r3, #0]
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	1c58      	adds	r0, r3, #1
 80004ec:	6038      	str	r0, [r7, #0]
 80004ee:	404a      	eors	r2, r1
 80004f0:	b2d2      	uxtb	r2, r2
 80004f2:	701a      	strb	r2, [r3, #0]
        // k12-k15 for next round
        *roundkeys++ = *last4bytes++ ^ *lastround++;
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	1c5a      	adds	r2, r3, #1
 80004f8:	617a      	str	r2, [r7, #20]
 80004fa:	7819      	ldrb	r1, [r3, #0]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	1c5a      	adds	r2, r3, #1
 8000500:	60fa      	str	r2, [r7, #12]
 8000502:	781a      	ldrb	r2, [r3, #0]
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	1c58      	adds	r0, r3, #1
 8000508:	6038      	str	r0, [r7, #0]
 800050a:	404a      	eors	r2, r1
 800050c:	b2d2      	uxtb	r2, r2
 800050e:	701a      	strb	r2, [r3, #0]
        *roundkeys++ = *last4bytes++ ^ *lastround++;
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	1c5a      	adds	r2, r3, #1
 8000514:	617a      	str	r2, [r7, #20]
 8000516:	7819      	ldrb	r1, [r3, #0]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	1c5a      	adds	r2, r3, #1
 800051c:	60fa      	str	r2, [r7, #12]
 800051e:	781a      	ldrb	r2, [r3, #0]
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	1c58      	adds	r0, r3, #1
 8000524:	6038      	str	r0, [r7, #0]
 8000526:	404a      	eors	r2, r1
 8000528:	b2d2      	uxtb	r2, r2
 800052a:	701a      	strb	r2, [r3, #0]
        *roundkeys++ = *last4bytes++ ^ *lastround++;
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	617a      	str	r2, [r7, #20]
 8000532:	7819      	ldrb	r1, [r3, #0]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	60fa      	str	r2, [r7, #12]
 800053a:	781a      	ldrb	r2, [r3, #0]
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	1c58      	adds	r0, r3, #1
 8000540:	6038      	str	r0, [r7, #0]
 8000542:	404a      	eors	r2, r1
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	701a      	strb	r2, [r3, #0]
        *roundkeys++ = *last4bytes++ ^ *lastround++;
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	1c5a      	adds	r2, r3, #1
 800054c:	617a      	str	r2, [r7, #20]
 800054e:	7819      	ldrb	r1, [r3, #0]
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	60fa      	str	r2, [r7, #12]
 8000556:	781a      	ldrb	r2, [r3, #0]
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	1c58      	adds	r0, r3, #1
 800055c:	6038      	str	r0, [r7, #0]
 800055e:	404a      	eors	r2, r1
 8000560:	b2d2      	uxtb	r2, r2
 8000562:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < AES_ROUNDS; ++i) {
 8000564:	197b      	adds	r3, r7, r5
 8000566:	197a      	adds	r2, r7, r5
 8000568:	7812      	ldrb	r2, [r2, #0]
 800056a:	3201      	adds	r2, #1
 800056c:	701a      	strb	r2, [r3, #0]
 800056e:	2313      	movs	r3, #19
 8000570:	18fb      	adds	r3, r7, r3
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b09      	cmp	r3, #9
 8000576:	d800      	bhi.n	800057a <aes_key_schedule_128+0x276>
 8000578:	e6e8      	b.n	800034c <aes_key_schedule_128+0x48>
    }
}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	b006      	add	sp, #24
 8000582:	bdb0      	pop	{r4, r5, r7, pc}
 8000584:	2000000c 	.word	0x2000000c
 8000588:	20000000 	.word	0x20000000

0800058c <aes_decrypt_128>:
        *(ciphertext+i) ^= *roundkeys++;
    }

}

void aes_decrypt_128(const uint8_t *roundkeys, const uint8_t *ciphertext, uint8_t *plaintext) {
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058e:	b08b      	sub	sp, #44	; 0x2c
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]

    uint8_t tmp[16];
    uint8_t t, u, v;
    uint8_t i, j;

    roundkeys += 160;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	33a0      	adds	r3, #160	; 0xa0
 800059c:	60fb      	str	r3, [r7, #12]

    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 800059e:	2327      	movs	r3, #39	; 0x27
 80005a0:	18fb      	adds	r3, r7, r3
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
 80005a6:	e016      	b.n	80005d6 <aes_decrypt_128+0x4a>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
 80005a8:	2427      	movs	r4, #39	; 0x27
 80005aa:	193b      	adds	r3, r7, r4
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	18d3      	adds	r3, r2, r3
 80005b2:	7819      	ldrb	r1, [r3, #0]
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	68fa      	ldr	r2, [r7, #12]
 80005ba:	18d3      	adds	r3, r2, r3
 80005bc:	781a      	ldrb	r2, [r3, #0]
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	18c3      	adds	r3, r0, r3
 80005c6:	404a      	eors	r2, r1
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	701a      	strb	r2, [r3, #0]
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	193a      	adds	r2, r7, r4
 80005d0:	7812      	ldrb	r2, [r2, #0]
 80005d2:	3201      	adds	r2, #1
 80005d4:	701a      	strb	r2, [r3, #0]
 80005d6:	2427      	movs	r4, #39	; 0x27
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b0f      	cmp	r3, #15
 80005de:	d9e3      	bls.n	80005a8 <aes_decrypt_128+0x1c>
    }
    roundkeys -= 16;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	3b10      	subs	r3, #16
 80005e4:	60fb      	str	r3, [r7, #12]
    inv_shift_rows(plaintext);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	0018      	movs	r0, r3
 80005ea:	f7ff fe35 	bl	8000258 <inv_shift_rows>
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
 80005f4:	e012      	b.n	800061c <aes_decrypt_128+0x90>
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
 80005f6:	2027      	movs	r0, #39	; 0x27
 80005f8:	183b      	adds	r3, r7, r0
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	18d3      	adds	r3, r2, r3
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	0019      	movs	r1, r3
 8000604:	183b      	adds	r3, r7, r0
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	18d3      	adds	r3, r2, r3
 800060c:	4aeb      	ldr	r2, [pc, #940]	; (80009bc <aes_decrypt_128+0x430>)
 800060e:	5c52      	ldrb	r2, [r2, r1]
 8000610:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 8000612:	183b      	adds	r3, r7, r0
 8000614:	183a      	adds	r2, r7, r0
 8000616:	7812      	ldrb	r2, [r2, #0]
 8000618:	3201      	adds	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
 800061c:	2327      	movs	r3, #39	; 0x27
 800061e:	18fb      	adds	r3, r7, r3
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b0f      	cmp	r3, #15
 8000624:	d9e7      	bls.n	80005f6 <aes_decrypt_128+0x6a>
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
 8000626:	2326      	movs	r3, #38	; 0x26
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	2201      	movs	r2, #1
 800062c:	701a      	strb	r2, [r3, #0]
 800062e:	e199      	b.n	8000964 <aes_decrypt_128+0x3d8>

        // Inverse AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 8000630:	2327      	movs	r3, #39	; 0x27
 8000632:	18fb      	adds	r3, r7, r3
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
 8000638:	e017      	b.n	800066a <aes_decrypt_128+0xde>
            *(tmp+i) = *(plaintext+i) ^ *(roundkeys+i);
 800063a:	2427      	movs	r4, #39	; 0x27
 800063c:	193b      	adds	r3, r7, r4
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	18d3      	adds	r3, r2, r3
 8000644:	7819      	ldrb	r1, [r3, #0]
 8000646:	193b      	adds	r3, r7, r4
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	18d3      	adds	r3, r2, r3
 800064e:	781a      	ldrb	r2, [r3, #0]
 8000650:	193b      	adds	r3, r7, r4
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2010      	movs	r0, #16
 8000656:	1838      	adds	r0, r7, r0
 8000658:	18c3      	adds	r3, r0, r3
 800065a:	404a      	eors	r2, r1
 800065c:	b2d2      	uxtb	r2, r2
 800065e:	701a      	strb	r2, [r3, #0]
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 8000660:	193b      	adds	r3, r7, r4
 8000662:	193a      	adds	r2, r7, r4
 8000664:	7812      	ldrb	r2, [r2, #0]
 8000666:	3201      	adds	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	2227      	movs	r2, #39	; 0x27
 800066c:	18bb      	adds	r3, r7, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d9e2      	bls.n	800063a <aes_decrypt_128+0xae>
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
 8000674:	18bb      	adds	r3, r7, r2
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
 800067a:	e144      	b.n	8000906 <aes_decrypt_128+0x37a>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
 800067c:	2527      	movs	r5, #39	; 0x27
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2610      	movs	r6, #16
 8000684:	19ba      	adds	r2, r7, r6
 8000686:	5cd2      	ldrb	r2, [r2, r3]
 8000688:	197b      	adds	r3, r7, r5
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	19b9      	adds	r1, r7, r6
 8000690:	5ccb      	ldrb	r3, [r1, r3]
 8000692:	4053      	eors	r3, r2
 8000694:	b2da      	uxtb	r2, r3
 8000696:	197b      	adds	r3, r7, r5
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	3302      	adds	r3, #2
 800069c:	19b9      	adds	r1, r7, r6
 800069e:	5ccb      	ldrb	r3, [r1, r3]
 80006a0:	4053      	eors	r3, r2
 80006a2:	b2d9      	uxtb	r1, r3
 80006a4:	197b      	adds	r3, r7, r5
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	3303      	adds	r3, #3
 80006aa:	19ba      	adds	r2, r7, r6
 80006ac:	5cd2      	ldrb	r2, [r2, r3]
 80006ae:	2025      	movs	r0, #37	; 0x25
 80006b0:	183b      	adds	r3, r7, r0
 80006b2:	404a      	eors	r2, r1
 80006b4:	701a      	strb	r2, [r3, #0]
            plaintext[i]   = t ^ tmp[i]   ^ mul2(tmp[i]   ^ tmp[i+1]);
 80006b6:	197b      	adds	r3, r7, r5
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	19ba      	adds	r2, r7, r6
 80006bc:	5cd2      	ldrb	r2, [r2, r3]
 80006be:	183b      	adds	r3, r7, r0
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	4053      	eors	r3, r2
 80006c4:	b2dc      	uxtb	r4, r3
 80006c6:	197b      	adds	r3, r7, r5
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	19ba      	adds	r2, r7, r6
 80006cc:	5cd2      	ldrb	r2, [r2, r3]
 80006ce:	197b      	adds	r3, r7, r5
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	3301      	adds	r3, #1
 80006d4:	19b9      	adds	r1, r7, r6
 80006d6:	5ccb      	ldrb	r3, [r1, r3]
 80006d8:	4053      	eors	r3, r2
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	0018      	movs	r0, r3
 80006de:	f7ff fd9f 	bl	8000220 <mul2>
 80006e2:	0003      	movs	r3, r0
 80006e4:	0019      	movs	r1, r3
 80006e6:	197b      	adds	r3, r7, r5
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	18d3      	adds	r3, r2, r3
 80006ee:	0022      	movs	r2, r4
 80006f0:	404a      	eors	r2, r1
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	701a      	strb	r2, [r3, #0]
            plaintext[i+1] = t ^ tmp[i+1] ^ mul2(tmp[i+1] ^ tmp[i+2]);
 80006f6:	197b      	adds	r3, r7, r5
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	19ba      	adds	r2, r7, r6
 80006fe:	5cd2      	ldrb	r2, [r2, r3]
 8000700:	2025      	movs	r0, #37	; 0x25
 8000702:	183b      	adds	r3, r7, r0
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4053      	eors	r3, r2
 8000708:	b2dc      	uxtb	r4, r3
 800070a:	197b      	adds	r3, r7, r5
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	19ba      	adds	r2, r7, r6
 8000712:	5cd2      	ldrb	r2, [r2, r3]
 8000714:	197b      	adds	r3, r7, r5
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	3302      	adds	r3, #2
 800071a:	19b9      	adds	r1, r7, r6
 800071c:	5ccb      	ldrb	r3, [r1, r3]
 800071e:	4053      	eors	r3, r2
 8000720:	b2db      	uxtb	r3, r3
 8000722:	0018      	movs	r0, r3
 8000724:	f7ff fd7c 	bl	8000220 <mul2>
 8000728:	0003      	movs	r3, r0
 800072a:	0019      	movs	r1, r3
 800072c:	197b      	adds	r3, r7, r5
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	18d3      	adds	r3, r2, r3
 8000736:	0022      	movs	r2, r4
 8000738:	404a      	eors	r2, r1
 800073a:	b2d2      	uxtb	r2, r2
 800073c:	701a      	strb	r2, [r3, #0]
            plaintext[i+2] = t ^ tmp[i+2] ^ mul2(tmp[i+2] ^ tmp[i+3]);
 800073e:	197b      	adds	r3, r7, r5
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	3302      	adds	r3, #2
 8000744:	19ba      	adds	r2, r7, r6
 8000746:	5cd2      	ldrb	r2, [r2, r3]
 8000748:	2025      	movs	r0, #37	; 0x25
 800074a:	183b      	adds	r3, r7, r0
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	4053      	eors	r3, r2
 8000750:	b2dc      	uxtb	r4, r3
 8000752:	197b      	adds	r3, r7, r5
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3302      	adds	r3, #2
 8000758:	19ba      	adds	r2, r7, r6
 800075a:	5cd2      	ldrb	r2, [r2, r3]
 800075c:	197b      	adds	r3, r7, r5
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	3303      	adds	r3, #3
 8000762:	19b9      	adds	r1, r7, r6
 8000764:	5ccb      	ldrb	r3, [r1, r3]
 8000766:	4053      	eors	r3, r2
 8000768:	b2db      	uxtb	r3, r3
 800076a:	0018      	movs	r0, r3
 800076c:	f7ff fd58 	bl	8000220 <mul2>
 8000770:	0003      	movs	r3, r0
 8000772:	0019      	movs	r1, r3
 8000774:	197b      	adds	r3, r7, r5
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	3302      	adds	r3, #2
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	18d3      	adds	r3, r2, r3
 800077e:	0022      	movs	r2, r4
 8000780:	404a      	eors	r2, r1
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	701a      	strb	r2, [r3, #0]
            plaintext[i+3] = t ^ tmp[i+3] ^ mul2(tmp[i+3] ^ tmp[i]);
 8000786:	0029      	movs	r1, r5
 8000788:	197b      	adds	r3, r7, r5
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	3303      	adds	r3, #3
 800078e:	19ba      	adds	r2, r7, r6
 8000790:	5cd2      	ldrb	r2, [r2, r3]
 8000792:	2025      	movs	r0, #37	; 0x25
 8000794:	183b      	adds	r3, r7, r0
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4053      	eors	r3, r2
 800079a:	b2dc      	uxtb	r4, r3
 800079c:	187b      	adds	r3, r7, r1
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	3303      	adds	r3, #3
 80007a2:	19ba      	adds	r2, r7, r6
 80007a4:	5cd2      	ldrb	r2, [r2, r3]
 80007a6:	000d      	movs	r5, r1
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	19b9      	adds	r1, r7, r6
 80007ae:	5ccb      	ldrb	r3, [r1, r3]
 80007b0:	4053      	eors	r3, r2
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	0018      	movs	r0, r3
 80007b6:	f7ff fd33 	bl	8000220 <mul2>
 80007ba:	0003      	movs	r3, r0
 80007bc:	0019      	movs	r1, r3
 80007be:	197b      	adds	r3, r7, r5
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	3303      	adds	r3, #3
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	0022      	movs	r2, r4
 80007ca:	404a      	eors	r2, r1
 80007cc:	b2d2      	uxtb	r2, r2
 80007ce:	701a      	strb	r2, [r3, #0]
            u = mul2(mul2(tmp[i]   ^ tmp[i+2]));
 80007d0:	197b      	adds	r3, r7, r5
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	19ba      	adds	r2, r7, r6
 80007d6:	5cd2      	ldrb	r2, [r2, r3]
 80007d8:	197b      	adds	r3, r7, r5
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	3302      	adds	r3, #2
 80007de:	19b9      	adds	r1, r7, r6
 80007e0:	5ccb      	ldrb	r3, [r1, r3]
 80007e2:	4053      	eors	r3, r2
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	0018      	movs	r0, r3
 80007e8:	f7ff fd1a 	bl	8000220 <mul2>
 80007ec:	0003      	movs	r3, r0
 80007ee:	2224      	movs	r2, #36	; 0x24
 80007f0:	18bc      	adds	r4, r7, r2
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff fd14 	bl	8000220 <mul2>
 80007f8:	0003      	movs	r3, r0
 80007fa:	7023      	strb	r3, [r4, #0]
            v = mul2(mul2(tmp[i+1] ^ tmp[i+3]));
 80007fc:	197b      	adds	r3, r7, r5
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	19ba      	adds	r2, r7, r6
 8000804:	5cd2      	ldrb	r2, [r2, r3]
 8000806:	197b      	adds	r3, r7, r5
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	3303      	adds	r3, #3
 800080c:	19b9      	adds	r1, r7, r6
 800080e:	5ccb      	ldrb	r3, [r1, r3]
 8000810:	4053      	eors	r3, r2
 8000812:	b2db      	uxtb	r3, r3
 8000814:	0018      	movs	r0, r3
 8000816:	f7ff fd03 	bl	8000220 <mul2>
 800081a:	0003      	movs	r3, r0
 800081c:	2123      	movs	r1, #35	; 0x23
 800081e:	000e      	movs	r6, r1
 8000820:	187c      	adds	r4, r7, r1
 8000822:	0018      	movs	r0, r3
 8000824:	f7ff fcfc 	bl	8000220 <mul2>
 8000828:	0003      	movs	r3, r0
 800082a:	7023      	strb	r3, [r4, #0]
            t = mul2(u ^ v);
 800082c:	2224      	movs	r2, #36	; 0x24
 800082e:	18ba      	adds	r2, r7, r2
 8000830:	0033      	movs	r3, r6
 8000832:	18fb      	adds	r3, r7, r3
 8000834:	7812      	ldrb	r2, [r2, #0]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4053      	eors	r3, r2
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2625      	movs	r6, #37	; 0x25
 800083e:	19bc      	adds	r4, r7, r6
 8000840:	0018      	movs	r0, r3
 8000842:	f7ff fced 	bl	8000220 <mul2>
 8000846:	0003      	movs	r3, r0
 8000848:	7023      	strb	r3, [r4, #0]
            plaintext[i]   ^= t ^ u;
 800084a:	197b      	adds	r3, r7, r5
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	18d3      	adds	r3, r2, r3
 8000852:	7819      	ldrb	r1, [r3, #0]
 8000854:	0034      	movs	r4, r6
 8000856:	193a      	adds	r2, r7, r4
 8000858:	2624      	movs	r6, #36	; 0x24
 800085a:	19bb      	adds	r3, r7, r6
 800085c:	7812      	ldrb	r2, [r2, #0]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4053      	eors	r3, r2
 8000862:	b2da      	uxtb	r2, r3
 8000864:	197b      	adds	r3, r7, r5
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	18c3      	adds	r3, r0, r3
 800086c:	404a      	eors	r2, r1
 800086e:	b2d2      	uxtb	r2, r2
 8000870:	701a      	strb	r2, [r3, #0]
            plaintext[i+1] ^= t ^ v;
 8000872:	0028      	movs	r0, r5
 8000874:	197b      	adds	r3, r7, r5
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	3301      	adds	r3, #1
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	18d3      	adds	r3, r2, r3
 800087e:	7819      	ldrb	r1, [r3, #0]
 8000880:	0025      	movs	r5, r4
 8000882:	197a      	adds	r2, r7, r5
 8000884:	2323      	movs	r3, #35	; 0x23
 8000886:	18fb      	adds	r3, r7, r3
 8000888:	7812      	ldrb	r2, [r2, #0]
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4053      	eors	r3, r2
 800088e:	b2da      	uxtb	r2, r3
 8000890:	0004      	movs	r4, r0
 8000892:	183b      	adds	r3, r7, r0
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	3301      	adds	r3, #1
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	18c3      	adds	r3, r0, r3
 800089c:	404a      	eors	r2, r1
 800089e:	b2d2      	uxtb	r2, r2
 80008a0:	701a      	strb	r2, [r3, #0]
            plaintext[i+2] ^= t ^ u;
 80008a2:	0020      	movs	r0, r4
 80008a4:	183b      	adds	r3, r7, r0
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	3302      	adds	r3, #2
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	18d3      	adds	r3, r2, r3
 80008ae:	7819      	ldrb	r1, [r3, #0]
 80008b0:	197a      	adds	r2, r7, r5
 80008b2:	19bb      	adds	r3, r7, r6
 80008b4:	7812      	ldrb	r2, [r2, #0]
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4053      	eors	r3, r2
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	0004      	movs	r4, r0
 80008be:	183b      	adds	r3, r7, r0
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	3302      	adds	r3, #2
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	18c3      	adds	r3, r0, r3
 80008c8:	404a      	eors	r2, r1
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	701a      	strb	r2, [r3, #0]
            plaintext[i+3] ^= t ^ v;
 80008ce:	0020      	movs	r0, r4
 80008d0:	183b      	adds	r3, r7, r0
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	3303      	adds	r3, #3
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	18d3      	adds	r3, r2, r3
 80008da:	7819      	ldrb	r1, [r3, #0]
 80008dc:	197a      	adds	r2, r7, r5
 80008de:	2323      	movs	r3, #35	; 0x23
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	7812      	ldrb	r2, [r2, #0]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4053      	eors	r3, r2
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	0004      	movs	r4, r0
 80008ec:	183b      	adds	r3, r7, r0
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	3303      	adds	r3, #3
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	18c3      	adds	r3, r0, r3
 80008f6:	404a      	eors	r2, r1
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	193a      	adds	r2, r7, r4
 8000900:	7812      	ldrb	r2, [r2, #0]
 8000902:	3204      	adds	r2, #4
 8000904:	701a      	strb	r2, [r3, #0]
 8000906:	2427      	movs	r4, #39	; 0x27
 8000908:	193b      	adds	r3, r7, r4
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b0f      	cmp	r3, #15
 800090e:	d800      	bhi.n	8000912 <aes_decrypt_128+0x386>
 8000910:	e6b4      	b.n	800067c <aes_decrypt_128+0xf0>
        }

        // Inverse ShiftRows
        inv_shift_rows(plaintext);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	0018      	movs	r0, r3
 8000916:	f7ff fc9f 	bl	8000258 <inv_shift_rows>

        // Inverse SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 800091a:	193b      	adds	r3, r7, r4
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
 8000920:	e012      	b.n	8000948 <aes_decrypt_128+0x3bc>
            *(plaintext+i) = INV_SBOX[*(plaintext+i)];
 8000922:	2027      	movs	r0, #39	; 0x27
 8000924:	183b      	adds	r3, r7, r0
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	18d3      	adds	r3, r2, r3
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	0019      	movs	r1, r3
 8000930:	183b      	adds	r3, r7, r0
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	18d3      	adds	r3, r2, r3
 8000938:	4a20      	ldr	r2, [pc, #128]	; (80009bc <aes_decrypt_128+0x430>)
 800093a:	5c52      	ldrb	r2, [r2, r1]
 800093c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 800093e:	183b      	adds	r3, r7, r0
 8000940:	183a      	adds	r2, r7, r0
 8000942:	7812      	ldrb	r2, [r2, #0]
 8000944:	3201      	adds	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	2327      	movs	r3, #39	; 0x27
 800094a:	18fb      	adds	r3, r7, r3
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b0f      	cmp	r3, #15
 8000950:	d9e7      	bls.n	8000922 <aes_decrypt_128+0x396>
        }

        roundkeys -= 16;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	3b10      	subs	r3, #16
 8000956:	60fb      	str	r3, [r7, #12]
    for (j = 1; j < AES_ROUNDS; ++j) {
 8000958:	2226      	movs	r2, #38	; 0x26
 800095a:	18bb      	adds	r3, r7, r2
 800095c:	18ba      	adds	r2, r7, r2
 800095e:	7812      	ldrb	r2, [r2, #0]
 8000960:	3201      	adds	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	2326      	movs	r3, #38	; 0x26
 8000966:	18fb      	adds	r3, r7, r3
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b09      	cmp	r3, #9
 800096c:	d800      	bhi.n	8000970 <aes_decrypt_128+0x3e4>
 800096e:	e65f      	b.n	8000630 <aes_decrypt_128+0xa4>

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 8000970:	2327      	movs	r3, #39	; 0x27
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
 8000978:	e016      	b.n	80009a8 <aes_decrypt_128+0x41c>
        *(plaintext+i) ^= *(roundkeys+i);
 800097a:	2427      	movs	r4, #39	; 0x27
 800097c:	193b      	adds	r3, r7, r4
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	18d3      	adds	r3, r2, r3
 8000984:	7819      	ldrb	r1, [r3, #0]
 8000986:	193b      	adds	r3, r7, r4
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	18d3      	adds	r3, r2, r3
 800098e:	781a      	ldrb	r2, [r3, #0]
 8000990:	193b      	adds	r3, r7, r4
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	18c3      	adds	r3, r0, r3
 8000998:	404a      	eors	r2, r1
 800099a:	b2d2      	uxtb	r2, r2
 800099c:	701a      	strb	r2, [r3, #0]
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	193a      	adds	r2, r7, r4
 80009a2:	7812      	ldrb	r2, [r2, #0]
 80009a4:	3201      	adds	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
 80009a8:	2327      	movs	r3, #39	; 0x27
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b0f      	cmp	r3, #15
 80009b0:	d9e3      	bls.n	800097a <aes_decrypt_128+0x3ee>
    }

}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b00b      	add	sp, #44	; 0x2c
 80009ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009bc:	2000010c 	.word	0x2000010c

080009c0 <des_decrypt>:
 * The DES function
 * input: 64 bit message
 * key: 64 bit key for encryption/decryption
 * mode: 'e' = encryption; 'd' = decryption
 */
uint64_t des_decrypt(uint64_t input, uint64_t key) {
 80009c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009c2:	46ce      	mov	lr, r9
 80009c4:	4647      	mov	r7, r8
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b0fb      	sub	sp, #492	; 0x1ec
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	26f0      	movs	r6, #240	; 0xf0
 80009ce:	2408      	movs	r4, #8
 80009d0:	1936      	adds	r6, r6, r4
 80009d2:	2408      	movs	r4, #8
 80009d4:	46a4      	mov	ip, r4
 80009d6:	44bc      	add	ip, r7
 80009d8:	4466      	add	r6, ip
 80009da:	6030      	str	r0, [r6, #0]
 80009dc:	6071      	str	r1, [r6, #4]
 80009de:	26e8      	movs	r6, #232	; 0xe8
 80009e0:	2108      	movs	r1, #8
 80009e2:	1871      	adds	r1, r6, r1
 80009e4:	2008      	movs	r0, #8
 80009e6:	4684      	mov	ip, r0
 80009e8:	44bc      	add	ip, r7
 80009ea:	4461      	add	r1, ip
 80009ec:	600a      	str	r2, [r1, #0]
 80009ee:	604b      	str	r3, [r1, #4]
    
    /* 8 bits */
    char row, column;
    
    /* 28 bits */
    uint32_t C                  = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	22e4      	movs	r2, #228	; 0xe4
 80009f4:	1992      	adds	r2, r2, r6
 80009f6:	2108      	movs	r1, #8
 80009f8:	468c      	mov	ip, r1
 80009fa:	2108      	movs	r1, #8
 80009fc:	4688      	mov	r8, r1
 80009fe:	44b8      	add	r8, r7
 8000a00:	44c4      	add	ip, r8
 8000a02:	4462      	add	r2, ip
 8000a04:	6013      	str	r3, [r2, #0]
    uint32_t D                  = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	22e0      	movs	r2, #224	; 0xe0
 8000a0a:	1992      	adds	r2, r2, r6
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	468c      	mov	ip, r1
 8000a10:	2108      	movs	r1, #8
 8000a12:	4688      	mov	r8, r1
 8000a14:	44b8      	add	r8, r7
 8000a16:	44c4      	add	ip, r8
 8000a18:	4462      	add	r2, ip
 8000a1a:	6013      	str	r3, [r2, #0]
    
    /* 32 bits */
    uint32_t L                  = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	22dc      	movs	r2, #220	; 0xdc
 8000a20:	1992      	adds	r2, r2, r6
 8000a22:	2108      	movs	r1, #8
 8000a24:	468c      	mov	ip, r1
 8000a26:	2108      	movs	r1, #8
 8000a28:	4688      	mov	r8, r1
 8000a2a:	44b8      	add	r8, r7
 8000a2c:	44c4      	add	ip, r8
 8000a2e:	4462      	add	r2, ip
 8000a30:	6013      	str	r3, [r2, #0]
    uint32_t R                  = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	22d8      	movs	r2, #216	; 0xd8
 8000a36:	1992      	adds	r2, r2, r6
 8000a38:	2108      	movs	r1, #8
 8000a3a:	468c      	mov	ip, r1
 8000a3c:	2108      	movs	r1, #8
 8000a3e:	4688      	mov	r8, r1
 8000a40:	44b8      	add	r8, r7
 8000a42:	44c4      	add	ip, r8
 8000a44:	4462      	add	r2, ip
 8000a46:	6013      	str	r3, [r2, #0]
    uint32_t s_output           = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	22d4      	movs	r2, #212	; 0xd4
 8000a4c:	1992      	adds	r2, r2, r6
 8000a4e:	2108      	movs	r1, #8
 8000a50:	468c      	mov	ip, r1
 8000a52:	2108      	movs	r1, #8
 8000a54:	4688      	mov	r8, r1
 8000a56:	44b8      	add	r8, r7
 8000a58:	44c4      	add	ip, r8
 8000a5a:	4462      	add	r2, ip
 8000a5c:	6013      	str	r3, [r2, #0]
    uint32_t f_function_res     = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	22d0      	movs	r2, #208	; 0xd0
 8000a62:	1992      	adds	r2, r2, r6
 8000a64:	2108      	movs	r1, #8
 8000a66:	468c      	mov	ip, r1
 8000a68:	2108      	movs	r1, #8
 8000a6a:	4688      	mov	r8, r1
 8000a6c:	44b8      	add	r8, r7
 8000a6e:	44c4      	add	ip, r8
 8000a70:	4462      	add	r2, ip
 8000a72:	6013      	str	r3, [r2, #0]
    uint32_t temp               = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	22ac      	movs	r2, #172	; 0xac
 8000a78:	1992      	adds	r2, r2, r6
 8000a7a:	2108      	movs	r1, #8
 8000a7c:	468c      	mov	ip, r1
 8000a7e:	2108      	movs	r1, #8
 8000a80:	4688      	mov	r8, r1
 8000a82:	44b8      	add	r8, r7
 8000a84:	44c4      	add	ip, r8
 8000a86:	4462      	add	r2, ip
 8000a88:	6013      	str	r3, [r2, #0]
    
    /* 48 bits */
    uint64_t sub_key[16]        = {0};
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	199b      	adds	r3, r3, r6
 8000a8e:	2208      	movs	r2, #8
 8000a90:	4694      	mov	ip, r2
 8000a92:	2208      	movs	r2, #8
 8000a94:	4690      	mov	r8, r2
 8000a96:	44b8      	add	r8, r7
 8000a98:	44c4      	add	ip, r8
 8000a9a:	4463      	add	r3, ip
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f003 fc40 	bl	8004328 <memset>
    uint64_t s_input            = 0;
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2300      	movs	r3, #0
 8000aac:	21c8      	movs	r1, #200	; 0xc8
 8000aae:	0030      	movs	r0, r6
 8000ab0:	1809      	adds	r1, r1, r0
 8000ab2:	2408      	movs	r4, #8
 8000ab4:	46a4      	mov	ip, r4
 8000ab6:	2408      	movs	r4, #8
 8000ab8:	46a0      	mov	r8, r4
 8000aba:	44b8      	add	r8, r7
 8000abc:	44c4      	add	ip, r8
 8000abe:	4461      	add	r1, ip
 8000ac0:	600a      	str	r2, [r1, #0]
 8000ac2:	604b      	str	r3, [r1, #4]
    
    /* 56 bits */
    uint64_t permuted_choice_1  = 0;
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	21c0      	movs	r1, #192	; 0xc0
 8000aca:	1809      	adds	r1, r1, r0
 8000acc:	2408      	movs	r4, #8
 8000ace:	46a4      	mov	ip, r4
 8000ad0:	2408      	movs	r4, #8
 8000ad2:	46a0      	mov	r8, r4
 8000ad4:	44b8      	add	r8, r7
 8000ad6:	44c4      	add	ip, r8
 8000ad8:	4461      	add	r1, ip
 8000ada:	600a      	str	r2, [r1, #0]
 8000adc:	604b      	str	r3, [r1, #4]
    uint64_t permuted_choice_2  = 0;
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	21a0      	movs	r1, #160	; 0xa0
 8000ae4:	1809      	adds	r1, r1, r0
 8000ae6:	2408      	movs	r4, #8
 8000ae8:	46a4      	mov	ip, r4
 8000aea:	2408      	movs	r4, #8
 8000aec:	46a0      	mov	r8, r4
 8000aee:	44b8      	add	r8, r7
 8000af0:	44c4      	add	ip, r8
 8000af2:	4461      	add	r1, ip
 8000af4:	600a      	str	r2, [r1, #0]
 8000af6:	604b      	str	r3, [r1, #4]
    
    /* 64 bits */
    uint64_t init_perm_res      = 0;
 8000af8:	2200      	movs	r2, #0
 8000afa:	2300      	movs	r3, #0
 8000afc:	21b8      	movs	r1, #184	; 0xb8
 8000afe:	1809      	adds	r1, r1, r0
 8000b00:	2408      	movs	r4, #8
 8000b02:	46a4      	mov	ip, r4
 8000b04:	2408      	movs	r4, #8
 8000b06:	46a0      	mov	r8, r4
 8000b08:	44b8      	add	r8, r7
 8000b0a:	44c4      	add	ip, r8
 8000b0c:	4461      	add	r1, ip
 8000b0e:	600a      	str	r2, [r1, #0]
 8000b10:	604b      	str	r3, [r1, #4]
    uint64_t inv_init_perm_res  = 0;
 8000b12:	2200      	movs	r2, #0
 8000b14:	2300      	movs	r3, #0
 8000b16:	21b0      	movs	r1, #176	; 0xb0
 8000b18:	1809      	adds	r1, r1, r0
 8000b1a:	2408      	movs	r4, #8
 8000b1c:	46a4      	mov	ip, r4
 8000b1e:	2408      	movs	r4, #8
 8000b20:	46a0      	mov	r8, r4
 8000b22:	44b8      	add	r8, r7
 8000b24:	44c4      	add	ip, r8
 8000b26:	4461      	add	r1, ip
 8000b28:	600a      	str	r2, [r1, #0]
 8000b2a:	604b      	str	r3, [r1, #4]
    uint64_t pre_output         = 0;
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2300      	movs	r3, #0
 8000b30:	2198      	movs	r1, #152	; 0x98
 8000b32:	1809      	adds	r1, r1, r0
 8000b34:	2408      	movs	r4, #8
 8000b36:	46a4      	mov	ip, r4
 8000b38:	2408      	movs	r4, #8
 8000b3a:	46a0      	mov	r8, r4
 8000b3c:	44b8      	add	r8, r7
 8000b3e:	44c4      	add	ip, r8
 8000b40:	4461      	add	r1, ip
 8000b42:	600a      	str	r2, [r1, #0]
 8000b44:	604b      	str	r3, [r1, #4]
    
    /* initial permutation */
    for (i = 0; i < 64; i++) {
 8000b46:	2300      	movs	r3, #0
 8000b48:	22ec      	movs	r2, #236	; 0xec
 8000b4a:	1812      	adds	r2, r2, r0
 8000b4c:	2108      	movs	r1, #8
 8000b4e:	468c      	mov	ip, r1
 8000b50:	2108      	movs	r1, #8
 8000b52:	4688      	mov	r8, r1
 8000b54:	44b8      	add	r8, r7
 8000b56:	44c4      	add	ip, r8
 8000b58:	4462      	add	r2, ip
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	e0b1      	b.n	8000cc2 <des_decrypt+0x302>
        
        init_perm_res <<= 1;
 8000b5e:	21b8      	movs	r1, #184	; 0xb8
 8000b60:	20e8      	movs	r0, #232	; 0xe8
 8000b62:	180b      	adds	r3, r1, r0
 8000b64:	2208      	movs	r2, #8
 8000b66:	4694      	mov	ip, r2
 8000b68:	2208      	movs	r2, #8
 8000b6a:	4690      	mov	r8, r2
 8000b6c:	44b8      	add	r8, r7
 8000b6e:	44c4      	add	ip, r8
 8000b70:	4463      	add	r3, ip
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	1892      	adds	r2, r2, r2
 8000b78:	415b      	adcs	r3, r3
 8000b7a:	1809      	adds	r1, r1, r0
 8000b7c:	2408      	movs	r4, #8
 8000b7e:	46a4      	mov	ip, r4
 8000b80:	2408      	movs	r4, #8
 8000b82:	46a0      	mov	r8, r4
 8000b84:	44b8      	add	r8, r7
 8000b86:	44c4      	add	ip, r8
 8000b88:	4461      	add	r1, ip
 8000b8a:	600a      	str	r2, [r1, #0]
 8000b8c:	604b      	str	r3, [r1, #4]
        init_perm_res |= (input >> (64-IP[i])) & LB64_MASK;
 8000b8e:	4a99      	ldr	r2, [pc, #612]	; (8000df4 <des_decrypt+0x434>)
 8000b90:	23ec      	movs	r3, #236	; 0xec
 8000b92:	181b      	adds	r3, r3, r0
 8000b94:	2108      	movs	r1, #8
 8000b96:	468c      	mov	ip, r1
 8000b98:	2108      	movs	r1, #8
 8000b9a:	4688      	mov	r8, r1
 8000b9c:	44b8      	add	r8, r7
 8000b9e:	44c4      	add	ip, r8
 8000ba0:	4463      	add	r3, ip
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	18d3      	adds	r3, r2, r3
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	001a      	movs	r2, r3
 8000baa:	2340      	movs	r3, #64	; 0x40
 8000bac:	1a99      	subs	r1, r3, r2
 8000bae:	000a      	movs	r2, r1
 8000bb0:	3a20      	subs	r2, #32
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	db0a      	blt.n	8000bcc <des_decrypt+0x20c>
 8000bb6:	23f4      	movs	r3, #244	; 0xf4
 8000bb8:	2008      	movs	r0, #8
 8000bba:	181b      	adds	r3, r3, r0
 8000bbc:	2008      	movs	r0, #8
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	44bc      	add	ip, r7
 8000bc2:	4463      	add	r3, ip
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	40d3      	lsrs	r3, r2
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	e018      	b.n	8000bfe <des_decrypt+0x23e>
 8000bcc:	2320      	movs	r3, #32
 8000bce:	1a5a      	subs	r2, r3, r1
 8000bd0:	23f4      	movs	r3, #244	; 0xf4
 8000bd2:	2008      	movs	r0, #8
 8000bd4:	181b      	adds	r3, r3, r0
 8000bd6:	2008      	movs	r0, #8
 8000bd8:	4684      	mov	ip, r0
 8000bda:	44bc      	add	ip, r7
 8000bdc:	4463      	add	r3, ip
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4093      	lsls	r3, r2
 8000be2:	001a      	movs	r2, r3
 8000be4:	23f0      	movs	r3, #240	; 0xf0
 8000be6:	2008      	movs	r0, #8
 8000be8:	181b      	adds	r3, r3, r0
 8000bea:	2008      	movs	r0, #8
 8000bec:	4684      	mov	ip, r0
 8000bee:	44bc      	add	ip, r7
 8000bf0:	4463      	add	r3, ip
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	40cb      	lsrs	r3, r1
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	23f4      	movs	r3, #244	; 0xf4
 8000c00:	2208      	movs	r2, #8
 8000c02:	189b      	adds	r3, r3, r2
 8000c04:	2208      	movs	r2, #8
 8000c06:	4694      	mov	ip, r2
 8000c08:	44bc      	add	ip, r7
 8000c0a:	4463      	add	r3, ip
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	40cb      	lsrs	r3, r1
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	2301      	movs	r3, #1
 8000c14:	683a      	ldr	r2, [r7, #0]
 8000c16:	4013      	ands	r3, r2
 8000c18:	2288      	movs	r2, #136	; 0x88
 8000c1a:	2108      	movs	r1, #8
 8000c1c:	1851      	adds	r1, r2, r1
 8000c1e:	2008      	movs	r0, #8
 8000c20:	4684      	mov	ip, r0
 8000c22:	44bc      	add	ip, r7
 8000c24:	4461      	add	r1, ip
 8000c26:	600b      	str	r3, [r1, #0]
 8000c28:	2300      	movs	r3, #0
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	400b      	ands	r3, r1
 8000c2e:	218c      	movs	r1, #140	; 0x8c
 8000c30:	2008      	movs	r0, #8
 8000c32:	1809      	adds	r1, r1, r0
 8000c34:	2008      	movs	r0, #8
 8000c36:	4684      	mov	ip, r0
 8000c38:	44bc      	add	ip, r7
 8000c3a:	4461      	add	r1, ip
 8000c3c:	600b      	str	r3, [r1, #0]
 8000c3e:	20b8      	movs	r0, #184	; 0xb8
 8000c40:	26e8      	movs	r6, #232	; 0xe8
 8000c42:	1983      	adds	r3, r0, r6
 8000c44:	2108      	movs	r1, #8
 8000c46:	468c      	mov	ip, r1
 8000c48:	2108      	movs	r1, #8
 8000c4a:	4688      	mov	r8, r1
 8000c4c:	44b8      	add	r8, r7
 8000c4e:	44c4      	add	ip, r8
 8000c50:	4463      	add	r3, ip
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2108      	movs	r1, #8
 8000c56:	1852      	adds	r2, r2, r1
 8000c58:	2108      	movs	r1, #8
 8000c5a:	468c      	mov	ip, r1
 8000c5c:	44bc      	add	ip, r7
 8000c5e:	4462      	add	r2, ip
 8000c60:	6811      	ldr	r1, [r2, #0]
 8000c62:	6852      	ldr	r2, [r2, #4]
 8000c64:	000e      	movs	r6, r1
 8000c66:	431e      	orrs	r6, r3
 8000c68:	633e      	str	r6, [r7, #48]	; 0x30
 8000c6a:	23bc      	movs	r3, #188	; 0xbc
 8000c6c:	26e8      	movs	r6, #232	; 0xe8
 8000c6e:	199b      	adds	r3, r3, r6
 8000c70:	2408      	movs	r4, #8
 8000c72:	46a4      	mov	ip, r4
 8000c74:	2408      	movs	r4, #8
 8000c76:	46a0      	mov	r8, r4
 8000c78:	44b8      	add	r8, r7
 8000c7a:	44c4      	add	ip, r8
 8000c7c:	4463      	add	r3, ip
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	431a      	orrs	r2, r3
 8000c82:	637a      	str	r2, [r7, #52]	; 0x34
 8000c84:	1983      	adds	r3, r0, r6
 8000c86:	2208      	movs	r2, #8
 8000c88:	2108      	movs	r1, #8
 8000c8a:	1852      	adds	r2, r2, r1
 8000c8c:	19d2      	adds	r2, r2, r7
 8000c8e:	1899      	adds	r1, r3, r2
 8000c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c94:	600a      	str	r2, [r1, #0]
 8000c96:	604b      	str	r3, [r1, #4]
    for (i = 0; i < 64; i++) {
 8000c98:	22ec      	movs	r2, #236	; 0xec
 8000c9a:	0031      	movs	r1, r6
 8000c9c:	1993      	adds	r3, r2, r6
 8000c9e:	2008      	movs	r0, #8
 8000ca0:	4684      	mov	ip, r0
 8000ca2:	2008      	movs	r0, #8
 8000ca4:	4680      	mov	r8, r0
 8000ca6:	44b8      	add	r8, r7
 8000ca8:	44c4      	add	ip, r8
 8000caa:	4463      	add	r3, ip
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	1852      	adds	r2, r2, r1
 8000cb2:	2108      	movs	r1, #8
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	2108      	movs	r1, #8
 8000cb8:	4688      	mov	r8, r1
 8000cba:	44b8      	add	r8, r7
 8000cbc:	44c4      	add	ip, r8
 8000cbe:	4462      	add	r2, ip
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	22ec      	movs	r2, #236	; 0xec
 8000cc4:	20e8      	movs	r0, #232	; 0xe8
 8000cc6:	1813      	adds	r3, r2, r0
 8000cc8:	2108      	movs	r1, #8
 8000cca:	468c      	mov	ip, r1
 8000ccc:	2108      	movs	r1, #8
 8000cce:	4688      	mov	r8, r1
 8000cd0:	44b8      	add	r8, r7
 8000cd2:	44c4      	add	ip, r8
 8000cd4:	4463      	add	r3, ip
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b3f      	cmp	r3, #63	; 0x3f
 8000cda:	dc00      	bgt.n	8000cde <des_decrypt+0x31e>
 8000cdc:	e73f      	b.n	8000b5e <des_decrypt+0x19e>
        
    }
    
    L = (uint32_t) (init_perm_res >> 32) & L64_MASK;
 8000cde:	23bc      	movs	r3, #188	; 0xbc
 8000ce0:	181b      	adds	r3, r3, r0
 8000ce2:	2108      	movs	r1, #8
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	4688      	mov	r8, r1
 8000cea:	44b8      	add	r8, r7
 8000cec:	44c4      	add	ip, r8
 8000cee:	4463      	add	r3, ip
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	001b      	movs	r3, r3
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	2408      	movs	r4, #8
 8000cf8:	190c      	adds	r4, r1, r4
 8000cfa:	2508      	movs	r5, #8
 8000cfc:	46ac      	mov	ip, r5
 8000cfe:	44bc      	add	ip, r7
 8000d00:	4464      	add	r4, ip
 8000d02:	6023      	str	r3, [r4, #0]
 8000d04:	2300      	movs	r3, #0
 8000d06:	2484      	movs	r4, #132	; 0x84
 8000d08:	2508      	movs	r5, #8
 8000d0a:	1964      	adds	r4, r4, r5
 8000d0c:	2508      	movs	r5, #8
 8000d0e:	46ac      	mov	ip, r5
 8000d10:	44bc      	add	ip, r7
 8000d12:	4464      	add	r4, ip
 8000d14:	6023      	str	r3, [r4, #0]
 8000d16:	2308      	movs	r3, #8
 8000d18:	18cb      	adds	r3, r1, r3
 8000d1a:	2108      	movs	r1, #8
 8000d1c:	468c      	mov	ip, r1
 8000d1e:	44bc      	add	ip, r7
 8000d20:	4463      	add	r3, ip
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	21dc      	movs	r1, #220	; 0xdc
 8000d26:	1809      	adds	r1, r1, r0
 8000d28:	2408      	movs	r4, #8
 8000d2a:	46a4      	mov	ip, r4
 8000d2c:	2408      	movs	r4, #8
 8000d2e:	46a0      	mov	r8, r4
 8000d30:	44b8      	add	r8, r7
 8000d32:	44c4      	add	ip, r8
 8000d34:	4461      	add	r1, ip
 8000d36:	600b      	str	r3, [r1, #0]
    R = (uint32_t) init_perm_res & L64_MASK;
 8000d38:	23b8      	movs	r3, #184	; 0xb8
 8000d3a:	181b      	adds	r3, r3, r0
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	468c      	mov	ip, r1
 8000d40:	2108      	movs	r1, #8
 8000d42:	4688      	mov	r8, r1
 8000d44:	44b8      	add	r8, r7
 8000d46:	44c4      	add	ip, r8
 8000d48:	4463      	add	r3, ip
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	21d8      	movs	r1, #216	; 0xd8
 8000d4e:	1809      	adds	r1, r1, r0
 8000d50:	2408      	movs	r4, #8
 8000d52:	46a4      	mov	ip, r4
 8000d54:	2408      	movs	r4, #8
 8000d56:	46a0      	mov	r8, r4
 8000d58:	44b8      	add	r8, r7
 8000d5a:	44c4      	add	ip, r8
 8000d5c:	4461      	add	r1, ip
 8000d5e:	600b      	str	r3, [r1, #0]
        
    /* initial key schedule calculation */
    for (i = 0; i < 56; i++) {
 8000d60:	2300      	movs	r3, #0
 8000d62:	1812      	adds	r2, r2, r0
 8000d64:	2108      	movs	r1, #8
 8000d66:	468c      	mov	ip, r1
 8000d68:	2108      	movs	r1, #8
 8000d6a:	4688      	mov	r8, r1
 8000d6c:	44b8      	add	r8, r7
 8000d6e:	44c4      	add	ip, r8
 8000d70:	4462      	add	r2, ip
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	e0d7      	b.n	8000f26 <des_decrypt+0x566>
        
        permuted_choice_1 <<= 1;
 8000d76:	21c0      	movs	r1, #192	; 0xc0
 8000d78:	20e8      	movs	r0, #232	; 0xe8
 8000d7a:	180b      	adds	r3, r1, r0
 8000d7c:	2208      	movs	r2, #8
 8000d7e:	4694      	mov	ip, r2
 8000d80:	2208      	movs	r2, #8
 8000d82:	4690      	mov	r8, r2
 8000d84:	44b8      	add	r8, r7
 8000d86:	44c4      	add	ip, r8
 8000d88:	4463      	add	r3, ip
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	1892      	adds	r2, r2, r2
 8000d90:	415b      	adcs	r3, r3
 8000d92:	1809      	adds	r1, r1, r0
 8000d94:	2408      	movs	r4, #8
 8000d96:	46a4      	mov	ip, r4
 8000d98:	2408      	movs	r4, #8
 8000d9a:	46a0      	mov	r8, r4
 8000d9c:	44b8      	add	r8, r7
 8000d9e:	44c4      	add	ip, r8
 8000da0:	4461      	add	r1, ip
 8000da2:	600a      	str	r2, [r1, #0]
 8000da4:	604b      	str	r3, [r1, #4]
        permuted_choice_1 |= (key >> (64-PC1[i])) & LB64_MASK;
 8000da6:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <des_decrypt+0x438>)
 8000da8:	23ec      	movs	r3, #236	; 0xec
 8000daa:	181b      	adds	r3, r3, r0
 8000dac:	2108      	movs	r1, #8
 8000dae:	468c      	mov	ip, r1
 8000db0:	2108      	movs	r1, #8
 8000db2:	4688      	mov	r8, r1
 8000db4:	44b8      	add	r8, r7
 8000db6:	44c4      	add	ip, r8
 8000db8:	4463      	add	r3, ip
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	18d3      	adds	r3, r2, r3
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	2340      	movs	r3, #64	; 0x40
 8000dc4:	1a99      	subs	r1, r3, r2
 8000dc6:	000a      	movs	r2, r1
 8000dc8:	3a20      	subs	r2, #32
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	db16      	blt.n	8000dfc <des_decrypt+0x43c>
 8000dce:	23ec      	movs	r3, #236	; 0xec
 8000dd0:	2008      	movs	r0, #8
 8000dd2:	181b      	adds	r3, r3, r0
 8000dd4:	2008      	movs	r0, #8
 8000dd6:	4684      	mov	ip, r0
 8000dd8:	44bc      	add	ip, r7
 8000dda:	4463      	add	r3, ip
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	40d3      	lsrs	r3, r2
 8000de0:	22e0      	movs	r2, #224	; 0xe0
 8000de2:	2008      	movs	r0, #8
 8000de4:	1812      	adds	r2, r2, r0
 8000de6:	2008      	movs	r0, #8
 8000de8:	4684      	mov	ip, r0
 8000dea:	44bc      	add	ip, r7
 8000dec:	4462      	add	r2, ip
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	e030      	b.n	8000e54 <des_decrypt+0x494>
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	2000020c 	.word	0x2000020c
 8000df8:	200004dc 	.word	0x200004dc
 8000dfc:	2320      	movs	r3, #32
 8000dfe:	1a5a      	subs	r2, r3, r1
 8000e00:	23ec      	movs	r3, #236	; 0xec
 8000e02:	2008      	movs	r0, #8
 8000e04:	181b      	adds	r3, r3, r0
 8000e06:	2008      	movs	r0, #8
 8000e08:	4684      	mov	ip, r0
 8000e0a:	44bc      	add	ip, r7
 8000e0c:	4463      	add	r3, ip
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4093      	lsls	r3, r2
 8000e12:	001a      	movs	r2, r3
 8000e14:	23e8      	movs	r3, #232	; 0xe8
 8000e16:	2008      	movs	r0, #8
 8000e18:	181b      	adds	r3, r3, r0
 8000e1a:	2008      	movs	r0, #8
 8000e1c:	4684      	mov	ip, r0
 8000e1e:	44bc      	add	ip, r7
 8000e20:	4463      	add	r3, ip
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	40cb      	lsrs	r3, r1
 8000e26:	20e0      	movs	r0, #224	; 0xe0
 8000e28:	2408      	movs	r4, #8
 8000e2a:	1904      	adds	r4, r0, r4
 8000e2c:	2508      	movs	r5, #8
 8000e2e:	46ac      	mov	ip, r5
 8000e30:	44bc      	add	ip, r7
 8000e32:	4464      	add	r4, ip
 8000e34:	6023      	str	r3, [r4, #0]
 8000e36:	2308      	movs	r3, #8
 8000e38:	18c3      	adds	r3, r0, r3
 8000e3a:	2408      	movs	r4, #8
 8000e3c:	46a4      	mov	ip, r4
 8000e3e:	44bc      	add	ip, r7
 8000e40:	4463      	add	r3, ip
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	2208      	movs	r2, #8
 8000e48:	1882      	adds	r2, r0, r2
 8000e4a:	2008      	movs	r0, #8
 8000e4c:	4684      	mov	ip, r0
 8000e4e:	44bc      	add	ip, r7
 8000e50:	4462      	add	r2, ip
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	23ec      	movs	r3, #236	; 0xec
 8000e56:	2208      	movs	r2, #8
 8000e58:	189b      	adds	r3, r3, r2
 8000e5a:	2208      	movs	r2, #8
 8000e5c:	4694      	mov	ip, r2
 8000e5e:	44bc      	add	ip, r7
 8000e60:	4463      	add	r3, ip
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	40cb      	lsrs	r3, r1
 8000e66:	22e4      	movs	r2, #228	; 0xe4
 8000e68:	2108      	movs	r1, #8
 8000e6a:	1852      	adds	r2, r2, r1
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	468c      	mov	ip, r1
 8000e70:	44bc      	add	ip, r7
 8000e72:	4462      	add	r2, ip
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	2301      	movs	r3, #1
 8000e78:	22e0      	movs	r2, #224	; 0xe0
 8000e7a:	2108      	movs	r1, #8
 8000e7c:	1852      	adds	r2, r2, r1
 8000e7e:	2108      	movs	r1, #8
 8000e80:	468c      	mov	ip, r1
 8000e82:	44bc      	add	ip, r7
 8000e84:	4462      	add	r2, ip
 8000e86:	6811      	ldr	r1, [r2, #0]
 8000e88:	6852      	ldr	r2, [r2, #4]
 8000e8a:	0008      	movs	r0, r1
 8000e8c:	4018      	ands	r0, r3
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	2408      	movs	r4, #8
 8000e92:	191b      	adds	r3, r3, r4
 8000e94:	19db      	adds	r3, r3, r7
 8000e96:	6018      	str	r0, [r3, #0]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	2384      	movs	r3, #132	; 0x84
 8000e9e:	2108      	movs	r1, #8
 8000ea0:	185b      	adds	r3, r3, r1
 8000ea2:	19db      	adds	r3, r3, r7
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	20c0      	movs	r0, #192	; 0xc0
 8000ea8:	25e8      	movs	r5, #232	; 0xe8
 8000eaa:	1943      	adds	r3, r0, r5
 8000eac:	2208      	movs	r2, #8
 8000eae:	4694      	mov	ip, r2
 8000eb0:	2208      	movs	r2, #8
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	44b8      	add	r8, r7
 8000eb6:	44c4      	add	ip, r8
 8000eb8:	4463      	add	r3, ip
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2280      	movs	r2, #128	; 0x80
 8000ebe:	2108      	movs	r1, #8
 8000ec0:	1852      	adds	r2, r2, r1
 8000ec2:	19d2      	adds	r2, r2, r7
 8000ec4:	6811      	ldr	r1, [r2, #0]
 8000ec6:	6852      	ldr	r2, [r2, #4]
 8000ec8:	000c      	movs	r4, r1
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	62bc      	str	r4, [r7, #40]	; 0x28
 8000ece:	23c4      	movs	r3, #196	; 0xc4
 8000ed0:	002c      	movs	r4, r5
 8000ed2:	191b      	adds	r3, r3, r4
 8000ed4:	2508      	movs	r5, #8
 8000ed6:	46ac      	mov	ip, r5
 8000ed8:	2508      	movs	r5, #8
 8000eda:	46a8      	mov	r8, r5
 8000edc:	44b8      	add	r8, r7
 8000ede:	44c4      	add	ip, r8
 8000ee0:	4463      	add	r3, ip
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ee8:	0021      	movs	r1, r4
 8000eea:	1843      	adds	r3, r0, r1
 8000eec:	2208      	movs	r2, #8
 8000eee:	2008      	movs	r0, #8
 8000ef0:	1812      	adds	r2, r2, r0
 8000ef2:	19d2      	adds	r2, r2, r7
 8000ef4:	189a      	adds	r2, r3, r2
 8000ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef8:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	6054      	str	r4, [r2, #4]
    for (i = 0; i < 56; i++) {
 8000efe:	22ec      	movs	r2, #236	; 0xec
 8000f00:	1853      	adds	r3, r2, r1
 8000f02:	2008      	movs	r0, #8
 8000f04:	4684      	mov	ip, r0
 8000f06:	2008      	movs	r0, #8
 8000f08:	4680      	mov	r8, r0
 8000f0a:	44b8      	add	r8, r7
 8000f0c:	44c4      	add	ip, r8
 8000f0e:	4463      	add	r3, ip
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	3301      	adds	r3, #1
 8000f14:	1852      	adds	r2, r2, r1
 8000f16:	2108      	movs	r1, #8
 8000f18:	468c      	mov	ip, r1
 8000f1a:	2108      	movs	r1, #8
 8000f1c:	4688      	mov	r8, r1
 8000f1e:	44b8      	add	r8, r7
 8000f20:	44c4      	add	ip, r8
 8000f22:	4462      	add	r2, ip
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	21ec      	movs	r1, #236	; 0xec
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	25e8      	movs	r5, #232	; 0xe8
 8000f2c:	194b      	adds	r3, r1, r5
 8000f2e:	2208      	movs	r2, #8
 8000f30:	4694      	mov	ip, r2
 8000f32:	2208      	movs	r2, #8
 8000f34:	4690      	mov	r8, r2
 8000f36:	44b8      	add	r8, r7
 8000f38:	44c4      	add	ip, r8
 8000f3a:	4463      	add	r3, ip
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b37      	cmp	r3, #55	; 0x37
 8000f40:	dc00      	bgt.n	8000f44 <des_decrypt+0x584>
 8000f42:	e718      	b.n	8000d76 <des_decrypt+0x3b6>

    }
    
    C = (uint32_t) ((permuted_choice_1 >> 28) & 0x000000000fffffff);
 8000f44:	20c4      	movs	r0, #196	; 0xc4
 8000f46:	1943      	adds	r3, r0, r5
 8000f48:	2208      	movs	r2, #8
 8000f4a:	4694      	mov	ip, r2
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	4690      	mov	r8, r2
 8000f50:	44b8      	add	r8, r7
 8000f52:	44c4      	add	ip, r8
 8000f54:	4463      	add	r3, ip
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	469c      	mov	ip, r3
 8000f5c:	24c0      	movs	r4, #192	; 0xc0
 8000f5e:	1963      	adds	r3, r4, r5
 8000f60:	2208      	movs	r2, #8
 8000f62:	4690      	mov	r8, r2
 8000f64:	2208      	movs	r2, #8
 8000f66:	4691      	mov	r9, r2
 8000f68:	44b9      	add	r9, r7
 8000f6a:	44c8      	add	r8, r9
 8000f6c:	4443      	add	r3, r8
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	0f1b      	lsrs	r3, r3, #28
 8000f72:	26a8      	movs	r6, #168	; 0xa8
 8000f74:	2208      	movs	r2, #8
 8000f76:	18b2      	adds	r2, r6, r2
 8000f78:	2108      	movs	r1, #8
 8000f7a:	4688      	mov	r8, r1
 8000f7c:	44b8      	add	r8, r7
 8000f7e:	4442      	add	r2, r8
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	2308      	movs	r3, #8
 8000f84:	18f3      	adds	r3, r6, r3
 8000f86:	2208      	movs	r2, #8
 8000f88:	4690      	mov	r8, r2
 8000f8a:	44b8      	add	r8, r7
 8000f8c:	4443      	add	r3, r8
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4662      	mov	r2, ip
 8000f92:	4313      	orrs	r3, r2
 8000f94:	0032      	movs	r2, r6
 8000f96:	2608      	movs	r6, #8
 8000f98:	1996      	adds	r6, r2, r6
 8000f9a:	2108      	movs	r1, #8
 8000f9c:	468c      	mov	ip, r1
 8000f9e:	44bc      	add	ip, r7
 8000fa0:	4466      	add	r6, ip
 8000fa2:	6033      	str	r3, [r6, #0]
 8000fa4:	1943      	adds	r3, r0, r5
 8000fa6:	2008      	movs	r0, #8
 8000fa8:	4684      	mov	ip, r0
 8000faa:	2008      	movs	r0, #8
 8000fac:	4680      	mov	r8, r0
 8000fae:	44b8      	add	r8, r7
 8000fb0:	44c4      	add	ip, r8
 8000fb2:	4463      	add	r3, ip
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	0f1b      	lsrs	r3, r3, #28
 8000fb8:	20ac      	movs	r0, #172	; 0xac
 8000fba:	2608      	movs	r6, #8
 8000fbc:	1980      	adds	r0, r0, r6
 8000fbe:	2108      	movs	r1, #8
 8000fc0:	468c      	mov	ip, r1
 8000fc2:	44bc      	add	ip, r7
 8000fc4:	4460      	add	r0, ip
 8000fc6:	6003      	str	r3, [r0, #0]
 8000fc8:	2308      	movs	r3, #8
 8000fca:	18d3      	adds	r3, r2, r3
 8000fcc:	2208      	movs	r2, #8
 8000fce:	4694      	mov	ip, r2
 8000fd0:	44bc      	add	ip, r7
 8000fd2:	4463      	add	r3, ip
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	011b      	lsls	r3, r3, #4
 8000fd8:	091b      	lsrs	r3, r3, #4
 8000fda:	22e4      	movs	r2, #228	; 0xe4
 8000fdc:	1952      	adds	r2, r2, r5
 8000fde:	2008      	movs	r0, #8
 8000fe0:	4684      	mov	ip, r0
 8000fe2:	2008      	movs	r0, #8
 8000fe4:	4680      	mov	r8, r0
 8000fe6:	44b8      	add	r8, r7
 8000fe8:	44c4      	add	ip, r8
 8000fea:	4462      	add	r2, ip
 8000fec:	6013      	str	r3, [r2, #0]
    D = (uint32_t) (permuted_choice_1 & 0x000000000fffffff);
 8000fee:	1963      	adds	r3, r4, r5
 8000ff0:	2208      	movs	r2, #8
 8000ff2:	4694      	mov	ip, r2
 8000ff4:	2208      	movs	r2, #8
 8000ff6:	4690      	mov	r8, r2
 8000ff8:	44b8      	add	r8, r7
 8000ffa:	44c4      	add	ip, r8
 8000ffc:	4463      	add	r3, ip
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	011b      	lsls	r3, r3, #4
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	22e0      	movs	r2, #224	; 0xe0
 8001006:	1952      	adds	r2, r2, r5
 8001008:	2008      	movs	r0, #8
 800100a:	4684      	mov	ip, r0
 800100c:	2008      	movs	r0, #8
 800100e:	4680      	mov	r8, r0
 8001010:	44b8      	add	r8, r7
 8001012:	44c4      	add	ip, r8
 8001014:	4462      	add	r2, ip
 8001016:	6013      	str	r3, [r2, #0]
    
    /* Calculation of the 16 keys */
    for (i = 0; i< 16; i++) {
 8001018:	2300      	movs	r3, #0
 800101a:	68b9      	ldr	r1, [r7, #8]
 800101c:	194a      	adds	r2, r1, r5
 800101e:	2108      	movs	r1, #8
 8001020:	468c      	mov	ip, r1
 8001022:	2108      	movs	r1, #8
 8001024:	4688      	mov	r8, r1
 8001026:	44b8      	add	r8, r7
 8001028:	44c4      	add	ip, r8
 800102a:	4462      	add	r2, ip
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e228      	b.n	8001482 <des_decrypt+0xac2>
        
        /* key schedule */
        // shifting Ci and Di
        for (j = 0; j < iteration_shift[i]; j++) {
 8001030:	2300      	movs	r3, #0
 8001032:	22e8      	movs	r2, #232	; 0xe8
 8001034:	21e8      	movs	r1, #232	; 0xe8
 8001036:	1852      	adds	r2, r2, r1
 8001038:	2108      	movs	r1, #8
 800103a:	468c      	mov	ip, r1
 800103c:	2108      	movs	r1, #8
 800103e:	4688      	mov	r8, r1
 8001040:	44b8      	add	r8, r7
 8001042:	44c4      	add	ip, r8
 8001044:	4462      	add	r2, ip
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	e05a      	b.n	8001100 <des_decrypt+0x740>
            
            C = 0x0fffffff & (C << 1) | 0x00000001 & (C >> 27);
 800104a:	20e4      	movs	r0, #228	; 0xe4
 800104c:	24e8      	movs	r4, #232	; 0xe8
 800104e:	1903      	adds	r3, r0, r4
 8001050:	2208      	movs	r2, #8
 8001052:	4694      	mov	ip, r2
 8001054:	2208      	movs	r2, #8
 8001056:	4690      	mov	r8, r2
 8001058:	44b8      	add	r8, r7
 800105a:	44c4      	add	ip, r8
 800105c:	4463      	add	r3, ip
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	0919      	lsrs	r1, r3, #4
 8001066:	1903      	adds	r3, r0, r4
 8001068:	2208      	movs	r2, #8
 800106a:	4694      	mov	ip, r2
 800106c:	2208      	movs	r2, #8
 800106e:	4690      	mov	r8, r2
 8001070:	44b8      	add	r8, r7
 8001072:	44c4      	add	ip, r8
 8001074:	4463      	add	r3, ip
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	0eda      	lsrs	r2, r3, #27
 800107a:	2301      	movs	r3, #1
 800107c:	4013      	ands	r3, r2
 800107e:	430b      	orrs	r3, r1
 8001080:	1902      	adds	r2, r0, r4
 8001082:	2108      	movs	r1, #8
 8001084:	468c      	mov	ip, r1
 8001086:	2108      	movs	r1, #8
 8001088:	4688      	mov	r8, r1
 800108a:	44b8      	add	r8, r7
 800108c:	44c4      	add	ip, r8
 800108e:	4462      	add	r2, ip
 8001090:	6013      	str	r3, [r2, #0]
            D = 0x0fffffff & (D << 1) | 0x00000001 & (D >> 27);
 8001092:	20e0      	movs	r0, #224	; 0xe0
 8001094:	1903      	adds	r3, r0, r4
 8001096:	2208      	movs	r2, #8
 8001098:	4694      	mov	ip, r2
 800109a:	2208      	movs	r2, #8
 800109c:	4690      	mov	r8, r2
 800109e:	44b8      	add	r8, r7
 80010a0:	44c4      	add	ip, r8
 80010a2:	4463      	add	r3, ip
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	0919      	lsrs	r1, r3, #4
 80010ac:	1903      	adds	r3, r0, r4
 80010ae:	2208      	movs	r2, #8
 80010b0:	4694      	mov	ip, r2
 80010b2:	2208      	movs	r2, #8
 80010b4:	4690      	mov	r8, r2
 80010b6:	44b8      	add	r8, r7
 80010b8:	44c4      	add	ip, r8
 80010ba:	4463      	add	r3, ip
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	0eda      	lsrs	r2, r3, #27
 80010c0:	2301      	movs	r3, #1
 80010c2:	4013      	ands	r3, r2
 80010c4:	430b      	orrs	r3, r1
 80010c6:	1902      	adds	r2, r0, r4
 80010c8:	2108      	movs	r1, #8
 80010ca:	468c      	mov	ip, r1
 80010cc:	2108      	movs	r1, #8
 80010ce:	4688      	mov	r8, r1
 80010d0:	44b8      	add	r8, r7
 80010d2:	44c4      	add	ip, r8
 80010d4:	4462      	add	r2, ip
 80010d6:	6013      	str	r3, [r2, #0]
        for (j = 0; j < iteration_shift[i]; j++) {
 80010d8:	22e8      	movs	r2, #232	; 0xe8
 80010da:	1913      	adds	r3, r2, r4
 80010dc:	2108      	movs	r1, #8
 80010de:	468c      	mov	ip, r1
 80010e0:	2108      	movs	r1, #8
 80010e2:	4688      	mov	r8, r1
 80010e4:	44b8      	add	r8, r7
 80010e6:	44c4      	add	ip, r8
 80010e8:	4463      	add	r3, ip
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	1912      	adds	r2, r2, r4
 80010f0:	2108      	movs	r1, #8
 80010f2:	468c      	mov	ip, r1
 80010f4:	2108      	movs	r1, #8
 80010f6:	4688      	mov	r8, r1
 80010f8:	44b8      	add	r8, r7
 80010fa:	44c4      	add	ip, r8
 80010fc:	4462      	add	r2, ip
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4aed      	ldr	r2, [pc, #948]	; (80014b8 <des_decrypt+0xaf8>)
 8001102:	20ec      	movs	r0, #236	; 0xec
 8001104:	25e8      	movs	r5, #232	; 0xe8
 8001106:	1943      	adds	r3, r0, r5
 8001108:	2108      	movs	r1, #8
 800110a:	468c      	mov	ip, r1
 800110c:	2108      	movs	r1, #8
 800110e:	4688      	mov	r8, r1
 8001110:	44b8      	add	r8, r7
 8001112:	44c4      	add	ip, r8
 8001114:	4463      	add	r3, ip
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	18d3      	adds	r3, r2, r3
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	001a      	movs	r2, r3
 800111e:	26e8      	movs	r6, #232	; 0xe8
 8001120:	1973      	adds	r3, r6, r5
 8001122:	2108      	movs	r1, #8
 8001124:	468c      	mov	ip, r1
 8001126:	2108      	movs	r1, #8
 8001128:	4688      	mov	r8, r1
 800112a:	44b8      	add	r8, r7
 800112c:	44c4      	add	ip, r8
 800112e:	4463      	add	r3, ip
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4293      	cmp	r3, r2
 8001134:	db89      	blt.n	800104a <des_decrypt+0x68a>
            
        }
        
        permuted_choice_2 = 0;
 8001136:	2200      	movs	r2, #0
 8001138:	2300      	movs	r3, #0
 800113a:	21a0      	movs	r1, #160	; 0xa0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	194c      	adds	r4, r1, r5
 8001140:	2108      	movs	r1, #8
 8001142:	468c      	mov	ip, r1
 8001144:	2108      	movs	r1, #8
 8001146:	4688      	mov	r8, r1
 8001148:	44b8      	add	r8, r7
 800114a:	44c4      	add	ip, r8
 800114c:	4464      	add	r4, ip
 800114e:	6022      	str	r2, [r4, #0]
 8001150:	6063      	str	r3, [r4, #4]
        permuted_choice_2 = (((uint64_t) C) << 28) | (uint64_t) D ;
 8001152:	23e4      	movs	r3, #228	; 0xe4
 8001154:	195b      	adds	r3, r3, r5
 8001156:	2208      	movs	r2, #8
 8001158:	4694      	mov	ip, r2
 800115a:	2208      	movs	r2, #8
 800115c:	4690      	mov	r8, r2
 800115e:	44b8      	add	r8, r7
 8001160:	44c4      	add	ip, r8
 8001162:	4463      	add	r3, ip
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	18ba      	adds	r2, r7, r2
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	2300      	movs	r3, #0
 800116e:	2284      	movs	r2, #132	; 0x84
 8001170:	18ba      	adds	r2, r7, r2
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	685c      	ldr	r4, [r3, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	001a      	movs	r2, r3
 800117e:	0912      	lsrs	r2, r2, #4
 8001180:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001182:	071b      	lsls	r3, r3, #28
 8001184:	67bb      	str	r3, [r7, #120]	; 0x78
 8001186:	23e0      	movs	r3, #224	; 0xe0
 8001188:	195b      	adds	r3, r3, r5
 800118a:	2208      	movs	r2, #8
 800118c:	4694      	mov	ip, r2
 800118e:	2208      	movs	r2, #8
 8001190:	4690      	mov	r8, r2
 8001192:	44b8      	add	r8, r7
 8001194:	44c4      	add	ip, r8
 8001196:	4463      	add	r3, ip
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2290      	movs	r2, #144	; 0x90
 800119c:	2408      	movs	r4, #8
 800119e:	1914      	adds	r4, r2, r4
 80011a0:	2108      	movs	r1, #8
 80011a2:	468c      	mov	ip, r1
 80011a4:	44bc      	add	ip, r7
 80011a6:	4464      	add	r4, ip
 80011a8:	6023      	str	r3, [r4, #0]
 80011aa:	2300      	movs	r3, #0
 80011ac:	2494      	movs	r4, #148	; 0x94
 80011ae:	2508      	movs	r5, #8
 80011b0:	1964      	adds	r4, r4, r5
 80011b2:	2108      	movs	r1, #8
 80011b4:	468c      	mov	ip, r1
 80011b6:	44bc      	add	ip, r7
 80011b8:	4464      	add	r4, ip
 80011ba:	6023      	str	r3, [r4, #0]
 80011bc:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 80011be:	6ffd      	ldr	r5, [r7, #124]	; 0x7c
 80011c0:	0023      	movs	r3, r4
 80011c2:	2108      	movs	r1, #8
 80011c4:	1852      	adds	r2, r2, r1
 80011c6:	2108      	movs	r1, #8
 80011c8:	468c      	mov	ip, r1
 80011ca:	44bc      	add	ip, r7
 80011cc:	4462      	add	r2, ip
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	6839      	ldr	r1, [r7, #0]
 80011d4:	22e8      	movs	r2, #232	; 0xe8
 80011d6:	188a      	adds	r2, r1, r2
 80011d8:	2108      	movs	r1, #8
 80011da:	468c      	mov	ip, r1
 80011dc:	2108      	movs	r1, #8
 80011de:	4688      	mov	r8, r1
 80011e0:	44b8      	add	r8, r7
 80011e2:	44c4      	add	ip, r8
 80011e4:	4462      	add	r2, ip
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	002b      	movs	r3, r5
 80011ea:	2194      	movs	r1, #148	; 0x94
 80011ec:	2208      	movs	r2, #8
 80011ee:	188a      	adds	r2, r1, r2
 80011f0:	2108      	movs	r1, #8
 80011f2:	1879      	adds	r1, r7, r1
 80011f4:	1851      	adds	r1, r2, r1
 80011f6:	680a      	ldr	r2, [r1, #0]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	22a4      	movs	r2, #164	; 0xa4
 80011fc:	24e8      	movs	r4, #232	; 0xe8
 80011fe:	1912      	adds	r2, r2, r4
 8001200:	2108      	movs	r1, #8
 8001202:	468c      	mov	ip, r1
 8001204:	2108      	movs	r1, #8
 8001206:	4688      	mov	r8, r1
 8001208:	44b8      	add	r8, r7
 800120a:	44c4      	add	ip, r8
 800120c:	4462      	add	r2, ip
 800120e:	6013      	str	r3, [r2, #0]
        
        sub_key[i] = 0;
 8001210:	2310      	movs	r3, #16
 8001212:	191b      	adds	r3, r3, r4
 8001214:	2208      	movs	r2, #8
 8001216:	2108      	movs	r1, #8
 8001218:	1852      	adds	r2, r2, r1
 800121a:	19d2      	adds	r2, r2, r7
 800121c:	189a      	adds	r2, r3, r2
 800121e:	1903      	adds	r3, r0, r4
 8001220:	2108      	movs	r1, #8
 8001222:	468c      	mov	ip, r1
 8001224:	2108      	movs	r1, #8
 8001226:	4688      	mov	r8, r1
 8001228:	44b8      	add	r8, r7
 800122a:	44c4      	add	ip, r8
 800122c:	4463      	add	r3, ip
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	18d1      	adds	r1, r2, r3
 8001234:	2200      	movs	r2, #0
 8001236:	2300      	movs	r3, #0
 8001238:	600a      	str	r2, [r1, #0]
 800123a:	604b      	str	r3, [r1, #4]
        
        for (j = 0; j < 48; j++) {
 800123c:	2300      	movs	r3, #0
 800123e:	1932      	adds	r2, r6, r4
 8001240:	2108      	movs	r1, #8
 8001242:	468c      	mov	ip, r1
 8001244:	2108      	movs	r1, #8
 8001246:	4688      	mov	r8, r1
 8001248:	44b8      	add	r8, r7
 800124a:	44c4      	add	ip, r8
 800124c:	4462      	add	r2, ip
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	e0f5      	b.n	800143e <des_decrypt+0xa7e>
            
            sub_key[i] <<= 1;
 8001252:	2410      	movs	r4, #16
 8001254:	26e8      	movs	r6, #232	; 0xe8
 8001256:	19a3      	adds	r3, r4, r6
 8001258:	2208      	movs	r2, #8
 800125a:	2108      	movs	r1, #8
 800125c:	1852      	adds	r2, r2, r1
 800125e:	19d2      	adds	r2, r2, r7
 8001260:	189a      	adds	r2, r3, r2
 8001262:	25ec      	movs	r5, #236	; 0xec
 8001264:	19ab      	adds	r3, r5, r6
 8001266:	2108      	movs	r1, #8
 8001268:	468c      	mov	ip, r1
 800126a:	2108      	movs	r1, #8
 800126c:	4688      	mov	r8, r1
 800126e:	44b8      	add	r8, r7
 8001270:	44c4      	add	ip, r8
 8001272:	4463      	add	r3, ip
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	18d3      	adds	r3, r2, r3
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	1892      	adds	r2, r2, r2
 8001280:	415b      	adcs	r3, r3
 8001282:	0010      	movs	r0, r2
 8001284:	0019      	movs	r1, r3
 8001286:	19a3      	adds	r3, r4, r6
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	2208      	movs	r2, #8
 800128c:	2308      	movs	r3, #8
 800128e:	18d2      	adds	r2, r2, r3
 8001290:	19d2      	adds	r2, r2, r7
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	469c      	mov	ip, r3
 8001296:	4462      	add	r2, ip
 8001298:	19ab      	adds	r3, r5, r6
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	2308      	movs	r3, #8
 800129e:	469c      	mov	ip, r3
 80012a0:	2308      	movs	r3, #8
 80012a2:	4698      	mov	r8, r3
 80012a4:	44b8      	add	r8, r7
 80012a6:	44c4      	add	ip, r8
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	4463      	add	r3, ip
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	18d3      	adds	r3, r2, r3
 80012b2:	6018      	str	r0, [r3, #0]
 80012b4:	6059      	str	r1, [r3, #4]
            sub_key[i] |= (permuted_choice_2 >> (56-PC2[j])) & LB64_MASK;
 80012b6:	0030      	movs	r0, r6
 80012b8:	1823      	adds	r3, r4, r0
 80012ba:	2208      	movs	r2, #8
 80012bc:	2108      	movs	r1, #8
 80012be:	1852      	adds	r2, r2, r1
 80012c0:	19d2      	adds	r2, r2, r7
 80012c2:	189a      	adds	r2, r3, r2
 80012c4:	182b      	adds	r3, r5, r0
 80012c6:	2108      	movs	r1, #8
 80012c8:	468c      	mov	ip, r1
 80012ca:	2108      	movs	r1, #8
 80012cc:	4688      	mov	r8, r1
 80012ce:	44b8      	add	r8, r7
 80012d0:	44c4      	add	ip, r8
 80012d2:	4463      	add	r3, ip
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	18d3      	adds	r3, r2, r3
 80012da:	681c      	ldr	r4, [r3, #0]
 80012dc:	685d      	ldr	r5, [r3, #4]
 80012de:	4a77      	ldr	r2, [pc, #476]	; (80014bc <des_decrypt+0xafc>)
 80012e0:	23e8      	movs	r3, #232	; 0xe8
 80012e2:	181b      	adds	r3, r3, r0
 80012e4:	2108      	movs	r1, #8
 80012e6:	468c      	mov	ip, r1
 80012e8:	2108      	movs	r1, #8
 80012ea:	4688      	mov	r8, r1
 80012ec:	44b8      	add	r8, r7
 80012ee:	44c4      	add	ip, r8
 80012f0:	4463      	add	r3, ip
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	18d3      	adds	r3, r2, r3
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	001a      	movs	r2, r3
 80012fa:	2338      	movs	r3, #56	; 0x38
 80012fc:	1a99      	subs	r1, r3, r2
 80012fe:	000a      	movs	r2, r1
 8001300:	3a20      	subs	r2, #32
 8001302:	2a00      	cmp	r2, #0
 8001304:	db13      	blt.n	800132e <des_decrypt+0x96e>
 8001306:	23a4      	movs	r3, #164	; 0xa4
 8001308:	181b      	adds	r3, r3, r0
 800130a:	2008      	movs	r0, #8
 800130c:	4684      	mov	ip, r0
 800130e:	2008      	movs	r0, #8
 8001310:	4680      	mov	r8, r0
 8001312:	44b8      	add	r8, r7
 8001314:	44c4      	add	ip, r8
 8001316:	4463      	add	r3, ip
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	40d3      	lsrs	r3, r2
 800131c:	22d8      	movs	r2, #216	; 0xd8
 800131e:	2008      	movs	r0, #8
 8001320:	1812      	adds	r2, r2, r0
 8001322:	2008      	movs	r0, #8
 8001324:	4684      	mov	ip, r0
 8001326:	44bc      	add	ip, r7
 8001328:	4462      	add	r2, ip
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	e031      	b.n	8001392 <des_decrypt+0x9d2>
 800132e:	2320      	movs	r3, #32
 8001330:	1a5a      	subs	r2, r3, r1
 8001332:	23a4      	movs	r3, #164	; 0xa4
 8001334:	20e8      	movs	r0, #232	; 0xe8
 8001336:	181b      	adds	r3, r3, r0
 8001338:	2608      	movs	r6, #8
 800133a:	46b4      	mov	ip, r6
 800133c:	2608      	movs	r6, #8
 800133e:	46b0      	mov	r8, r6
 8001340:	44b8      	add	r8, r7
 8001342:	44c4      	add	ip, r8
 8001344:	4463      	add	r3, ip
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4093      	lsls	r3, r2
 800134a:	4699      	mov	r9, r3
 800134c:	23a0      	movs	r3, #160	; 0xa0
 800134e:	181b      	adds	r3, r3, r0
 8001350:	2008      	movs	r0, #8
 8001352:	4684      	mov	ip, r0
 8001354:	2008      	movs	r0, #8
 8001356:	4680      	mov	r8, r0
 8001358:	44b8      	add	r8, r7
 800135a:	44c4      	add	ip, r8
 800135c:	4463      	add	r3, ip
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	40cb      	lsrs	r3, r1
 8001362:	20d8      	movs	r0, #216	; 0xd8
 8001364:	2608      	movs	r6, #8
 8001366:	1986      	adds	r6, r0, r6
 8001368:	2208      	movs	r2, #8
 800136a:	4694      	mov	ip, r2
 800136c:	44bc      	add	ip, r7
 800136e:	4466      	add	r6, ip
 8001370:	6033      	str	r3, [r6, #0]
 8001372:	2308      	movs	r3, #8
 8001374:	18c3      	adds	r3, r0, r3
 8001376:	2208      	movs	r2, #8
 8001378:	4694      	mov	ip, r2
 800137a:	44bc      	add	ip, r7
 800137c:	4463      	add	r3, ip
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	464a      	mov	r2, r9
 8001382:	4313      	orrs	r3, r2
 8001384:	2208      	movs	r2, #8
 8001386:	1882      	adds	r2, r0, r2
 8001388:	2008      	movs	r0, #8
 800138a:	4684      	mov	ip, r0
 800138c:	44bc      	add	ip, r7
 800138e:	4462      	add	r2, ip
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	23a4      	movs	r3, #164	; 0xa4
 8001394:	26e8      	movs	r6, #232	; 0xe8
 8001396:	199b      	adds	r3, r3, r6
 8001398:	2208      	movs	r2, #8
 800139a:	4694      	mov	ip, r2
 800139c:	2208      	movs	r2, #8
 800139e:	4690      	mov	r8, r2
 80013a0:	44b8      	add	r8, r7
 80013a2:	44c4      	add	ip, r8
 80013a4:	4463      	add	r3, ip
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	40cb      	lsrs	r3, r1
 80013aa:	22dc      	movs	r2, #220	; 0xdc
 80013ac:	2108      	movs	r1, #8
 80013ae:	1852      	adds	r2, r2, r1
 80013b0:	2108      	movs	r1, #8
 80013b2:	468c      	mov	ip, r1
 80013b4:	44bc      	add	ip, r7
 80013b6:	4462      	add	r2, ip
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	2301      	movs	r3, #1
 80013bc:	22d8      	movs	r2, #216	; 0xd8
 80013be:	2108      	movs	r1, #8
 80013c0:	1852      	adds	r2, r2, r1
 80013c2:	2108      	movs	r1, #8
 80013c4:	468c      	mov	ip, r1
 80013c6:	44bc      	add	ip, r7
 80013c8:	4462      	add	r2, ip
 80013ca:	6811      	ldr	r1, [r2, #0]
 80013cc:	6852      	ldr	r2, [r2, #4]
 80013ce:	0008      	movs	r0, r1
 80013d0:	4018      	ands	r0, r3
 80013d2:	6738      	str	r0, [r7, #112]	; 0x70
 80013d4:	2300      	movs	r3, #0
 80013d6:	401a      	ands	r2, r3
 80013d8:	677a      	str	r2, [r7, #116]	; 0x74
 80013da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80013dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013de:	0011      	movs	r1, r2
 80013e0:	4321      	orrs	r1, r4
 80013e2:	66b9      	str	r1, [r7, #104]	; 0x68
 80013e4:	432b      	orrs	r3, r5
 80013e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80013e8:	2310      	movs	r3, #16
 80013ea:	199b      	adds	r3, r3, r6
 80013ec:	2208      	movs	r2, #8
 80013ee:	2108      	movs	r1, #8
 80013f0:	1852      	adds	r2, r2, r1
 80013f2:	19d2      	adds	r2, r2, r7
 80013f4:	189a      	adds	r2, r3, r2
 80013f6:	23ec      	movs	r3, #236	; 0xec
 80013f8:	199b      	adds	r3, r3, r6
 80013fa:	2108      	movs	r1, #8
 80013fc:	468c      	mov	ip, r1
 80013fe:	2108      	movs	r1, #8
 8001400:	4688      	mov	r8, r1
 8001402:	44b8      	add	r8, r7
 8001404:	44c4      	add	ip, r8
 8001406:	4463      	add	r3, ip
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	18d3      	adds	r3, r2, r3
 800140e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001410:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001412:	6019      	str	r1, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
        for (j = 0; j < 48; j++) {
 8001416:	22e8      	movs	r2, #232	; 0xe8
 8001418:	1993      	adds	r3, r2, r6
 800141a:	2108      	movs	r1, #8
 800141c:	468c      	mov	ip, r1
 800141e:	2108      	movs	r1, #8
 8001420:	4688      	mov	r8, r1
 8001422:	44b8      	add	r8, r7
 8001424:	44c4      	add	ip, r8
 8001426:	4463      	add	r3, ip
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	1992      	adds	r2, r2, r6
 800142e:	2108      	movs	r1, #8
 8001430:	468c      	mov	ip, r1
 8001432:	2108      	movs	r1, #8
 8001434:	4688      	mov	r8, r1
 8001436:	44b8      	add	r8, r7
 8001438:	44c4      	add	ip, r8
 800143a:	4462      	add	r2, ip
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	23e8      	movs	r3, #232	; 0xe8
 8001440:	21e8      	movs	r1, #232	; 0xe8
 8001442:	185b      	adds	r3, r3, r1
 8001444:	2208      	movs	r2, #8
 8001446:	4694      	mov	ip, r2
 8001448:	2208      	movs	r2, #8
 800144a:	4690      	mov	r8, r2
 800144c:	44b8      	add	r8, r7
 800144e:	44c4      	add	ip, r8
 8001450:	4463      	add	r3, ip
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b2f      	cmp	r3, #47	; 0x2f
 8001456:	dc00      	bgt.n	800145a <des_decrypt+0xa9a>
 8001458:	e6fb      	b.n	8001252 <des_decrypt+0x892>
    for (i = 0; i< 16; i++) {
 800145a:	22ec      	movs	r2, #236	; 0xec
 800145c:	1853      	adds	r3, r2, r1
 800145e:	2008      	movs	r0, #8
 8001460:	4684      	mov	ip, r0
 8001462:	2008      	movs	r0, #8
 8001464:	4680      	mov	r8, r0
 8001466:	44b8      	add	r8, r7
 8001468:	44c4      	add	ip, r8
 800146a:	4463      	add	r3, ip
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	1852      	adds	r2, r2, r1
 8001472:	2108      	movs	r1, #8
 8001474:	468c      	mov	ip, r1
 8001476:	2108      	movs	r1, #8
 8001478:	4688      	mov	r8, r1
 800147a:	44b8      	add	r8, r7
 800147c:	44c4      	add	ip, r8
 800147e:	4462      	add	r2, ip
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	22ec      	movs	r2, #236	; 0xec
 8001484:	21e8      	movs	r1, #232	; 0xe8
 8001486:	1853      	adds	r3, r2, r1
 8001488:	2008      	movs	r0, #8
 800148a:	4684      	mov	ip, r0
 800148c:	2008      	movs	r0, #8
 800148e:	4680      	mov	r8, r0
 8001490:	44b8      	add	r8, r7
 8001492:	44c4      	add	ip, r8
 8001494:	4463      	add	r3, ip
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	dc00      	bgt.n	800149e <des_decrypt+0xade>
 800149c:	e5c8      	b.n	8001030 <des_decrypt+0x670>
            
        }
        
    }
    
    for (i = 0; i < 16; i++) {
 800149e:	2300      	movs	r3, #0
 80014a0:	1852      	adds	r2, r2, r1
 80014a2:	2108      	movs	r1, #8
 80014a4:	468c      	mov	ip, r1
 80014a6:	2108      	movs	r1, #8
 80014a8:	4688      	mov	r8, r1
 80014aa:	44b8      	add	r8, r7
 80014ac:	44c4      	add	ip, r8
 80014ae:	4462      	add	r2, ip
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	f000 fc2b 	bl	8001d0c <des_decrypt+0x134c>
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	20000544 	.word	0x20000544
 80014bc:	20000514 	.word	0x20000514
        
        /* f(R,k) function */
        s_input = 0;
 80014c0:	2200      	movs	r2, #0
 80014c2:	2300      	movs	r3, #0
 80014c4:	21c8      	movs	r1, #200	; 0xc8
 80014c6:	20e8      	movs	r0, #232	; 0xe8
 80014c8:	1809      	adds	r1, r1, r0
 80014ca:	2408      	movs	r4, #8
 80014cc:	46a4      	mov	ip, r4
 80014ce:	2408      	movs	r4, #8
 80014d0:	46a0      	mov	r8, r4
 80014d2:	44b8      	add	r8, r7
 80014d4:	44c4      	add	ip, r8
 80014d6:	4461      	add	r1, ip
 80014d8:	600a      	str	r2, [r1, #0]
 80014da:	604b      	str	r3, [r1, #4]
        
        for (j = 0; j< 48; j++) {
 80014dc:	2300      	movs	r3, #0
 80014de:	22e8      	movs	r2, #232	; 0xe8
 80014e0:	1812      	adds	r2, r2, r0
 80014e2:	2108      	movs	r1, #8
 80014e4:	468c      	mov	ip, r1
 80014e6:	2108      	movs	r1, #8
 80014e8:	4688      	mov	r8, r1
 80014ea:	44b8      	add	r8, r7
 80014ec:	44c4      	add	ip, r8
 80014ee:	4462      	add	r2, ip
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e076      	b.n	80015e2 <des_decrypt+0xc22>
            
            s_input <<= 1;
 80014f4:	20c8      	movs	r0, #200	; 0xc8
 80014f6:	26e8      	movs	r6, #232	; 0xe8
 80014f8:	1983      	adds	r3, r0, r6
 80014fa:	2208      	movs	r2, #8
 80014fc:	4694      	mov	ip, r2
 80014fe:	2208      	movs	r2, #8
 8001500:	4690      	mov	r8, r2
 8001502:	44b8      	add	r8, r7
 8001504:	44c4      	add	ip, r8
 8001506:	4463      	add	r3, ip
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	1892      	adds	r2, r2, r2
 800150e:	415b      	adcs	r3, r3
 8001510:	1981      	adds	r1, r0, r6
 8001512:	2408      	movs	r4, #8
 8001514:	46a4      	mov	ip, r4
 8001516:	2408      	movs	r4, #8
 8001518:	46a0      	mov	r8, r4
 800151a:	44b8      	add	r8, r7
 800151c:	44c4      	add	ip, r8
 800151e:	4461      	add	r1, ip
 8001520:	600a      	str	r2, [r1, #0]
 8001522:	604b      	str	r3, [r1, #4]
            s_input |= (uint64_t) ((R >> (32-E[j])) & LB32_MASK);
 8001524:	4af0      	ldr	r2, [pc, #960]	; (80018e8 <des_decrypt+0xf28>)
 8001526:	25e8      	movs	r5, #232	; 0xe8
 8001528:	19ab      	adds	r3, r5, r6
 800152a:	2108      	movs	r1, #8
 800152c:	468c      	mov	ip, r1
 800152e:	2108      	movs	r1, #8
 8001530:	4688      	mov	r8, r1
 8001532:	44b8      	add	r8, r7
 8001534:	44c4      	add	ip, r8
 8001536:	4463      	add	r3, ip
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	18d3      	adds	r3, r2, r3
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	001a      	movs	r2, r3
 8001540:	2320      	movs	r3, #32
 8001542:	1a9a      	subs	r2, r3, r2
 8001544:	23d8      	movs	r3, #216	; 0xd8
 8001546:	199b      	adds	r3, r3, r6
 8001548:	2108      	movs	r1, #8
 800154a:	468c      	mov	ip, r1
 800154c:	2108      	movs	r1, #8
 800154e:	4688      	mov	r8, r1
 8001550:	44b8      	add	r8, r7
 8001552:	44c4      	add	ip, r8
 8001554:	4463      	add	r3, ip
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	40d3      	lsrs	r3, r2
 800155a:	663b      	str	r3, [r7, #96]	; 0x60
 800155c:	2300      	movs	r3, #0
 800155e:	667b      	str	r3, [r7, #100]	; 0x64
 8001560:	2301      	movs	r3, #1
 8001562:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001564:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001566:	000c      	movs	r4, r1
 8001568:	401c      	ands	r4, r3
 800156a:	65bc      	str	r4, [r7, #88]	; 0x58
 800156c:	2300      	movs	r3, #0
 800156e:	401a      	ands	r2, r3
 8001570:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001572:	1983      	adds	r3, r0, r6
 8001574:	2208      	movs	r2, #8
 8001576:	4694      	mov	ip, r2
 8001578:	2208      	movs	r2, #8
 800157a:	4690      	mov	r8, r2
 800157c:	44b8      	add	r8, r7
 800157e:	44c4      	add	ip, r8
 8001580:	4463      	add	r3, ip
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001586:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001588:	000c      	movs	r4, r1
 800158a:	431c      	orrs	r4, r3
 800158c:	623c      	str	r4, [r7, #32]
 800158e:	23cc      	movs	r3, #204	; 0xcc
 8001590:	199b      	adds	r3, r3, r6
 8001592:	2408      	movs	r4, #8
 8001594:	46a4      	mov	ip, r4
 8001596:	2408      	movs	r4, #8
 8001598:	46a0      	mov	r8, r4
 800159a:	44b8      	add	r8, r7
 800159c:	44c4      	add	ip, r8
 800159e:	4463      	add	r3, ip
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	431a      	orrs	r2, r3
 80015a4:	627a      	str	r2, [r7, #36]	; 0x24
 80015a6:	1983      	adds	r3, r0, r6
 80015a8:	2208      	movs	r2, #8
 80015aa:	2108      	movs	r1, #8
 80015ac:	1852      	adds	r2, r2, r1
 80015ae:	19d2      	adds	r2, r2, r7
 80015b0:	189a      	adds	r2, r3, r2
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	6054      	str	r4, [r2, #4]
        for (j = 0; j< 48; j++) {
 80015ba:	0032      	movs	r2, r6
 80015bc:	19ab      	adds	r3, r5, r6
 80015be:	2108      	movs	r1, #8
 80015c0:	468c      	mov	ip, r1
 80015c2:	2108      	movs	r1, #8
 80015c4:	4688      	mov	r8, r1
 80015c6:	44b8      	add	r8, r7
 80015c8:	44c4      	add	ip, r8
 80015ca:	4463      	add	r3, ip
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	3301      	adds	r3, #1
 80015d0:	18aa      	adds	r2, r5, r2
 80015d2:	2108      	movs	r1, #8
 80015d4:	468c      	mov	ip, r1
 80015d6:	2108      	movs	r1, #8
 80015d8:	4688      	mov	r8, r1
 80015da:	44b8      	add	r8, r7
 80015dc:	44c4      	add	ip, r8
 80015de:	4462      	add	r2, ip
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	20e8      	movs	r0, #232	; 0xe8
 80015e4:	25e8      	movs	r5, #232	; 0xe8
 80015e6:	1943      	adds	r3, r0, r5
 80015e8:	2208      	movs	r2, #8
 80015ea:	4694      	mov	ip, r2
 80015ec:	2208      	movs	r2, #8
 80015ee:	4690      	mov	r8, r2
 80015f0:	44b8      	add	r8, r7
 80015f2:	44c4      	add	ip, r8
 80015f4:	4463      	add	r3, ip
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b2f      	cmp	r3, #47	; 0x2f
 80015fa:	dc00      	bgt.n	80015fe <des_decrypt+0xc3e>
 80015fc:	e77a      	b.n	80014f4 <des_decrypt+0xb34>
        /* 
         * Encryption/Decryption 
         * XORing expanded Ri with Ki
         */

		s_input = s_input ^ sub_key[15-i];
 80015fe:	23ec      	movs	r3, #236	; 0xec
 8001600:	195b      	adds	r3, r3, r5
 8001602:	2208      	movs	r2, #8
 8001604:	4694      	mov	ip, r2
 8001606:	2208      	movs	r2, #8
 8001608:	4690      	mov	r8, r2
 800160a:	44b8      	add	r8, r7
 800160c:	44c4      	add	ip, r8
 800160e:	4463      	add	r3, ip
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	230f      	movs	r3, #15
 8001614:	1a9b      	subs	r3, r3, r2
 8001616:	2210      	movs	r2, #16
 8001618:	1952      	adds	r2, r2, r5
 800161a:	2108      	movs	r1, #8
 800161c:	468c      	mov	ip, r1
 800161e:	2108      	movs	r1, #8
 8001620:	4688      	mov	r8, r1
 8001622:	44b8      	add	r8, r7
 8001624:	44c4      	add	ip, r8
 8001626:	4462      	add	r2, ip
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	18d3      	adds	r3, r2, r3
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	24c8      	movs	r4, #200	; 0xc8
 8001632:	1961      	adds	r1, r4, r5
 8001634:	2608      	movs	r6, #8
 8001636:	46b4      	mov	ip, r6
 8001638:	2608      	movs	r6, #8
 800163a:	46b0      	mov	r8, r6
 800163c:	44b8      	add	r8, r7
 800163e:	44c4      	add	ip, r8
 8001640:	4461      	add	r1, ip
 8001642:	6809      	ldr	r1, [r1, #0]
 8001644:	4051      	eors	r1, r2
 8001646:	61b9      	str	r1, [r7, #24]
 8001648:	21cc      	movs	r1, #204	; 0xcc
 800164a:	1949      	adds	r1, r1, r5
 800164c:	2608      	movs	r6, #8
 800164e:	46b4      	mov	ip, r6
 8001650:	2608      	movs	r6, #8
 8001652:	46b0      	mov	r8, r6
 8001654:	44b8      	add	r8, r7
 8001656:	44c4      	add	ip, r8
 8001658:	4461      	add	r1, ip
 800165a:	6809      	ldr	r1, [r1, #0]
 800165c:	4059      	eors	r1, r3
 800165e:	61f9      	str	r1, [r7, #28]
 8001660:	1963      	adds	r3, r4, r5
 8001662:	2208      	movs	r2, #8
 8001664:	2108      	movs	r1, #8
 8001666:	1852      	adds	r2, r2, r1
 8001668:	19d2      	adds	r2, r2, r7
 800166a:	189a      	adds	r2, r3, r2
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	69fc      	ldr	r4, [r7, #28]
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	6054      	str	r4, [r2, #4]

        
        /* S-Box Tables */
        for (j = 0; j < 8; j++) {
 8001674:	2300      	movs	r3, #0
 8001676:	1942      	adds	r2, r0, r5
 8001678:	2108      	movs	r1, #8
 800167a:	468c      	mov	ip, r1
 800167c:	2108      	movs	r1, #8
 800167e:	4688      	mov	r8, r1
 8001680:	44b8      	add	r8, r7
 8001682:	44c4      	add	ip, r8
 8001684:	4462      	add	r2, ip
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	e25c      	b.n	8001b44 <des_decrypt+0x1184>
            // 00 00 RCCC CR00 00 00 00 00 00 s_input
            // 00 00 1000 0100 00 00 00 00 00 row mask
            // 00 00 0111 1000 00 00 00 00 00 column mask
            
            row = (char) ((s_input & (0x0000840000000000 >> 6*j)) >> 42-6*j);
 800168a:	23e8      	movs	r3, #232	; 0xe8
 800168c:	22e8      	movs	r2, #232	; 0xe8
 800168e:	189b      	adds	r3, r3, r2
 8001690:	2208      	movs	r2, #8
 8001692:	4694      	mov	ip, r2
 8001694:	2208      	movs	r2, #8
 8001696:	4690      	mov	r8, r2
 8001698:	44b8      	add	r8, r7
 800169a:	44c4      	add	ip, r8
 800169c:	4463      	add	r3, ip
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	0013      	movs	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	189b      	adds	r3, r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	0019      	movs	r1, r3
 80016aa:	000a      	movs	r2, r1
 80016ac:	3a20      	subs	r2, #32
 80016ae:	2a00      	cmp	r2, #0
 80016b0:	db0b      	blt.n	80016ca <des_decrypt+0xd0a>
 80016b2:	2384      	movs	r3, #132	; 0x84
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	4113      	asrs	r3, r2
 80016b8:	22d0      	movs	r2, #208	; 0xd0
 80016ba:	2008      	movs	r0, #8
 80016bc:	1812      	adds	r2, r2, r0
 80016be:	2008      	movs	r0, #8
 80016c0:	4684      	mov	ip, r0
 80016c2:	44bc      	add	ip, r7
 80016c4:	4462      	add	r2, ip
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	e01e      	b.n	8001708 <des_decrypt+0xd48>
 80016ca:	2320      	movs	r3, #32
 80016cc:	1a5a      	subs	r2, r3, r1
 80016ce:	2384      	movs	r3, #132	; 0x84
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	4093      	lsls	r3, r2
 80016d4:	001a      	movs	r2, r3
 80016d6:	2300      	movs	r3, #0
 80016d8:	40cb      	lsrs	r3, r1
 80016da:	20d0      	movs	r0, #208	; 0xd0
 80016dc:	2408      	movs	r4, #8
 80016de:	1904      	adds	r4, r0, r4
 80016e0:	2508      	movs	r5, #8
 80016e2:	46ac      	mov	ip, r5
 80016e4:	44bc      	add	ip, r7
 80016e6:	4464      	add	r4, ip
 80016e8:	6023      	str	r3, [r4, #0]
 80016ea:	2308      	movs	r3, #8
 80016ec:	18c3      	adds	r3, r0, r3
 80016ee:	2408      	movs	r4, #8
 80016f0:	46a4      	mov	ip, r4
 80016f2:	44bc      	add	ip, r7
 80016f4:	4463      	add	r3, ip
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	2208      	movs	r2, #8
 80016fc:	1882      	adds	r2, r0, r2
 80016fe:	2008      	movs	r0, #8
 8001700:	4684      	mov	ip, r0
 8001702:	44bc      	add	ip, r7
 8001704:	4462      	add	r2, ip
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	2384      	movs	r3, #132	; 0x84
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	410b      	asrs	r3, r1
 800170e:	22d4      	movs	r2, #212	; 0xd4
 8001710:	2108      	movs	r1, #8
 8001712:	1852      	adds	r2, r2, r1
 8001714:	2108      	movs	r1, #8
 8001716:	468c      	mov	ip, r1
 8001718:	44bc      	add	ip, r7
 800171a:	4462      	add	r2, ip
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	23d0      	movs	r3, #208	; 0xd0
 8001720:	2208      	movs	r2, #8
 8001722:	189b      	adds	r3, r3, r2
 8001724:	2208      	movs	r2, #8
 8001726:	4694      	mov	ip, r2
 8001728:	44bc      	add	ip, r7
 800172a:	4463      	add	r3, ip
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	6859      	ldr	r1, [r3, #4]
 8001730:	23c8      	movs	r3, #200	; 0xc8
 8001732:	24e8      	movs	r4, #232	; 0xe8
 8001734:	191b      	adds	r3, r3, r4
 8001736:	2208      	movs	r2, #8
 8001738:	4694      	mov	ip, r2
 800173a:	2208      	movs	r2, #8
 800173c:	4690      	mov	r8, r2
 800173e:	44b8      	add	r8, r7
 8001740:	44c4      	add	ip, r8
 8001742:	4463      	add	r3, ip
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	0003      	movs	r3, r0
 8001748:	4013      	ands	r3, r2
 800174a:	22a0      	movs	r2, #160	; 0xa0
 800174c:	2508      	movs	r5, #8
 800174e:	1952      	adds	r2, r2, r5
 8001750:	2508      	movs	r5, #8
 8001752:	46ac      	mov	ip, r5
 8001754:	44bc      	add	ip, r7
 8001756:	4462      	add	r2, ip
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	23cc      	movs	r3, #204	; 0xcc
 800175c:	191b      	adds	r3, r3, r4
 800175e:	2208      	movs	r2, #8
 8001760:	4694      	mov	ip, r2
 8001762:	2208      	movs	r2, #8
 8001764:	4690      	mov	r8, r2
 8001766:	44b8      	add	r8, r7
 8001768:	44c4      	add	ip, r8
 800176a:	4463      	add	r3, ip
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	000b      	movs	r3, r1
 8001770:	4013      	ands	r3, r2
 8001772:	21a4      	movs	r1, #164	; 0xa4
 8001774:	2208      	movs	r2, #8
 8001776:	188a      	adds	r2, r1, r2
 8001778:	2008      	movs	r0, #8
 800177a:	4684      	mov	ip, r0
 800177c:	44bc      	add	ip, r7
 800177e:	4462      	add	r2, ip
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	23e8      	movs	r3, #232	; 0xe8
 8001784:	191b      	adds	r3, r3, r4
 8001786:	2208      	movs	r2, #8
 8001788:	4694      	mov	ip, r2
 800178a:	2208      	movs	r2, #8
 800178c:	4690      	mov	r8, r2
 800178e:	44b8      	add	r8, r7
 8001790:	44c4      	add	ip, r8
 8001792:	4463      	add	r3, ip
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	001a      	movs	r2, r3
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	1ad2      	subs	r2, r2, r3
 800179c:	0053      	lsls	r3, r2, #1
 800179e:	001a      	movs	r2, r3
 80017a0:	0013      	movs	r3, r2
 80017a2:	332a      	adds	r3, #42	; 0x2a
 80017a4:	001a      	movs	r2, r3
 80017a6:	0013      	movs	r3, r2
 80017a8:	3b20      	subs	r3, #32
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	db10      	blt.n	80017d0 <des_decrypt+0xe10>
 80017ae:	2008      	movs	r0, #8
 80017b0:	1809      	adds	r1, r1, r0
 80017b2:	2008      	movs	r0, #8
 80017b4:	4684      	mov	ip, r0
 80017b6:	44bc      	add	ip, r7
 80017b8:	4461      	add	r1, ip
 80017ba:	6809      	ldr	r1, [r1, #0]
 80017bc:	40d9      	lsrs	r1, r3
 80017be:	23c8      	movs	r3, #200	; 0xc8
 80017c0:	2008      	movs	r0, #8
 80017c2:	181b      	adds	r3, r3, r0
 80017c4:	2008      	movs	r0, #8
 80017c6:	4684      	mov	ip, r0
 80017c8:	44bc      	add	ip, r7
 80017ca:	4463      	add	r3, ip
 80017cc:	6019      	str	r1, [r3, #0]
 80017ce:	e026      	b.n	800181e <des_decrypt+0xe5e>
 80017d0:	2320      	movs	r3, #32
 80017d2:	1a9b      	subs	r3, r3, r2
 80017d4:	21a0      	movs	r1, #160	; 0xa0
 80017d6:	2008      	movs	r0, #8
 80017d8:	1809      	adds	r1, r1, r0
 80017da:	2008      	movs	r0, #8
 80017dc:	4684      	mov	ip, r0
 80017de:	44bc      	add	ip, r7
 80017e0:	4461      	add	r1, ip
 80017e2:	6808      	ldr	r0, [r1, #0]
 80017e4:	6849      	ldr	r1, [r1, #4]
 80017e6:	000c      	movs	r4, r1
 80017e8:	409c      	lsls	r4, r3
 80017ea:	0023      	movs	r3, r4
 80017ec:	0001      	movs	r1, r0
 80017ee:	40d1      	lsrs	r1, r2
 80017f0:	20c8      	movs	r0, #200	; 0xc8
 80017f2:	2408      	movs	r4, #8
 80017f4:	1904      	adds	r4, r0, r4
 80017f6:	2508      	movs	r5, #8
 80017f8:	46ac      	mov	ip, r5
 80017fa:	44bc      	add	ip, r7
 80017fc:	4464      	add	r4, ip
 80017fe:	6021      	str	r1, [r4, #0]
 8001800:	2108      	movs	r1, #8
 8001802:	1841      	adds	r1, r0, r1
 8001804:	2408      	movs	r4, #8
 8001806:	46a4      	mov	ip, r4
 8001808:	44bc      	add	ip, r7
 800180a:	4461      	add	r1, ip
 800180c:	6809      	ldr	r1, [r1, #0]
 800180e:	4319      	orrs	r1, r3
 8001810:	2308      	movs	r3, #8
 8001812:	18c3      	adds	r3, r0, r3
 8001814:	2008      	movs	r0, #8
 8001816:	4684      	mov	ip, r0
 8001818:	44bc      	add	ip, r7
 800181a:	4463      	add	r3, ip
 800181c:	6019      	str	r1, [r3, #0]
 800181e:	23a4      	movs	r3, #164	; 0xa4
 8001820:	2108      	movs	r1, #8
 8001822:	185b      	adds	r3, r3, r1
 8001824:	2108      	movs	r1, #8
 8001826:	468c      	mov	ip, r1
 8001828:	44bc      	add	ip, r7
 800182a:	4463      	add	r3, ip
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	40d3      	lsrs	r3, r2
 8001830:	22cc      	movs	r2, #204	; 0xcc
 8001832:	2108      	movs	r1, #8
 8001834:	1852      	adds	r2, r2, r1
 8001836:	2108      	movs	r1, #8
 8001838:	468c      	mov	ip, r1
 800183a:	44bc      	add	ip, r7
 800183c:	4462      	add	r2, ip
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	2097      	movs	r0, #151	; 0x97
 8001842:	24e8      	movs	r4, #232	; 0xe8
 8001844:	1903      	adds	r3, r0, r4
 8001846:	2208      	movs	r2, #8
 8001848:	2108      	movs	r1, #8
 800184a:	1852      	adds	r2, r2, r1
 800184c:	19d2      	adds	r2, r2, r7
 800184e:	189a      	adds	r2, r3, r2
 8001850:	23c8      	movs	r3, #200	; 0xc8
 8001852:	2108      	movs	r1, #8
 8001854:	185b      	adds	r3, r3, r1
 8001856:	2108      	movs	r1, #8
 8001858:	468c      	mov	ip, r1
 800185a:	44bc      	add	ip, r7
 800185c:	4463      	add	r3, ip
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	7013      	strb	r3, [r2, #0]
            row = (row >> 4) | row & 0x01;
 8001862:	1903      	adds	r3, r0, r4
 8001864:	2208      	movs	r2, #8
 8001866:	4694      	mov	ip, r2
 8001868:	2208      	movs	r2, #8
 800186a:	4690      	mov	r8, r2
 800186c:	44b8      	add	r8, r7
 800186e:	44c4      	add	ip, r8
 8001870:	4463      	add	r3, ip
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	b2db      	uxtb	r3, r3
 8001878:	b259      	sxtb	r1, r3
 800187a:	1903      	adds	r3, r0, r4
 800187c:	2208      	movs	r2, #8
 800187e:	4694      	mov	ip, r2
 8001880:	2208      	movs	r2, #8
 8001882:	4690      	mov	r8, r2
 8001884:	44b8      	add	r8, r7
 8001886:	44c4      	add	ip, r8
 8001888:	4463      	add	r3, ip
 800188a:	2200      	movs	r2, #0
 800188c:	569a      	ldrsb	r2, [r3, r2]
 800188e:	2301      	movs	r3, #1
 8001890:	4013      	ands	r3, r2
 8001892:	b25b      	sxtb	r3, r3
 8001894:	430b      	orrs	r3, r1
 8001896:	b25b      	sxtb	r3, r3
 8001898:	1902      	adds	r2, r0, r4
 800189a:	2108      	movs	r1, #8
 800189c:	468c      	mov	ip, r1
 800189e:	2108      	movs	r1, #8
 80018a0:	4688      	mov	r8, r1
 80018a2:	44b8      	add	r8, r7
 80018a4:	44c4      	add	ip, r8
 80018a6:	4462      	add	r2, ip
 80018a8:	7013      	strb	r3, [r2, #0]
            
            column = (char) ((s_input & (0x0000780000000000 >> 6*j)) >> 43-6*j);
 80018aa:	23e8      	movs	r3, #232	; 0xe8
 80018ac:	191b      	adds	r3, r3, r4
 80018ae:	2208      	movs	r2, #8
 80018b0:	4694      	mov	ip, r2
 80018b2:	2208      	movs	r2, #8
 80018b4:	4690      	mov	r8, r2
 80018b6:	44b8      	add	r8, r7
 80018b8:	44c4      	add	ip, r8
 80018ba:	4463      	add	r3, ip
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	0013      	movs	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	189b      	adds	r3, r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	0019      	movs	r1, r3
 80018c8:	000a      	movs	r2, r1
 80018ca:	3a20      	subs	r2, #32
 80018cc:	2a00      	cmp	r2, #0
 80018ce:	db0d      	blt.n	80018ec <des_decrypt+0xf2c>
 80018d0:	23f0      	movs	r3, #240	; 0xf0
 80018d2:	01db      	lsls	r3, r3, #7
 80018d4:	4113      	asrs	r3, r2
 80018d6:	22c0      	movs	r2, #192	; 0xc0
 80018d8:	2008      	movs	r0, #8
 80018da:	1812      	adds	r2, r2, r0
 80018dc:	2008      	movs	r0, #8
 80018de:	4684      	mov	ip, r0
 80018e0:	44bc      	add	ip, r7
 80018e2:	4462      	add	r2, ip
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e020      	b.n	800192a <des_decrypt+0xf6a>
 80018e8:	2000028c 	.word	0x2000028c
 80018ec:	2320      	movs	r3, #32
 80018ee:	1a5a      	subs	r2, r3, r1
 80018f0:	23f0      	movs	r3, #240	; 0xf0
 80018f2:	01db      	lsls	r3, r3, #7
 80018f4:	4093      	lsls	r3, r2
 80018f6:	001a      	movs	r2, r3
 80018f8:	2300      	movs	r3, #0
 80018fa:	40cb      	lsrs	r3, r1
 80018fc:	20c0      	movs	r0, #192	; 0xc0
 80018fe:	2408      	movs	r4, #8
 8001900:	1904      	adds	r4, r0, r4
 8001902:	2508      	movs	r5, #8
 8001904:	46ac      	mov	ip, r5
 8001906:	44bc      	add	ip, r7
 8001908:	4464      	add	r4, ip
 800190a:	6023      	str	r3, [r4, #0]
 800190c:	2308      	movs	r3, #8
 800190e:	18c3      	adds	r3, r0, r3
 8001910:	2408      	movs	r4, #8
 8001912:	46a4      	mov	ip, r4
 8001914:	44bc      	add	ip, r7
 8001916:	4463      	add	r3, ip
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4313      	orrs	r3, r2
 800191c:	2208      	movs	r2, #8
 800191e:	1882      	adds	r2, r0, r2
 8001920:	2008      	movs	r0, #8
 8001922:	4684      	mov	ip, r0
 8001924:	44bc      	add	ip, r7
 8001926:	4462      	add	r2, ip
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	23f0      	movs	r3, #240	; 0xf0
 800192c:	01db      	lsls	r3, r3, #7
 800192e:	410b      	asrs	r3, r1
 8001930:	22c4      	movs	r2, #196	; 0xc4
 8001932:	2108      	movs	r1, #8
 8001934:	1852      	adds	r2, r2, r1
 8001936:	2108      	movs	r1, #8
 8001938:	468c      	mov	ip, r1
 800193a:	44bc      	add	ip, r7
 800193c:	4462      	add	r2, ip
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	23c0      	movs	r3, #192	; 0xc0
 8001942:	2208      	movs	r2, #8
 8001944:	189b      	adds	r3, r3, r2
 8001946:	2208      	movs	r2, #8
 8001948:	4694      	mov	ip, r2
 800194a:	44bc      	add	ip, r7
 800194c:	4463      	add	r3, ip
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	6859      	ldr	r1, [r3, #4]
 8001952:	23c8      	movs	r3, #200	; 0xc8
 8001954:	24e8      	movs	r4, #232	; 0xe8
 8001956:	191b      	adds	r3, r3, r4
 8001958:	2208      	movs	r2, #8
 800195a:	4694      	mov	ip, r2
 800195c:	2208      	movs	r2, #8
 800195e:	4690      	mov	r8, r2
 8001960:	44b8      	add	r8, r7
 8001962:	44c4      	add	ip, r8
 8001964:	4463      	add	r3, ip
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	0003      	movs	r3, r0
 800196a:	4013      	ands	r3, r2
 800196c:	2298      	movs	r2, #152	; 0x98
 800196e:	2508      	movs	r5, #8
 8001970:	1952      	adds	r2, r2, r5
 8001972:	2508      	movs	r5, #8
 8001974:	46ac      	mov	ip, r5
 8001976:	44bc      	add	ip, r7
 8001978:	4462      	add	r2, ip
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	23cc      	movs	r3, #204	; 0xcc
 800197e:	191b      	adds	r3, r3, r4
 8001980:	2208      	movs	r2, #8
 8001982:	4694      	mov	ip, r2
 8001984:	2208      	movs	r2, #8
 8001986:	4690      	mov	r8, r2
 8001988:	44b8      	add	r8, r7
 800198a:	44c4      	add	ip, r8
 800198c:	4463      	add	r3, ip
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	000b      	movs	r3, r1
 8001992:	4013      	ands	r3, r2
 8001994:	219c      	movs	r1, #156	; 0x9c
 8001996:	2208      	movs	r2, #8
 8001998:	188a      	adds	r2, r1, r2
 800199a:	2008      	movs	r0, #8
 800199c:	4684      	mov	ip, r0
 800199e:	44bc      	add	ip, r7
 80019a0:	4462      	add	r2, ip
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	23e8      	movs	r3, #232	; 0xe8
 80019a6:	191b      	adds	r3, r3, r4
 80019a8:	2208      	movs	r2, #8
 80019aa:	4694      	mov	ip, r2
 80019ac:	2208      	movs	r2, #8
 80019ae:	4690      	mov	r8, r2
 80019b0:	44b8      	add	r8, r7
 80019b2:	44c4      	add	ip, r8
 80019b4:	4463      	add	r3, ip
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	001a      	movs	r2, r3
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	1ad2      	subs	r2, r2, r3
 80019be:	0053      	lsls	r3, r2, #1
 80019c0:	001a      	movs	r2, r3
 80019c2:	0013      	movs	r3, r2
 80019c4:	332b      	adds	r3, #43	; 0x2b
 80019c6:	001a      	movs	r2, r3
 80019c8:	0013      	movs	r3, r2
 80019ca:	3b20      	subs	r3, #32
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db10      	blt.n	80019f2 <des_decrypt+0x1032>
 80019d0:	2008      	movs	r0, #8
 80019d2:	1809      	adds	r1, r1, r0
 80019d4:	2008      	movs	r0, #8
 80019d6:	4684      	mov	ip, r0
 80019d8:	44bc      	add	ip, r7
 80019da:	4461      	add	r1, ip
 80019dc:	6809      	ldr	r1, [r1, #0]
 80019de:	40d9      	lsrs	r1, r3
 80019e0:	23b8      	movs	r3, #184	; 0xb8
 80019e2:	2008      	movs	r0, #8
 80019e4:	181b      	adds	r3, r3, r0
 80019e6:	2008      	movs	r0, #8
 80019e8:	4684      	mov	ip, r0
 80019ea:	44bc      	add	ip, r7
 80019ec:	4463      	add	r3, ip
 80019ee:	6019      	str	r1, [r3, #0]
 80019f0:	e026      	b.n	8001a40 <des_decrypt+0x1080>
 80019f2:	2320      	movs	r3, #32
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	2198      	movs	r1, #152	; 0x98
 80019f8:	2008      	movs	r0, #8
 80019fa:	1809      	adds	r1, r1, r0
 80019fc:	2008      	movs	r0, #8
 80019fe:	4684      	mov	ip, r0
 8001a00:	44bc      	add	ip, r7
 8001a02:	4461      	add	r1, ip
 8001a04:	6808      	ldr	r0, [r1, #0]
 8001a06:	6849      	ldr	r1, [r1, #4]
 8001a08:	000c      	movs	r4, r1
 8001a0a:	409c      	lsls	r4, r3
 8001a0c:	0023      	movs	r3, r4
 8001a0e:	0001      	movs	r1, r0
 8001a10:	40d1      	lsrs	r1, r2
 8001a12:	20b8      	movs	r0, #184	; 0xb8
 8001a14:	2408      	movs	r4, #8
 8001a16:	1904      	adds	r4, r0, r4
 8001a18:	2508      	movs	r5, #8
 8001a1a:	46ac      	mov	ip, r5
 8001a1c:	44bc      	add	ip, r7
 8001a1e:	4464      	add	r4, ip
 8001a20:	6021      	str	r1, [r4, #0]
 8001a22:	2108      	movs	r1, #8
 8001a24:	1841      	adds	r1, r0, r1
 8001a26:	2408      	movs	r4, #8
 8001a28:	46a4      	mov	ip, r4
 8001a2a:	44bc      	add	ip, r7
 8001a2c:	4461      	add	r1, ip
 8001a2e:	6809      	ldr	r1, [r1, #0]
 8001a30:	4319      	orrs	r1, r3
 8001a32:	2308      	movs	r3, #8
 8001a34:	18c3      	adds	r3, r0, r3
 8001a36:	2008      	movs	r0, #8
 8001a38:	4684      	mov	ip, r0
 8001a3a:	44bc      	add	ip, r7
 8001a3c:	4463      	add	r3, ip
 8001a3e:	6019      	str	r1, [r3, #0]
 8001a40:	239c      	movs	r3, #156	; 0x9c
 8001a42:	2108      	movs	r1, #8
 8001a44:	185b      	adds	r3, r3, r1
 8001a46:	2108      	movs	r1, #8
 8001a48:	468c      	mov	ip, r1
 8001a4a:	44bc      	add	ip, r7
 8001a4c:	4463      	add	r3, ip
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	40d3      	lsrs	r3, r2
 8001a52:	22bc      	movs	r2, #188	; 0xbc
 8001a54:	2108      	movs	r1, #8
 8001a56:	1852      	adds	r2, r2, r1
 8001a58:	2108      	movs	r1, #8
 8001a5a:	468c      	mov	ip, r1
 8001a5c:	44bc      	add	ip, r7
 8001a5e:	4462      	add	r2, ip
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	2196      	movs	r1, #150	; 0x96
 8001a64:	25e8      	movs	r5, #232	; 0xe8
 8001a66:	194b      	adds	r3, r1, r5
 8001a68:	2208      	movs	r2, #8
 8001a6a:	2008      	movs	r0, #8
 8001a6c:	1812      	adds	r2, r2, r0
 8001a6e:	19d2      	adds	r2, r2, r7
 8001a70:	189a      	adds	r2, r3, r2
 8001a72:	23b8      	movs	r3, #184	; 0xb8
 8001a74:	2008      	movs	r0, #8
 8001a76:	181b      	adds	r3, r3, r0
 8001a78:	2008      	movs	r0, #8
 8001a7a:	4684      	mov	ip, r0
 8001a7c:	44bc      	add	ip, r7
 8001a7e:	4463      	add	r3, ip
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	7013      	strb	r3, [r2, #0]
            
            s_output <<= 4;
 8001a84:	20d4      	movs	r0, #212	; 0xd4
 8001a86:	1943      	adds	r3, r0, r5
 8001a88:	2208      	movs	r2, #8
 8001a8a:	4694      	mov	ip, r2
 8001a8c:	2208      	movs	r2, #8
 8001a8e:	4690      	mov	r8, r2
 8001a90:	44b8      	add	r8, r7
 8001a92:	44c4      	add	ip, r8
 8001a94:	4463      	add	r3, ip
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	1942      	adds	r2, r0, r5
 8001a9c:	2408      	movs	r4, #8
 8001a9e:	46a4      	mov	ip, r4
 8001aa0:	2408      	movs	r4, #8
 8001aa2:	46a0      	mov	r8, r4
 8001aa4:	44b8      	add	r8, r7
 8001aa6:	44c4      	add	ip, r8
 8001aa8:	4462      	add	r2, ip
 8001aaa:	6013      	str	r3, [r2, #0]
            s_output |= (uint32_t) (S[j][16*row + column] & 0x0f);
 8001aac:	2397      	movs	r3, #151	; 0x97
 8001aae:	195b      	adds	r3, r3, r5
 8001ab0:	2208      	movs	r2, #8
 8001ab2:	4694      	mov	ip, r2
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	4690      	mov	r8, r2
 8001ab8:	44b8      	add	r8, r7
 8001aba:	44c4      	add	ip, r8
 8001abc:	4463      	add	r3, ip
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	011a      	lsls	r2, r3, #4
 8001ac2:	194b      	adds	r3, r1, r5
 8001ac4:	2108      	movs	r1, #8
 8001ac6:	468c      	mov	ip, r1
 8001ac8:	2108      	movs	r1, #8
 8001aca:	4688      	mov	r8, r1
 8001acc:	44b8      	add	r8, r7
 8001ace:	44c4      	add	ip, r8
 8001ad0:	4463      	add	r3, ip
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	18d1      	adds	r1, r2, r3
 8001ad6:	4adb      	ldr	r2, [pc, #876]	; (8001e44 <des_decrypt+0x1484>)
 8001ad8:	24e8      	movs	r4, #232	; 0xe8
 8001ada:	1963      	adds	r3, r4, r5
 8001adc:	2608      	movs	r6, #8
 8001ade:	46b4      	mov	ip, r6
 8001ae0:	2608      	movs	r6, #8
 8001ae2:	46b0      	mov	r8, r6
 8001ae4:	44b8      	add	r8, r7
 8001ae6:	44c4      	add	ip, r8
 8001ae8:	4463      	add	r3, ip
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	019b      	lsls	r3, r3, #6
 8001aee:	18d3      	adds	r3, r2, r3
 8001af0:	5c5b      	ldrb	r3, [r3, r1]
 8001af2:	001a      	movs	r2, r3
 8001af4:	230f      	movs	r3, #15
 8001af6:	401a      	ands	r2, r3
 8001af8:	1943      	adds	r3, r0, r5
 8001afa:	2108      	movs	r1, #8
 8001afc:	468c      	mov	ip, r1
 8001afe:	2108      	movs	r1, #8
 8001b00:	4688      	mov	r8, r1
 8001b02:	44b8      	add	r8, r7
 8001b04:	44c4      	add	ip, r8
 8001b06:	4463      	add	r3, ip
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	1942      	adds	r2, r0, r5
 8001b0e:	2108      	movs	r1, #8
 8001b10:	468c      	mov	ip, r1
 8001b12:	2108      	movs	r1, #8
 8001b14:	4688      	mov	r8, r1
 8001b16:	44b8      	add	r8, r7
 8001b18:	44c4      	add	ip, r8
 8001b1a:	4462      	add	r2, ip
 8001b1c:	6013      	str	r3, [r2, #0]
        for (j = 0; j < 8; j++) {
 8001b1e:	1963      	adds	r3, r4, r5
 8001b20:	2208      	movs	r2, #8
 8001b22:	4694      	mov	ip, r2
 8001b24:	2208      	movs	r2, #8
 8001b26:	4690      	mov	r8, r2
 8001b28:	44b8      	add	r8, r7
 8001b2a:	44c4      	add	ip, r8
 8001b2c:	4463      	add	r3, ip
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	3301      	adds	r3, #1
 8001b32:	1962      	adds	r2, r4, r5
 8001b34:	2108      	movs	r1, #8
 8001b36:	468c      	mov	ip, r1
 8001b38:	2108      	movs	r1, #8
 8001b3a:	4688      	mov	r8, r1
 8001b3c:	44b8      	add	r8, r7
 8001b3e:	44c4      	add	ip, r8
 8001b40:	4462      	add	r2, ip
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	22e8      	movs	r2, #232	; 0xe8
 8001b46:	20e8      	movs	r0, #232	; 0xe8
 8001b48:	1813      	adds	r3, r2, r0
 8001b4a:	2108      	movs	r1, #8
 8001b4c:	468c      	mov	ip, r1
 8001b4e:	2108      	movs	r1, #8
 8001b50:	4688      	mov	r8, r1
 8001b52:	44b8      	add	r8, r7
 8001b54:	44c4      	add	ip, r8
 8001b56:	4463      	add	r3, ip
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b07      	cmp	r3, #7
 8001b5c:	dc00      	bgt.n	8001b60 <des_decrypt+0x11a0>
 8001b5e:	e594      	b.n	800168a <des_decrypt+0xcca>
            
        }
        
        f_function_res = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	21d0      	movs	r1, #208	; 0xd0
 8001b64:	1809      	adds	r1, r1, r0
 8001b66:	2408      	movs	r4, #8
 8001b68:	46a4      	mov	ip, r4
 8001b6a:	2408      	movs	r4, #8
 8001b6c:	46a0      	mov	r8, r4
 8001b6e:	44b8      	add	r8, r7
 8001b70:	44c4      	add	ip, r8
 8001b72:	4461      	add	r1, ip
 8001b74:	600b      	str	r3, [r1, #0]
        
        for (j = 0; j < 32; j++) {
 8001b76:	2300      	movs	r3, #0
 8001b78:	1812      	adds	r2, r2, r0
 8001b7a:	2108      	movs	r1, #8
 8001b7c:	468c      	mov	ip, r1
 8001b7e:	2108      	movs	r1, #8
 8001b80:	4688      	mov	r8, r1
 8001b82:	44b8      	add	r8, r7
 8001b84:	44c4      	add	ip, r8
 8001b86:	4462      	add	r2, ip
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e058      	b.n	8001c3e <des_decrypt+0x127e>
            
            f_function_res <<= 1;
 8001b8c:	21d0      	movs	r1, #208	; 0xd0
 8001b8e:	24e8      	movs	r4, #232	; 0xe8
 8001b90:	190b      	adds	r3, r1, r4
 8001b92:	2208      	movs	r2, #8
 8001b94:	4694      	mov	ip, r2
 8001b96:	2208      	movs	r2, #8
 8001b98:	4690      	mov	r8, r2
 8001b9a:	44b8      	add	r8, r7
 8001b9c:	44c4      	add	ip, r8
 8001b9e:	4463      	add	r3, ip
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	190a      	adds	r2, r1, r4
 8001ba6:	2008      	movs	r0, #8
 8001ba8:	4684      	mov	ip, r0
 8001baa:	2008      	movs	r0, #8
 8001bac:	4680      	mov	r8, r0
 8001bae:	44b8      	add	r8, r7
 8001bb0:	44c4      	add	ip, r8
 8001bb2:	4462      	add	r2, ip
 8001bb4:	6013      	str	r3, [r2, #0]
            f_function_res |= (s_output >> (32 - P[j])) & LB32_MASK;
 8001bb6:	4aa4      	ldr	r2, [pc, #656]	; (8001e48 <des_decrypt+0x1488>)
 8001bb8:	20e8      	movs	r0, #232	; 0xe8
 8001bba:	1903      	adds	r3, r0, r4
 8001bbc:	2508      	movs	r5, #8
 8001bbe:	46ac      	mov	ip, r5
 8001bc0:	2508      	movs	r5, #8
 8001bc2:	46a8      	mov	r8, r5
 8001bc4:	44b8      	add	r8, r7
 8001bc6:	44c4      	add	ip, r8
 8001bc8:	4463      	add	r3, ip
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	18d3      	adds	r3, r2, r3
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	2320      	movs	r3, #32
 8001bd4:	1a9a      	subs	r2, r3, r2
 8001bd6:	23d4      	movs	r3, #212	; 0xd4
 8001bd8:	191b      	adds	r3, r3, r4
 8001bda:	2508      	movs	r5, #8
 8001bdc:	46ac      	mov	ip, r5
 8001bde:	2508      	movs	r5, #8
 8001be0:	46a8      	mov	r8, r5
 8001be2:	44b8      	add	r8, r7
 8001be4:	44c4      	add	ip, r8
 8001be6:	4463      	add	r3, ip
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	40d3      	lsrs	r3, r2
 8001bec:	001a      	movs	r2, r3
 8001bee:	2301      	movs	r3, #1
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	190b      	adds	r3, r1, r4
 8001bf4:	2508      	movs	r5, #8
 8001bf6:	46ac      	mov	ip, r5
 8001bf8:	2508      	movs	r5, #8
 8001bfa:	46a8      	mov	r8, r5
 8001bfc:	44b8      	add	r8, r7
 8001bfe:	44c4      	add	ip, r8
 8001c00:	4463      	add	r3, ip
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	190a      	adds	r2, r1, r4
 8001c08:	2108      	movs	r1, #8
 8001c0a:	468c      	mov	ip, r1
 8001c0c:	2108      	movs	r1, #8
 8001c0e:	4688      	mov	r8, r1
 8001c10:	44b8      	add	r8, r7
 8001c12:	44c4      	add	ip, r8
 8001c14:	4462      	add	r2, ip
 8001c16:	6013      	str	r3, [r2, #0]
        for (j = 0; j < 32; j++) {
 8001c18:	1903      	adds	r3, r0, r4
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	4694      	mov	ip, r2
 8001c1e:	2208      	movs	r2, #8
 8001c20:	4690      	mov	r8, r2
 8001c22:	44b8      	add	r8, r7
 8001c24:	44c4      	add	ip, r8
 8001c26:	4463      	add	r3, ip
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	1902      	adds	r2, r0, r4
 8001c2e:	2108      	movs	r1, #8
 8001c30:	468c      	mov	ip, r1
 8001c32:	2108      	movs	r1, #8
 8001c34:	4688      	mov	r8, r1
 8001c36:	44b8      	add	r8, r7
 8001c38:	44c4      	add	ip, r8
 8001c3a:	4462      	add	r2, ip
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	23e8      	movs	r3, #232	; 0xe8
 8001c40:	22e8      	movs	r2, #232	; 0xe8
 8001c42:	189b      	adds	r3, r3, r2
 8001c44:	2108      	movs	r1, #8
 8001c46:	468c      	mov	ip, r1
 8001c48:	2108      	movs	r1, #8
 8001c4a:	4688      	mov	r8, r1
 8001c4c:	44b8      	add	r8, r7
 8001c4e:	44c4      	add	ip, r8
 8001c50:	4463      	add	r3, ip
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b1f      	cmp	r3, #31
 8001c56:	dd99      	ble.n	8001b8c <des_decrypt+0x11cc>
            
        }
        
        temp = R;
 8001c58:	21d8      	movs	r1, #216	; 0xd8
 8001c5a:	0015      	movs	r5, r2
 8001c5c:	194b      	adds	r3, r1, r5
 8001c5e:	2208      	movs	r2, #8
 8001c60:	4694      	mov	ip, r2
 8001c62:	2208      	movs	r2, #8
 8001c64:	4690      	mov	r8, r2
 8001c66:	44b8      	add	r8, r7
 8001c68:	44c4      	add	ip, r8
 8001c6a:	4463      	add	r3, ip
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	20ac      	movs	r0, #172	; 0xac
 8001c70:	1942      	adds	r2, r0, r5
 8001c72:	2408      	movs	r4, #8
 8001c74:	46a4      	mov	ip, r4
 8001c76:	2408      	movs	r4, #8
 8001c78:	46a0      	mov	r8, r4
 8001c7a:	44b8      	add	r8, r7
 8001c7c:	44c4      	add	ip, r8
 8001c7e:	4462      	add	r2, ip
 8001c80:	6013      	str	r3, [r2, #0]
        R = L ^ f_function_res;
 8001c82:	24dc      	movs	r4, #220	; 0xdc
 8001c84:	1963      	adds	r3, r4, r5
 8001c86:	2208      	movs	r2, #8
 8001c88:	4694      	mov	ip, r2
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	4690      	mov	r8, r2
 8001c8e:	44b8      	add	r8, r7
 8001c90:	44c4      	add	ip, r8
 8001c92:	4463      	add	r3, ip
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	23d0      	movs	r3, #208	; 0xd0
 8001c98:	195b      	adds	r3, r3, r5
 8001c9a:	2608      	movs	r6, #8
 8001c9c:	46b4      	mov	ip, r6
 8001c9e:	2608      	movs	r6, #8
 8001ca0:	46b0      	mov	r8, r6
 8001ca2:	44b8      	add	r8, r7
 8001ca4:	44c4      	add	ip, r8
 8001ca6:	4463      	add	r3, ip
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4053      	eors	r3, r2
 8001cac:	194a      	adds	r2, r1, r5
 8001cae:	2108      	movs	r1, #8
 8001cb0:	468c      	mov	ip, r1
 8001cb2:	2108      	movs	r1, #8
 8001cb4:	4688      	mov	r8, r1
 8001cb6:	44b8      	add	r8, r7
 8001cb8:	44c4      	add	ip, r8
 8001cba:	4462      	add	r2, ip
 8001cbc:	6013      	str	r3, [r2, #0]
        L = temp;
 8001cbe:	0029      	movs	r1, r5
 8001cc0:	1943      	adds	r3, r0, r5
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	4694      	mov	ip, r2
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	4690      	mov	r8, r2
 8001cca:	44b8      	add	r8, r7
 8001ccc:	44c4      	add	ip, r8
 8001cce:	4463      	add	r3, ip
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	1862      	adds	r2, r4, r1
 8001cd4:	2008      	movs	r0, #8
 8001cd6:	4684      	mov	ip, r0
 8001cd8:	2008      	movs	r0, #8
 8001cda:	4680      	mov	r8, r0
 8001cdc:	44b8      	add	r8, r7
 8001cde:	44c4      	add	ip, r8
 8001ce0:	4462      	add	r2, ip
 8001ce2:	6013      	str	r3, [r2, #0]
    for (i = 0; i < 16; i++) {
 8001ce4:	22ec      	movs	r2, #236	; 0xec
 8001ce6:	1853      	adds	r3, r2, r1
 8001ce8:	2008      	movs	r0, #8
 8001cea:	4684      	mov	ip, r0
 8001cec:	2008      	movs	r0, #8
 8001cee:	4680      	mov	r8, r0
 8001cf0:	44b8      	add	r8, r7
 8001cf2:	44c4      	add	ip, r8
 8001cf4:	4463      	add	r3, ip
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	1852      	adds	r2, r2, r1
 8001cfc:	2108      	movs	r1, #8
 8001cfe:	468c      	mov	ip, r1
 8001d00:	2108      	movs	r1, #8
 8001d02:	4688      	mov	r8, r1
 8001d04:	44b8      	add	r8, r7
 8001d06:	44c4      	add	ip, r8
 8001d08:	4462      	add	r2, ip
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	20ec      	movs	r0, #236	; 0xec
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	22e8      	movs	r2, #232	; 0xe8
 8001d12:	1883      	adds	r3, r0, r2
 8001d14:	2108      	movs	r1, #8
 8001d16:	468c      	mov	ip, r1
 8001d18:	2108      	movs	r1, #8
 8001d1a:	4688      	mov	r8, r1
 8001d1c:	44b8      	add	r8, r7
 8001d1e:	44c4      	add	ip, r8
 8001d20:	4463      	add	r3, ip
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b0f      	cmp	r3, #15
 8001d26:	dc01      	bgt.n	8001d2c <des_decrypt+0x136c>
 8001d28:	f7ff fbca 	bl	80014c0 <des_decrypt+0xb00>
        
    }
    
    pre_output = (((uint64_t) R) << 32) | (uint64_t) L;
 8001d2c:	23d8      	movs	r3, #216	; 0xd8
 8001d2e:	189b      	adds	r3, r3, r2
 8001d30:	2108      	movs	r1, #8
 8001d32:	468c      	mov	ip, r1
 8001d34:	2108      	movs	r1, #8
 8001d36:	4688      	mov	r8, r1
 8001d38:	44b8      	add	r8, r7
 8001d3a:	44c4      	add	ip, r8
 8001d3c:	4463      	add	r3, ip
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	653b      	str	r3, [r7, #80]	; 0x50
 8001d42:	2300      	movs	r3, #0
 8001d44:	657b      	str	r3, [r7, #84]	; 0x54
 8001d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d48:	001b      	movs	r3, r3
 8001d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d50:	23dc      	movs	r3, #220	; 0xdc
 8001d52:	0010      	movs	r0, r2
 8001d54:	189b      	adds	r3, r3, r2
 8001d56:	2208      	movs	r2, #8
 8001d58:	4694      	mov	ip, r2
 8001d5a:	2208      	movs	r2, #8
 8001d5c:	4690      	mov	r8, r2
 8001d5e:	44b8      	add	r8, r7
 8001d60:	44c4      	add	ip, r8
 8001d62:	4463      	add	r3, ip
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	643b      	str	r3, [r7, #64]	; 0x40
 8001d68:	2300      	movs	r3, #0
 8001d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d6c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8001d6e:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8001d70:	0023      	movs	r3, r4
 8001d72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001d74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d76:	000e      	movs	r6, r1
 8001d78:	4333      	orrs	r3, r6
 8001d7a:	4698      	mov	r8, r3
 8001d7c:	2698      	movs	r6, #152	; 0x98
 8001d7e:	1836      	adds	r6, r6, r0
 8001d80:	2308      	movs	r3, #8
 8001d82:	469c      	mov	ip, r3
 8001d84:	2308      	movs	r3, #8
 8001d86:	4699      	mov	r9, r3
 8001d88:	44b9      	add	r9, r7
 8001d8a:	44cc      	add	ip, r9
 8001d8c:	4466      	add	r6, ip
 8001d8e:	4643      	mov	r3, r8
 8001d90:	6033      	str	r3, [r6, #0]
 8001d92:	002b      	movs	r3, r5
 8001d94:	4313      	orrs	r3, r2
 8001d96:	229c      	movs	r2, #156	; 0x9c
 8001d98:	0001      	movs	r1, r0
 8001d9a:	1852      	adds	r2, r2, r1
 8001d9c:	2008      	movs	r0, #8
 8001d9e:	4684      	mov	ip, r0
 8001da0:	2008      	movs	r0, #8
 8001da2:	4680      	mov	r8, r0
 8001da4:	44b8      	add	r8, r7
 8001da6:	44c4      	add	ip, r8
 8001da8:	4462      	add	r2, ip
 8001daa:	6013      	str	r3, [r2, #0]
        
    /* inverse initial permutation */
    for (i = 0; i < 64; i++) {
 8001dac:	2300      	movs	r3, #0
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	1842      	adds	r2, r0, r1
 8001db2:	2108      	movs	r1, #8
 8001db4:	468c      	mov	ip, r1
 8001db6:	2108      	movs	r1, #8
 8001db8:	4688      	mov	r8, r1
 8001dba:	44b8      	add	r8, r7
 8001dbc:	44c4      	add	ip, r8
 8001dbe:	4462      	add	r2, ip
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e0d6      	b.n	8001f72 <des_decrypt+0x15b2>
        
        inv_init_perm_res <<= 1;
 8001dc4:	21b0      	movs	r1, #176	; 0xb0
 8001dc6:	20e8      	movs	r0, #232	; 0xe8
 8001dc8:	180b      	adds	r3, r1, r0
 8001dca:	2208      	movs	r2, #8
 8001dcc:	4694      	mov	ip, r2
 8001dce:	2208      	movs	r2, #8
 8001dd0:	4690      	mov	r8, r2
 8001dd2:	44b8      	add	r8, r7
 8001dd4:	44c4      	add	ip, r8
 8001dd6:	4463      	add	r3, ip
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	1892      	adds	r2, r2, r2
 8001dde:	415b      	adcs	r3, r3
 8001de0:	1809      	adds	r1, r1, r0
 8001de2:	2408      	movs	r4, #8
 8001de4:	46a4      	mov	ip, r4
 8001de6:	2408      	movs	r4, #8
 8001de8:	46a0      	mov	r8, r4
 8001dea:	44b8      	add	r8, r7
 8001dec:	44c4      	add	ip, r8
 8001dee:	4461      	add	r1, ip
 8001df0:	600a      	str	r2, [r1, #0]
 8001df2:	604b      	str	r3, [r1, #4]
        inv_init_perm_res |= (pre_output >> (64-PI[i])) & LB64_MASK;
 8001df4:	4a15      	ldr	r2, [pc, #84]	; (8001e4c <des_decrypt+0x148c>)
 8001df6:	23ec      	movs	r3, #236	; 0xec
 8001df8:	181b      	adds	r3, r3, r0
 8001dfa:	2108      	movs	r1, #8
 8001dfc:	468c      	mov	ip, r1
 8001dfe:	2108      	movs	r1, #8
 8001e00:	4688      	mov	r8, r1
 8001e02:	44b8      	add	r8, r7
 8001e04:	44c4      	add	ip, r8
 8001e06:	4463      	add	r3, ip
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	18d3      	adds	r3, r2, r3
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	001a      	movs	r2, r3
 8001e10:	2340      	movs	r3, #64	; 0x40
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	001a      	movs	r2, r3
 8001e16:	3a20      	subs	r2, #32
 8001e18:	2a00      	cmp	r2, #0
 8001e1a:	db19      	blt.n	8001e50 <des_decrypt+0x1490>
 8001e1c:	219c      	movs	r1, #156	; 0x9c
 8001e1e:	1809      	adds	r1, r1, r0
 8001e20:	2008      	movs	r0, #8
 8001e22:	4684      	mov	ip, r0
 8001e24:	2008      	movs	r0, #8
 8001e26:	4680      	mov	r8, r0
 8001e28:	44b8      	add	r8, r7
 8001e2a:	44c4      	add	ip, r8
 8001e2c:	4461      	add	r1, ip
 8001e2e:	6809      	ldr	r1, [r1, #0]
 8001e30:	40d1      	lsrs	r1, r2
 8001e32:	22b0      	movs	r2, #176	; 0xb0
 8001e34:	2008      	movs	r0, #8
 8001e36:	1812      	adds	r2, r2, r0
 8001e38:	2008      	movs	r0, #8
 8001e3a:	4684      	mov	ip, r0
 8001e3c:	44bc      	add	ip, r7
 8001e3e:	4462      	add	r2, ip
 8001e40:	6011      	str	r1, [r2, #0]
 8001e42:	e036      	b.n	8001eb2 <des_decrypt+0x14f2>
 8001e44:	200002dc 	.word	0x200002dc
 8001e48:	200002bc 	.word	0x200002bc
 8001e4c:	2000024c 	.word	0x2000024c
 8001e50:	2220      	movs	r2, #32
 8001e52:	1ad2      	subs	r2, r2, r3
 8001e54:	219c      	movs	r1, #156	; 0x9c
 8001e56:	20e8      	movs	r0, #232	; 0xe8
 8001e58:	1809      	adds	r1, r1, r0
 8001e5a:	2408      	movs	r4, #8
 8001e5c:	46a4      	mov	ip, r4
 8001e5e:	2408      	movs	r4, #8
 8001e60:	46a0      	mov	r8, r4
 8001e62:	44b8      	add	r8, r7
 8001e64:	44c4      	add	ip, r8
 8001e66:	4461      	add	r1, ip
 8001e68:	6809      	ldr	r1, [r1, #0]
 8001e6a:	4091      	lsls	r1, r2
 8001e6c:	000a      	movs	r2, r1
 8001e6e:	2198      	movs	r1, #152	; 0x98
 8001e70:	1809      	adds	r1, r1, r0
 8001e72:	2008      	movs	r0, #8
 8001e74:	4684      	mov	ip, r0
 8001e76:	2008      	movs	r0, #8
 8001e78:	4680      	mov	r8, r0
 8001e7a:	44b8      	add	r8, r7
 8001e7c:	44c4      	add	ip, r8
 8001e7e:	4461      	add	r1, ip
 8001e80:	6809      	ldr	r1, [r1, #0]
 8001e82:	40d9      	lsrs	r1, r3
 8001e84:	20b0      	movs	r0, #176	; 0xb0
 8001e86:	2408      	movs	r4, #8
 8001e88:	1904      	adds	r4, r0, r4
 8001e8a:	2508      	movs	r5, #8
 8001e8c:	46ac      	mov	ip, r5
 8001e8e:	44bc      	add	ip, r7
 8001e90:	4464      	add	r4, ip
 8001e92:	6021      	str	r1, [r4, #0]
 8001e94:	2108      	movs	r1, #8
 8001e96:	1841      	adds	r1, r0, r1
 8001e98:	2408      	movs	r4, #8
 8001e9a:	46a4      	mov	ip, r4
 8001e9c:	44bc      	add	ip, r7
 8001e9e:	4461      	add	r1, ip
 8001ea0:	6809      	ldr	r1, [r1, #0]
 8001ea2:	4311      	orrs	r1, r2
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	1882      	adds	r2, r0, r2
 8001ea8:	2008      	movs	r0, #8
 8001eaa:	4684      	mov	ip, r0
 8001eac:	44bc      	add	ip, r7
 8001eae:	4462      	add	r2, ip
 8001eb0:	6011      	str	r1, [r2, #0]
 8001eb2:	229c      	movs	r2, #156	; 0x9c
 8001eb4:	24e8      	movs	r4, #232	; 0xe8
 8001eb6:	1912      	adds	r2, r2, r4
 8001eb8:	2108      	movs	r1, #8
 8001eba:	468c      	mov	ip, r1
 8001ebc:	2108      	movs	r1, #8
 8001ebe:	4688      	mov	r8, r1
 8001ec0:	44b8      	add	r8, r7
 8001ec2:	44c4      	add	ip, r8
 8001ec4:	4462      	add	r2, ip
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	40da      	lsrs	r2, r3
 8001eca:	23b4      	movs	r3, #180	; 0xb4
 8001ecc:	2108      	movs	r1, #8
 8001ece:	185b      	adds	r3, r3, r1
 8001ed0:	2108      	movs	r1, #8
 8001ed2:	468c      	mov	ip, r1
 8001ed4:	44bc      	add	ip, r7
 8001ed6:	4463      	add	r3, ip
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	2301      	movs	r3, #1
 8001edc:	22b0      	movs	r2, #176	; 0xb0
 8001ede:	2108      	movs	r1, #8
 8001ee0:	1852      	adds	r2, r2, r1
 8001ee2:	2108      	movs	r1, #8
 8001ee4:	468c      	mov	ip, r1
 8001ee6:	44bc      	add	ip, r7
 8001ee8:	4462      	add	r2, ip
 8001eea:	6811      	ldr	r1, [r2, #0]
 8001eec:	6852      	ldr	r2, [r2, #4]
 8001eee:	0008      	movs	r0, r1
 8001ef0:	4018      	ands	r0, r3
 8001ef2:	63b8      	str	r0, [r7, #56]	; 0x38
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001efa:	20b0      	movs	r0, #176	; 0xb0
 8001efc:	0025      	movs	r5, r4
 8001efe:	1903      	adds	r3, r0, r4
 8001f00:	2208      	movs	r2, #8
 8001f02:	4694      	mov	ip, r2
 8001f04:	2208      	movs	r2, #8
 8001f06:	4690      	mov	r8, r2
 8001f08:	44b8      	add	r8, r7
 8001f0a:	44c4      	add	ip, r8
 8001f0c:	4463      	add	r3, ip
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f14:	000c      	movs	r4, r1
 8001f16:	431c      	orrs	r4, r3
 8001f18:	613c      	str	r4, [r7, #16]
 8001f1a:	23b4      	movs	r3, #180	; 0xb4
 8001f1c:	002c      	movs	r4, r5
 8001f1e:	191b      	adds	r3, r3, r4
 8001f20:	2508      	movs	r5, #8
 8001f22:	46ac      	mov	ip, r5
 8001f24:	2508      	movs	r5, #8
 8001f26:	46a8      	mov	r8, r5
 8001f28:	44b8      	add	r8, r7
 8001f2a:	44c4      	add	ip, r8
 8001f2c:	4463      	add	r3, ip
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	617a      	str	r2, [r7, #20]
 8001f34:	0021      	movs	r1, r4
 8001f36:	1843      	adds	r3, r0, r1
 8001f38:	2208      	movs	r2, #8
 8001f3a:	2008      	movs	r0, #8
 8001f3c:	1812      	adds	r2, r2, r0
 8001f3e:	19d2      	adds	r2, r2, r7
 8001f40:	189a      	adds	r2, r3, r2
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	697c      	ldr	r4, [r7, #20]
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	6054      	str	r4, [r2, #4]
    for (i = 0; i < 64; i++) {
 8001f4a:	22ec      	movs	r2, #236	; 0xec
 8001f4c:	1853      	adds	r3, r2, r1
 8001f4e:	2008      	movs	r0, #8
 8001f50:	4684      	mov	ip, r0
 8001f52:	2008      	movs	r0, #8
 8001f54:	4680      	mov	r8, r0
 8001f56:	44b8      	add	r8, r7
 8001f58:	44c4      	add	ip, r8
 8001f5a:	4463      	add	r3, ip
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	1852      	adds	r2, r2, r1
 8001f62:	2108      	movs	r1, #8
 8001f64:	468c      	mov	ip, r1
 8001f66:	2108      	movs	r1, #8
 8001f68:	4688      	mov	r8, r1
 8001f6a:	44b8      	add	r8, r7
 8001f6c:	44c4      	add	ip, r8
 8001f6e:	4462      	add	r2, ip
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	23ec      	movs	r3, #236	; 0xec
 8001f74:	22e8      	movs	r2, #232	; 0xe8
 8001f76:	189b      	adds	r3, r3, r2
 8001f78:	2108      	movs	r1, #8
 8001f7a:	468c      	mov	ip, r1
 8001f7c:	2108      	movs	r1, #8
 8001f7e:	4688      	mov	r8, r1
 8001f80:	44b8      	add	r8, r7
 8001f82:	44c4      	add	ip, r8
 8001f84:	4463      	add	r3, ip
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b3f      	cmp	r3, #63	; 0x3f
 8001f8a:	dc00      	bgt.n	8001f8e <des_decrypt+0x15ce>
 8001f8c:	e71a      	b.n	8001dc4 <des_decrypt+0x1404>
        
    }
    
    return inv_init_perm_res;
 8001f8e:	23b0      	movs	r3, #176	; 0xb0
 8001f90:	189b      	adds	r3, r3, r2
 8001f92:	2208      	movs	r2, #8
 8001f94:	4694      	mov	ip, r2
 8001f96:	2208      	movs	r2, #8
 8001f98:	4690      	mov	r8, r2
 8001f9a:	44b8      	add	r8, r7
 8001f9c:	44c4      	add	ip, r8
 8001f9e:	4463      	add	r3, ip
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
    
}
 8001fa4:	0010      	movs	r0, r2
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b07b      	add	sp, #492	; 0x1ec
 8001fac:	bcc0      	pop	{r6, r7}
 8001fae:	46b9      	mov	r9, r7
 8001fb0:	46b0      	mov	r8, r6
 8001fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb6:	b0e7      	sub	sp, #412	; 0x19c
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fba:	f000 fcd9 	bl	8002970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fbe:	f000 fb49 	bl	8002654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fc2:	f000 fbb7 	bl	8002734 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001fc6:	f000 fb85 	bl	80026d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  uint8_t roundkeys[AES_ROUND_KEY_SIZE];
  uint8_t xor_key[16] = { 0x76, 0x38, 0x79, 0x2F, 0x42, 0x3F, 0x45, 0x28, 0x48, 0x2B, 0x4B, 0x62, 0x50, 0x65, 0x53, 0x68};
 8001fca:	4bcf      	ldr	r3, [pc, #828]	; (8002308 <main+0x354>)
 8001fcc:	21ac      	movs	r1, #172	; 0xac
 8001fce:	0049      	lsls	r1, r1, #1
 8001fd0:	000c      	movs	r4, r1
 8001fd2:	185b      	adds	r3, r3, r1
 8001fd4:	2240      	movs	r2, #64	; 0x40
 8001fd6:	18ba      	adds	r2, r7, r2
 8001fd8:	189a      	adds	r2, r3, r2
 8001fda:	4bcc      	ldr	r3, [pc, #816]	; (800230c <main+0x358>)
 8001fdc:	cb43      	ldmia	r3!, {r0, r1, r6}
 8001fde:	c243      	stmia	r2!, {r0, r1, r6}
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6013      	str	r3, [r2, #0]
  uint64_t DES_key = 0x5A72347537782141;
 8001fe4:	4aca      	ldr	r2, [pc, #808]	; (8002310 <main+0x35c>)
 8001fe6:	4bcb      	ldr	r3, [pc, #812]	; (8002314 <main+0x360>)
 8001fe8:	2094      	movs	r0, #148	; 0x94
 8001fea:	0040      	lsls	r0, r0, #1
 8001fec:	2140      	movs	r1, #64	; 0x40
 8001fee:	1841      	adds	r1, r0, r1
 8001ff0:	19c8      	adds	r0, r1, r7
 8001ff2:	6002      	str	r2, [r0, #0]
 8001ff4:	6043      	str	r3, [r0, #4]
  uint8_t AES_key[16] = { 0x2F, 0x42, 0x3F, 0x45, 0x28, 0x48, 0x2B, 0x4D, 0x62, 0x51, 0x65, 0x54, 0x68, 0x57, 0x6D, 0x5A};
 8001ff6:	4bc8      	ldr	r3, [pc, #800]	; (8002318 <main+0x364>)
 8001ff8:	0021      	movs	r1, r4
 8001ffa:	185b      	adds	r3, r3, r1
 8001ffc:	2240      	movs	r2, #64	; 0x40
 8001ffe:	18ba      	adds	r2, r7, r2
 8002000:	189a      	adds	r2, r3, r2
 8002002:	4bc6      	ldr	r3, [pc, #792]	; (800231c <main+0x368>)
 8002004:	cb43      	ldmia	r3!, {r0, r1, r6}
 8002006:	c243      	stmia	r2!, {r0, r1, r6}
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	uint8_t input_array[17] = { 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800200c:	4bc4      	ldr	r3, [pc, #784]	; (8002320 <main+0x36c>)
 800200e:	20ac      	movs	r0, #172	; 0xac
 8002010:	0040      	lsls	r0, r0, #1
 8002012:	181b      	adds	r3, r3, r0
 8002014:	2240      	movs	r2, #64	; 0x40
 8002016:	18ba      	adds	r2, r7, r2
 8002018:	189a      	adds	r2, r3, r2
 800201a:	4bc2      	ldr	r3, [pc, #776]	; (8002324 <main+0x370>)
 800201c:	0011      	movs	r1, r2
 800201e:	001a      	movs	r2, r3
 8002020:	ca58      	ldmia	r2!, {r3, r4, r6}
 8002022:	c158      	stmia	r1!, {r3, r4, r6}
 8002024:	6813      	ldr	r3, [r2, #0]
 8002026:	600b      	str	r3, [r1, #0]
 8002028:	7913      	ldrb	r3, [r2, #4]
 800202a:	710b      	strb	r3, [r1, #4]
	uint8_t output_array[17] = { 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800202c:	4bbe      	ldr	r3, [pc, #760]	; (8002328 <main+0x374>)
 800202e:	181b      	adds	r3, r3, r0
 8002030:	2240      	movs	r2, #64	; 0x40
 8002032:	18ba      	adds	r2, r7, r2
 8002034:	189a      	adds	r2, r3, r2
 8002036:	4bbb      	ldr	r3, [pc, #748]	; (8002324 <main+0x370>)
 8002038:	0011      	movs	r1, r2
 800203a:	001a      	movs	r2, r3
 800203c:	ca38      	ldmia	r2!, {r3, r4, r5}
 800203e:	c138      	stmia	r1!, {r3, r4, r5}
 8002040:	6813      	ldr	r3, [r2, #0]
 8002042:	600b      	str	r3, [r1, #0]
 8002044:	7913      	ldrb	r3, [r2, #4]
 8002046:	710b      	strb	r3, [r1, #4]
	uint8_t ciphertext [16] = {0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8002048:	4bb8      	ldr	r3, [pc, #736]	; (800232c <main+0x378>)
 800204a:	181b      	adds	r3, r3, r0
 800204c:	2240      	movs	r2, #64	; 0x40
 800204e:	18ba      	adds	r2, r7, r2
 8002050:	189a      	adds	r2, r3, r2
 8002052:	4bb7      	ldr	r3, [pc, #732]	; (8002330 <main+0x37c>)
 8002054:	cb32      	ldmia	r3!, {r1, r4, r5}
 8002056:	c232      	stmia	r2!, {r1, r4, r5}
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6013      	str	r3, [r2, #0]
	uint8_t plaintext[16] ={0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800205c:	4bb5      	ldr	r3, [pc, #724]	; (8002334 <main+0x380>)
 800205e:	181b      	adds	r3, r3, r0
 8002060:	2240      	movs	r2, #64	; 0x40
 8002062:	18ba      	adds	r2, r7, r2
 8002064:	189a      	adds	r2, r3, r2
 8002066:	4bb2      	ldr	r3, [pc, #712]	; (8002330 <main+0x37c>)
 8002068:	cb13      	ldmia	r3!, {r0, r1, r4}
 800206a:	c213      	stmia	r2!, {r0, r1, r4}
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6013      	str	r3, [r2, #0]

	uint64_t des_in1 = 0;
 8002070:	2200      	movs	r2, #0
 8002072:	2300      	movs	r3, #0
 8002074:	21a8      	movs	r1, #168	; 0xa8
 8002076:	0049      	lsls	r1, r1, #1
 8002078:	2040      	movs	r0, #64	; 0x40
 800207a:	1809      	adds	r1, r1, r0
 800207c:	19c9      	adds	r1, r1, r7
 800207e:	600a      	str	r2, [r1, #0]
 8002080:	604b      	str	r3, [r1, #4]
	uint64_t des_in2 = 0;
 8002082:	2200      	movs	r2, #0
 8002084:	2300      	movs	r3, #0
 8002086:	21a4      	movs	r1, #164	; 0xa4
 8002088:	0049      	lsls	r1, r1, #1
 800208a:	2040      	movs	r0, #64	; 0x40
 800208c:	1809      	adds	r1, r1, r0
 800208e:	19c9      	adds	r1, r1, r7
 8002090:	600a      	str	r2, [r1, #0]
 8002092:	604b      	str	r3, [r1, #4]
	uint64_t des_out1 = 0;
 8002094:	2200      	movs	r2, #0
 8002096:	2300      	movs	r3, #0
 8002098:	2190      	movs	r1, #144	; 0x90
 800209a:	0049      	lsls	r1, r1, #1
 800209c:	2040      	movs	r0, #64	; 0x40
 800209e:	1809      	adds	r1, r1, r0
 80020a0:	19c9      	adds	r1, r1, r7
 80020a2:	600a      	str	r2, [r1, #0]
 80020a4:	604b      	str	r3, [r1, #4]
	uint64_t des_out2 = 0;
 80020a6:	2200      	movs	r2, #0
 80020a8:	2300      	movs	r3, #0
 80020aa:	218c      	movs	r1, #140	; 0x8c
 80020ac:	0049      	lsls	r1, r1, #1
 80020ae:	2040      	movs	r0, #64	; 0x40
 80020b0:	1809      	adds	r1, r1, r0
 80020b2:	19c9      	adds	r1, r1, r7
 80020b4:	600a      	str	r2, [r1, #0]
 80020b6:	604b      	str	r3, [r1, #4]



	  HAL_UART_Receive(&huart2, input_array, 17, HAL_MAX_DELAY);
 80020b8:	2301      	movs	r3, #1
 80020ba:	425b      	negs	r3, r3
 80020bc:	2234      	movs	r2, #52	; 0x34
 80020be:	2140      	movs	r1, #64	; 0x40
 80020c0:	1852      	adds	r2, r2, r1
 80020c2:	19d1      	adds	r1, r2, r7
 80020c4:	489c      	ldr	r0, [pc, #624]	; (8002338 <main+0x384>)
 80020c6:	2211      	movs	r2, #17
 80020c8:	f001 fcb8 	bl	8003a3c <HAL_UART_Receive>

	  for(int i = 0; i<16; i++){
 80020cc:	2300      	movs	r3, #0
 80020ce:	22a2      	movs	r2, #162	; 0xa2
 80020d0:	0052      	lsls	r2, r2, #1
 80020d2:	2140      	movs	r1, #64	; 0x40
 80020d4:	1852      	adds	r2, r2, r1
 80020d6:	19d2      	adds	r2, r2, r7
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e024      	b.n	8002126 <main+0x172>
		  ciphertext[i] = input_array[i+1];
 80020dc:	20a2      	movs	r0, #162	; 0xa2
 80020de:	0040      	lsls	r0, r0, #1
 80020e0:	2340      	movs	r3, #64	; 0x40
 80020e2:	18c3      	adds	r3, r0, r3
 80020e4:	19db      	adds	r3, r3, r7
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	4b8d      	ldr	r3, [pc, #564]	; (8002320 <main+0x36c>)
 80020ec:	26ac      	movs	r6, #172	; 0xac
 80020ee:	0076      	lsls	r6, r6, #1
 80020f0:	199b      	adds	r3, r3, r6
 80020f2:	2140      	movs	r1, #64	; 0x40
 80020f4:	468c      	mov	ip, r1
 80020f6:	44bc      	add	ip, r7
 80020f8:	4463      	add	r3, ip
 80020fa:	5c99      	ldrb	r1, [r3, r2]
 80020fc:	4b8b      	ldr	r3, [pc, #556]	; (800232c <main+0x378>)
 80020fe:	199b      	adds	r3, r3, r6
 8002100:	2240      	movs	r2, #64	; 0x40
 8002102:	18ba      	adds	r2, r7, r2
 8002104:	189a      	adds	r2, r3, r2
 8002106:	2340      	movs	r3, #64	; 0x40
 8002108:	18c3      	adds	r3, r0, r3
 800210a:	19db      	adds	r3, r3, r7
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	18d2      	adds	r2, r2, r3
 8002110:	1c0b      	adds	r3, r1, #0
 8002112:	7013      	strb	r3, [r2, #0]
	  for(int i = 0; i<16; i++){
 8002114:	2340      	movs	r3, #64	; 0x40
 8002116:	18c3      	adds	r3, r0, r3
 8002118:	19db      	adds	r3, r3, r7
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	3301      	adds	r3, #1
 800211e:	2240      	movs	r2, #64	; 0x40
 8002120:	1882      	adds	r2, r0, r2
 8002122:	19d2      	adds	r2, r2, r7
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	23a2      	movs	r3, #162	; 0xa2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2240      	movs	r2, #64	; 0x40
 800212c:	189b      	adds	r3, r3, r2
 800212e:	19db      	adds	r3, r3, r7
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b0f      	cmp	r3, #15
 8002134:	ddd2      	ble.n	80020dc <main+0x128>
	  }


	  switch (input_array[0]){
 8002136:	4b7a      	ldr	r3, [pc, #488]	; (8002320 <main+0x36c>)
 8002138:	22ac      	movs	r2, #172	; 0xac
 800213a:	0052      	lsls	r2, r2, #1
 800213c:	189b      	adds	r3, r3, r2
 800213e:	2240      	movs	r2, #64	; 0x40
 8002140:	4694      	mov	ip, r2
 8002142:	44bc      	add	ip, r7
 8002144:	4463      	add	r3, ip
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b40      	cmp	r3, #64	; 0x40
 800214a:	d100      	bne.n	800214e <main+0x19a>
 800214c:	e205      	b.n	800255a <main+0x5a6>
 800214e:	dd00      	ble.n	8002152 <main+0x19e>
 8002150:	e21c      	b.n	800258c <main+0x5d8>
 8002152:	2b30      	cmp	r3, #48	; 0x30
 8002154:	d04a      	beq.n	80021ec <main+0x238>
 8002156:	dd00      	ble.n	800215a <main+0x1a6>
 8002158:	e218      	b.n	800258c <main+0x5d8>
 800215a:	2b10      	cmp	r3, #16
 800215c:	d002      	beq.n	8002164 <main+0x1b0>
 800215e:	2b20      	cmp	r3, #32
 8002160:	d036      	beq.n	80021d0 <main+0x21c>
 8002162:	e213      	b.n	800258c <main+0x5d8>
	  	  case 0x10:
			  for(int i = 0; i<16; i++){
 8002164:	2300      	movs	r3, #0
 8002166:	22a0      	movs	r2, #160	; 0xa0
 8002168:	0052      	lsls	r2, r2, #1
 800216a:	2140      	movs	r1, #64	; 0x40
 800216c:	1852      	adds	r2, r2, r1
 800216e:	19d2      	adds	r2, r2, r7
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e024      	b.n	80021be <main+0x20a>
				  plaintext[i] = input_array[i+1];
 8002174:	20a0      	movs	r0, #160	; 0xa0
 8002176:	0040      	lsls	r0, r0, #1
 8002178:	2340      	movs	r3, #64	; 0x40
 800217a:	18c3      	adds	r3, r0, r3
 800217c:	19db      	adds	r3, r3, r7
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	4b67      	ldr	r3, [pc, #412]	; (8002320 <main+0x36c>)
 8002184:	26ac      	movs	r6, #172	; 0xac
 8002186:	0076      	lsls	r6, r6, #1
 8002188:	199b      	adds	r3, r3, r6
 800218a:	2140      	movs	r1, #64	; 0x40
 800218c:	468c      	mov	ip, r1
 800218e:	44bc      	add	ip, r7
 8002190:	4463      	add	r3, ip
 8002192:	5c99      	ldrb	r1, [r3, r2]
 8002194:	4b67      	ldr	r3, [pc, #412]	; (8002334 <main+0x380>)
 8002196:	199b      	adds	r3, r3, r6
 8002198:	2240      	movs	r2, #64	; 0x40
 800219a:	18ba      	adds	r2, r7, r2
 800219c:	189a      	adds	r2, r3, r2
 800219e:	2340      	movs	r3, #64	; 0x40
 80021a0:	18c3      	adds	r3, r0, r3
 80021a2:	19db      	adds	r3, r3, r7
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	18d2      	adds	r2, r2, r3
 80021a8:	1c0b      	adds	r3, r1, #0
 80021aa:	7013      	strb	r3, [r2, #0]
			  for(int i = 0; i<16; i++){
 80021ac:	2340      	movs	r3, #64	; 0x40
 80021ae:	18c3      	adds	r3, r0, r3
 80021b0:	19db      	adds	r3, r3, r7
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	3301      	adds	r3, #1
 80021b6:	2240      	movs	r2, #64	; 0x40
 80021b8:	1882      	adds	r2, r0, r2
 80021ba:	19d2      	adds	r2, r2, r7
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	23a0      	movs	r3, #160	; 0xa0
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2240      	movs	r2, #64	; 0x40
 80021c4:	189b      	adds	r3, r3, r2
 80021c6:	19db      	adds	r3, r3, r7
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b0f      	cmp	r3, #15
 80021cc:	ddd2      	ble.n	8002174 <main+0x1c0>
			  }
	  		  break;
 80021ce:	e1dd      	b.n	800258c <main+0x5d8>
	  	  case 0x20:
	  		  do_xor(ciphertext, xor_key, plaintext);
 80021d0:	2340      	movs	r3, #64	; 0x40
 80021d2:	18fa      	adds	r2, r7, r3
 80021d4:	2358      	movs	r3, #88	; 0x58
 80021d6:	2140      	movs	r1, #64	; 0x40
 80021d8:	185b      	adds	r3, r3, r1
 80021da:	19d9      	adds	r1, r3, r7
 80021dc:	2310      	movs	r3, #16
 80021de:	2040      	movs	r0, #64	; 0x40
 80021e0:	181b      	adds	r3, r3, r0
 80021e2:	19db      	adds	r3, r3, r7
 80021e4:	0018      	movs	r0, r3
 80021e6:	f000 fb5f 	bl	80028a8 <do_xor>
	  	  break;
 80021ea:	e1cf      	b.n	800258c <main+0x5d8>

	  	  case 0x30:
	  		// First input handles bytes 0-7 (LSBytes)
			for(int i = 0; i < 8; i++) des_in1 |= ((uint64_t)ciphertext[15-i] << (i*8));
 80021ec:	2300      	movs	r3, #0
 80021ee:	229e      	movs	r2, #158	; 0x9e
 80021f0:	0052      	lsls	r2, r2, #1
 80021f2:	2140      	movs	r1, #64	; 0x40
 80021f4:	1852      	adds	r2, r2, r1
 80021f6:	19d2      	adds	r2, r2, r7
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e054      	b.n	80022a6 <main+0x2f2>
 80021fc:	219e      	movs	r1, #158	; 0x9e
 80021fe:	0049      	lsls	r1, r1, #1
 8002200:	2340      	movs	r3, #64	; 0x40
 8002202:	18cb      	adds	r3, r1, r3
 8002204:	19db      	adds	r3, r3, r7
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	230f      	movs	r3, #15
 800220a:	1a9a      	subs	r2, r3, r2
 800220c:	4b47      	ldr	r3, [pc, #284]	; (800232c <main+0x378>)
 800220e:	20ac      	movs	r0, #172	; 0xac
 8002210:	0040      	lsls	r0, r0, #1
 8002212:	181b      	adds	r3, r3, r0
 8002214:	2040      	movs	r0, #64	; 0x40
 8002216:	4684      	mov	ip, r0
 8002218:	44bc      	add	ip, r7
 800221a:	4463      	add	r3, ip
 800221c:	5c9b      	ldrb	r3, [r3, r2]
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
 8002224:	2340      	movs	r3, #64	; 0x40
 8002226:	18cb      	adds	r3, r1, r3
 8002228:	19db      	adds	r3, r3, r7
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	00da      	lsls	r2, r3, #3
 800222e:	0013      	movs	r3, r2
 8002230:	3b20      	subs	r3, #32
 8002232:	2b00      	cmp	r3, #0
 8002234:	db03      	blt.n	800223e <main+0x28a>
 8002236:	69b9      	ldr	r1, [r7, #24]
 8002238:	4099      	lsls	r1, r3
 800223a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800223c:	e00b      	b.n	8002256 <main+0x2a2>
 800223e:	2320      	movs	r3, #32
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	69b8      	ldr	r0, [r7, #24]
 8002244:	69f9      	ldr	r1, [r7, #28]
 8002246:	0006      	movs	r6, r0
 8002248:	40de      	lsrs	r6, r3
 800224a:	0033      	movs	r3, r6
 800224c:	4091      	lsls	r1, r2
 800224e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002250:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002252:	4319      	orrs	r1, r3
 8002254:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	4093      	lsls	r3, r2
 800225a:	63bb      	str	r3, [r7, #56]	; 0x38
 800225c:	22a8      	movs	r2, #168	; 0xa8
 800225e:	0052      	lsls	r2, r2, #1
 8002260:	2340      	movs	r3, #64	; 0x40
 8002262:	18d3      	adds	r3, r2, r3
 8002264:	19db      	adds	r3, r3, r7
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800226a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800226c:	0004      	movs	r4, r0
 800226e:	4323      	orrs	r3, r4
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	23aa      	movs	r3, #170	; 0xaa
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2440      	movs	r4, #64	; 0x40
 8002278:	191b      	adds	r3, r3, r4
 800227a:	19db      	adds	r3, r3, r7
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430b      	orrs	r3, r1
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	2340      	movs	r3, #64	; 0x40
 8002284:	18d3      	adds	r3, r2, r3
 8002286:	19d9      	adds	r1, r3, r7
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	600a      	str	r2, [r1, #0]
 800228e:	604b      	str	r3, [r1, #4]
 8002290:	229e      	movs	r2, #158	; 0x9e
 8002292:	0052      	lsls	r2, r2, #1
 8002294:	2340      	movs	r3, #64	; 0x40
 8002296:	18d3      	adds	r3, r2, r3
 8002298:	19db      	adds	r3, r3, r7
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	2140      	movs	r1, #64	; 0x40
 80022a0:	1852      	adds	r2, r2, r1
 80022a2:	19d2      	adds	r2, r2, r7
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	239e      	movs	r3, #158	; 0x9e
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2240      	movs	r2, #64	; 0x40
 80022ac:	189b      	adds	r3, r3, r2
 80022ae:	19db      	adds	r3, r3, r7
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b07      	cmp	r3, #7
 80022b4:	dda2      	ble.n	80021fc <main+0x248>

			// First input handles bytes 8-15 (MSBytes)
			for(int i = 0; i < 8; i++) des_in2 |= ((uint64_t)ciphertext[7-i] << (i*8));
 80022b6:	2300      	movs	r3, #0
 80022b8:	229c      	movs	r2, #156	; 0x9c
 80022ba:	0052      	lsls	r2, r2, #1
 80022bc:	2140      	movs	r1, #64	; 0x40
 80022be:	1852      	adds	r2, r2, r1
 80022c0:	19d2      	adds	r2, r2, r7
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	e06e      	b.n	80023a4 <main+0x3f0>
 80022c6:	219c      	movs	r1, #156	; 0x9c
 80022c8:	0049      	lsls	r1, r1, #1
 80022ca:	2340      	movs	r3, #64	; 0x40
 80022cc:	18cb      	adds	r3, r1, r3
 80022ce:	19db      	adds	r3, r3, r7
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	2307      	movs	r3, #7
 80022d4:	1a9a      	subs	r2, r3, r2
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <main+0x378>)
 80022d8:	20ac      	movs	r0, #172	; 0xac
 80022da:	0040      	lsls	r0, r0, #1
 80022dc:	181b      	adds	r3, r3, r0
 80022de:	2040      	movs	r0, #64	; 0x40
 80022e0:	4684      	mov	ip, r0
 80022e2:	44bc      	add	ip, r7
 80022e4:	4463      	add	r3, ip
 80022e6:	5c9b      	ldrb	r3, [r3, r2]
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	2340      	movs	r3, #64	; 0x40
 80022f0:	18cb      	adds	r3, r1, r3
 80022f2:	19db      	adds	r3, r3, r7
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	00da      	lsls	r2, r3, #3
 80022f8:	0013      	movs	r3, r2
 80022fa:	3b20      	subs	r3, #32
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	db1d      	blt.n	800233c <main+0x388>
 8002300:	6939      	ldr	r1, [r7, #16]
 8002302:	4099      	lsls	r1, r3
 8002304:	6379      	str	r1, [r7, #52]	; 0x34
 8002306:	e025      	b.n	8002354 <main+0x3a0>
 8002308:	ffffff00 	.word	0xffffff00
 800230c:	08004350 	.word	0x08004350
 8002310:	37782141 	.word	0x37782141
 8002314:	5a723475 	.word	0x5a723475
 8002318:	fffffef0 	.word	0xfffffef0
 800231c:	08004360 	.word	0x08004360
 8002320:	fffffedc 	.word	0xfffffedc
 8002324:	08004370 	.word	0x08004370
 8002328:	fffffec8 	.word	0xfffffec8
 800232c:	fffffeb8 	.word	0xfffffeb8
 8002330:	08004384 	.word	0x08004384
 8002334:	fffffea8 	.word	0xfffffea8
 8002338:	2000057c 	.word	0x2000057c
 800233c:	2320      	movs	r3, #32
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	6938      	ldr	r0, [r7, #16]
 8002342:	6979      	ldr	r1, [r7, #20]
 8002344:	0006      	movs	r6, r0
 8002346:	40de      	lsrs	r6, r3
 8002348:	0033      	movs	r3, r6
 800234a:	4091      	lsls	r1, r2
 800234c:	6379      	str	r1, [r7, #52]	; 0x34
 800234e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002350:	4319      	orrs	r1, r3
 8002352:	6379      	str	r1, [r7, #52]	; 0x34
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4093      	lsls	r3, r2
 8002358:	633b      	str	r3, [r7, #48]	; 0x30
 800235a:	20a4      	movs	r0, #164	; 0xa4
 800235c:	0040      	lsls	r0, r0, #1
 800235e:	2340      	movs	r3, #64	; 0x40
 8002360:	18c3      	adds	r3, r0, r3
 8002362:	19db      	adds	r3, r3, r7
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800236a:	000e      	movs	r6, r1
 800236c:	431e      	orrs	r6, r3
 800236e:	603e      	str	r6, [r7, #0]
 8002370:	23a6      	movs	r3, #166	; 0xa6
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	2440      	movs	r4, #64	; 0x40
 8002376:	191b      	adds	r3, r3, r4
 8002378:	19db      	adds	r3, r3, r7
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	431a      	orrs	r2, r3
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	2340      	movs	r3, #64	; 0x40
 8002382:	18c3      	adds	r3, r0, r3
 8002384:	19d9      	adds	r1, r3, r7
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	600a      	str	r2, [r1, #0]
 800238c:	604b      	str	r3, [r1, #4]
 800238e:	229c      	movs	r2, #156	; 0x9c
 8002390:	0052      	lsls	r2, r2, #1
 8002392:	2340      	movs	r3, #64	; 0x40
 8002394:	18d3      	adds	r3, r2, r3
 8002396:	19db      	adds	r3, r3, r7
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	3301      	adds	r3, #1
 800239c:	2140      	movs	r1, #64	; 0x40
 800239e:	1852      	adds	r2, r2, r1
 80023a0:	19d2      	adds	r2, r2, r7
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	239c      	movs	r3, #156	; 0x9c
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	2240      	movs	r2, #64	; 0x40
 80023aa:	189b      	adds	r3, r3, r2
 80023ac:	19db      	adds	r3, r3, r7
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b07      	cmp	r3, #7
 80023b2:	dd88      	ble.n	80022c6 <main+0x312>

			des_out1 = des_decrypt(des_in1, DES_key);
 80023b4:	2694      	movs	r6, #148	; 0x94
 80023b6:	0076      	lsls	r6, r6, #1
 80023b8:	2340      	movs	r3, #64	; 0x40
 80023ba:	18f3      	adds	r3, r6, r3
 80023bc:	19db      	adds	r3, r3, r7
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	21a8      	movs	r1, #168	; 0xa8
 80023c4:	0049      	lsls	r1, r1, #1
 80023c6:	2040      	movs	r0, #64	; 0x40
 80023c8:	1809      	adds	r1, r1, r0
 80023ca:	19c9      	adds	r1, r1, r7
 80023cc:	6808      	ldr	r0, [r1, #0]
 80023ce:	6849      	ldr	r1, [r1, #4]
 80023d0:	f7fe faf6 	bl	80009c0 <des_decrypt>
 80023d4:	0002      	movs	r2, r0
 80023d6:	000b      	movs	r3, r1
 80023d8:	2190      	movs	r1, #144	; 0x90
 80023da:	0049      	lsls	r1, r1, #1
 80023dc:	2040      	movs	r0, #64	; 0x40
 80023de:	1809      	adds	r1, r1, r0
 80023e0:	19c9      	adds	r1, r1, r7
 80023e2:	600a      	str	r2, [r1, #0]
 80023e4:	604b      	str	r3, [r1, #4]
			des_out2 = des_decrypt(des_in2, DES_key);
 80023e6:	2340      	movs	r3, #64	; 0x40
 80023e8:	18f3      	adds	r3, r6, r3
 80023ea:	19db      	adds	r3, r3, r7
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	21a4      	movs	r1, #164	; 0xa4
 80023f2:	0049      	lsls	r1, r1, #1
 80023f4:	2040      	movs	r0, #64	; 0x40
 80023f6:	1809      	adds	r1, r1, r0
 80023f8:	19c9      	adds	r1, r1, r7
 80023fa:	6808      	ldr	r0, [r1, #0]
 80023fc:	6849      	ldr	r1, [r1, #4]
 80023fe:	f7fe fadf 	bl	80009c0 <des_decrypt>
 8002402:	0002      	movs	r2, r0
 8002404:	000b      	movs	r3, r1
 8002406:	218c      	movs	r1, #140	; 0x8c
 8002408:	0049      	lsls	r1, r1, #1
 800240a:	2040      	movs	r0, #64	; 0x40
 800240c:	1809      	adds	r1, r1, r0
 800240e:	19c9      	adds	r1, r1, r7
 8002410:	600a      	str	r2, [r1, #0]
 8002412:	604b      	str	r3, [r1, #4]

			for(int i = 0; i < 8; i ++){
 8002414:	2300      	movs	r3, #0
 8002416:	229a      	movs	r2, #154	; 0x9a
 8002418:	0052      	lsls	r2, r2, #1
 800241a:	2140      	movs	r1, #64	; 0x40
 800241c:	1852      	adds	r2, r2, r1
 800241e:	19d2      	adds	r2, r2, r7
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e090      	b.n	8002546 <main+0x592>
				plaintext[15 - i] = (uint8_t)((des_out1 >> (8 * i)) & 0xFF);
 8002424:	239a      	movs	r3, #154	; 0x9a
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	2240      	movs	r2, #64	; 0x40
 800242a:	189b      	adds	r3, r3, r2
 800242c:	19db      	adds	r3, r3, r7
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	00d9      	lsls	r1, r3, #3
 8002432:	000a      	movs	r2, r1
 8002434:	3a20      	subs	r2, #32
 8002436:	2a00      	cmp	r2, #0
 8002438:	db08      	blt.n	800244c <main+0x498>
 800243a:	2392      	movs	r3, #146	; 0x92
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2040      	movs	r0, #64	; 0x40
 8002440:	181b      	adds	r3, r3, r0
 8002442:	19db      	adds	r3, r3, r7
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	40d3      	lsrs	r3, r2
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
 800244a:	e014      	b.n	8002476 <main+0x4c2>
 800244c:	2320      	movs	r3, #32
 800244e:	1a5a      	subs	r2, r3, r1
 8002450:	2392      	movs	r3, #146	; 0x92
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	2040      	movs	r0, #64	; 0x40
 8002456:	181b      	adds	r3, r3, r0
 8002458:	19db      	adds	r3, r3, r7
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4093      	lsls	r3, r2
 800245e:	001a      	movs	r2, r3
 8002460:	2390      	movs	r3, #144	; 0x90
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2040      	movs	r0, #64	; 0x40
 8002466:	181b      	adds	r3, r3, r0
 8002468:	19db      	adds	r3, r3, r7
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	40cb      	lsrs	r3, r1
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002472:	4313      	orrs	r3, r2
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
 8002476:	2392      	movs	r3, #146	; 0x92
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	2240      	movs	r2, #64	; 0x40
 800247c:	189b      	adds	r3, r3, r2
 800247e:	19db      	adds	r3, r3, r7
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	40cb      	lsrs	r3, r1
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002486:	269a      	movs	r6, #154	; 0x9a
 8002488:	0076      	lsls	r6, r6, #1
 800248a:	2340      	movs	r3, #64	; 0x40
 800248c:	18f3      	adds	r3, r6, r3
 800248e:	19db      	adds	r3, r3, r7
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	230f      	movs	r3, #15
 8002494:	1a99      	subs	r1, r3, r2
 8002496:	2328      	movs	r3, #40	; 0x28
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	7818      	ldrb	r0, [r3, #0]
 800249c:	4b6a      	ldr	r3, [pc, #424]	; (8002648 <main+0x694>)
 800249e:	22ac      	movs	r2, #172	; 0xac
 80024a0:	0052      	lsls	r2, r2, #1
 80024a2:	189b      	adds	r3, r3, r2
 80024a4:	2240      	movs	r2, #64	; 0x40
 80024a6:	18ba      	adds	r2, r7, r2
 80024a8:	189a      	adds	r2, r3, r2
 80024aa:	1c03      	adds	r3, r0, #0
 80024ac:	5453      	strb	r3, [r2, r1]
				plaintext[7 - i] = (uint8_t)((des_out2 >> (8 * i)) & 0xFF);
 80024ae:	2340      	movs	r3, #64	; 0x40
 80024b0:	18f3      	adds	r3, r6, r3
 80024b2:	19db      	adds	r3, r3, r7
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	00d9      	lsls	r1, r3, #3
 80024b8:	000a      	movs	r2, r1
 80024ba:	3a20      	subs	r2, #32
 80024bc:	2a00      	cmp	r2, #0
 80024be:	db08      	blt.n	80024d2 <main+0x51e>
 80024c0:	238e      	movs	r3, #142	; 0x8e
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	2040      	movs	r0, #64	; 0x40
 80024c6:	181b      	adds	r3, r3, r0
 80024c8:	19db      	adds	r3, r3, r7
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	40d3      	lsrs	r3, r2
 80024ce:	623b      	str	r3, [r7, #32]
 80024d0:	e014      	b.n	80024fc <main+0x548>
 80024d2:	2320      	movs	r3, #32
 80024d4:	1a5a      	subs	r2, r3, r1
 80024d6:	238e      	movs	r3, #142	; 0x8e
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	2040      	movs	r0, #64	; 0x40
 80024dc:	181b      	adds	r3, r3, r0
 80024de:	19db      	adds	r3, r3, r7
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4093      	lsls	r3, r2
 80024e4:	001a      	movs	r2, r3
 80024e6:	238c      	movs	r3, #140	; 0x8c
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	2040      	movs	r0, #64	; 0x40
 80024ec:	181b      	adds	r3, r3, r0
 80024ee:	19db      	adds	r3, r3, r7
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	40cb      	lsrs	r3, r1
 80024f4:	623b      	str	r3, [r7, #32]
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	623b      	str	r3, [r7, #32]
 80024fc:	238e      	movs	r3, #142	; 0x8e
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2240      	movs	r2, #64	; 0x40
 8002502:	189b      	adds	r3, r3, r2
 8002504:	19db      	adds	r3, r3, r7
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	40cb      	lsrs	r3, r1
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
 800250c:	269a      	movs	r6, #154	; 0x9a
 800250e:	0076      	lsls	r6, r6, #1
 8002510:	2340      	movs	r3, #64	; 0x40
 8002512:	18f3      	adds	r3, r6, r3
 8002514:	19db      	adds	r3, r3, r7
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	2307      	movs	r3, #7
 800251a:	1a99      	subs	r1, r3, r2
 800251c:	2320      	movs	r3, #32
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	7818      	ldrb	r0, [r3, #0]
 8002522:	4b49      	ldr	r3, [pc, #292]	; (8002648 <main+0x694>)
 8002524:	22ac      	movs	r2, #172	; 0xac
 8002526:	0052      	lsls	r2, r2, #1
 8002528:	189b      	adds	r3, r3, r2
 800252a:	2240      	movs	r2, #64	; 0x40
 800252c:	18ba      	adds	r2, r7, r2
 800252e:	189a      	adds	r2, r3, r2
 8002530:	1c03      	adds	r3, r0, #0
 8002532:	5453      	strb	r3, [r2, r1]
			for(int i = 0; i < 8; i ++){
 8002534:	2340      	movs	r3, #64	; 0x40
 8002536:	18f3      	adds	r3, r6, r3
 8002538:	19db      	adds	r3, r3, r7
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3301      	adds	r3, #1
 800253e:	2240      	movs	r2, #64	; 0x40
 8002540:	18b2      	adds	r2, r6, r2
 8002542:	19d2      	adds	r2, r2, r7
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	239a      	movs	r3, #154	; 0x9a
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	2240      	movs	r2, #64	; 0x40
 800254c:	189b      	adds	r3, r3, r2
 800254e:	19db      	adds	r3, r3, r7
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b07      	cmp	r3, #7
 8002554:	dc00      	bgt.n	8002558 <main+0x5a4>
 8002556:	e765      	b.n	8002424 <main+0x470>
			}
	  		  break;
 8002558:	e018      	b.n	800258c <main+0x5d8>

	  	  case 0x40:
	  		aes_key_schedule_128(AES_key, roundkeys);
 800255a:	2668      	movs	r6, #104	; 0x68
 800255c:	2340      	movs	r3, #64	; 0x40
 800255e:	18f3      	adds	r3, r6, r3
 8002560:	19da      	adds	r2, r3, r7
 8002562:	2348      	movs	r3, #72	; 0x48
 8002564:	2140      	movs	r1, #64	; 0x40
 8002566:	185b      	adds	r3, r3, r1
 8002568:	19db      	adds	r3, r3, r7
 800256a:	0011      	movs	r1, r2
 800256c:	0018      	movs	r0, r3
 800256e:	f7fd fec9 	bl	8000304 <aes_key_schedule_128>
	  		aes_decrypt_128(roundkeys, ciphertext, plaintext);
 8002572:	2340      	movs	r3, #64	; 0x40
 8002574:	18fa      	adds	r2, r7, r3
 8002576:	2310      	movs	r3, #16
 8002578:	2140      	movs	r1, #64	; 0x40
 800257a:	185b      	adds	r3, r3, r1
 800257c:	19d9      	adds	r1, r3, r7
 800257e:	2340      	movs	r3, #64	; 0x40
 8002580:	18f3      	adds	r3, r6, r3
 8002582:	19db      	adds	r3, r3, r7
 8002584:	0018      	movs	r0, r3
 8002586:	f7fe f801 	bl	800058c <aes_decrypt_128>

	  	  break;
 800258a:	46c0      	nop			; (mov r8, r8)
	  }


	  // Check success byte
	  if(plaintext[0] == 0xFE){
 800258c:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <main+0x694>)
 800258e:	22ac      	movs	r2, #172	; 0xac
 8002590:	0052      	lsls	r2, r2, #1
 8002592:	189b      	adds	r3, r3, r2
 8002594:	2140      	movs	r1, #64	; 0x40
 8002596:	468c      	mov	ip, r1
 8002598:	44bc      	add	ip, r7
 800259a:	4463      	add	r3, ip
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2bfe      	cmp	r3, #254	; 0xfe
 80025a0:	d107      	bne.n	80025b2 <main+0x5fe>
		  output_array[0] = 0x00; // Success
 80025a2:	4b2a      	ldr	r3, [pc, #168]	; (800264c <main+0x698>)
 80025a4:	189b      	adds	r3, r3, r2
 80025a6:	2240      	movs	r2, #64	; 0x40
 80025a8:	18ba      	adds	r2, r7, r2
 80025aa:	189a      	adds	r2, r3, r2
 80025ac:	2300      	movs	r3, #0
 80025ae:	7013      	strb	r3, [r2, #0]
 80025b0:	e008      	b.n	80025c4 <main+0x610>
	  } else {
		  output_array[0] = 0x01; // Fail
 80025b2:	4b26      	ldr	r3, [pc, #152]	; (800264c <main+0x698>)
 80025b4:	22ac      	movs	r2, #172	; 0xac
 80025b6:	0052      	lsls	r2, r2, #1
 80025b8:	189b      	adds	r3, r3, r2
 80025ba:	2240      	movs	r2, #64	; 0x40
 80025bc:	18ba      	adds	r2, r7, r2
 80025be:	189a      	adds	r2, r3, r2
 80025c0:	2301      	movs	r3, #1
 80025c2:	7013      	strb	r3, [r2, #0]
	  }

	  // Set output array
	  for(int i = 0; i<16; i++){
 80025c4:	2300      	movs	r3, #0
 80025c6:	2298      	movs	r2, #152	; 0x98
 80025c8:	0052      	lsls	r2, r2, #1
 80025ca:	2140      	movs	r1, #64	; 0x40
 80025cc:	1852      	adds	r2, r2, r1
 80025ce:	19d2      	adds	r2, r2, r7
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e025      	b.n	8002620 <main+0x66c>
		  output_array[i+1] = plaintext[i];
 80025d4:	2698      	movs	r6, #152	; 0x98
 80025d6:	0076      	lsls	r6, r6, #1
 80025d8:	2340      	movs	r3, #64	; 0x40
 80025da:	18f3      	adds	r3, r6, r3
 80025dc:	19db      	adds	r3, r3, r7
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	1c58      	adds	r0, r3, #1
 80025e2:	4b19      	ldr	r3, [pc, #100]	; (8002648 <main+0x694>)
 80025e4:	22ac      	movs	r2, #172	; 0xac
 80025e6:	0052      	lsls	r2, r2, #1
 80025e8:	0014      	movs	r4, r2
 80025ea:	189b      	adds	r3, r3, r2
 80025ec:	2240      	movs	r2, #64	; 0x40
 80025ee:	18ba      	adds	r2, r7, r2
 80025f0:	189a      	adds	r2, r3, r2
 80025f2:	2340      	movs	r3, #64	; 0x40
 80025f4:	18f3      	adds	r3, r6, r3
 80025f6:	19db      	adds	r3, r3, r7
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	18d3      	adds	r3, r2, r3
 80025fc:	7819      	ldrb	r1, [r3, #0]
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <main+0x698>)
 8002600:	0022      	movs	r2, r4
 8002602:	189b      	adds	r3, r3, r2
 8002604:	2240      	movs	r2, #64	; 0x40
 8002606:	18ba      	adds	r2, r7, r2
 8002608:	189a      	adds	r2, r3, r2
 800260a:	1c0b      	adds	r3, r1, #0
 800260c:	5413      	strb	r3, [r2, r0]
	  for(int i = 0; i<16; i++){
 800260e:	2340      	movs	r3, #64	; 0x40
 8002610:	18f3      	adds	r3, r6, r3
 8002612:	19db      	adds	r3, r3, r7
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	3301      	adds	r3, #1
 8002618:	2240      	movs	r2, #64	; 0x40
 800261a:	18b2      	adds	r2, r6, r2
 800261c:	19d2      	adds	r2, r2, r7
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	2398      	movs	r3, #152	; 0x98
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	2240      	movs	r2, #64	; 0x40
 8002626:	189b      	adds	r3, r3, r2
 8002628:	19db      	adds	r3, r3, r7
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b0f      	cmp	r3, #15
 800262e:	ddd1      	ble.n	80025d4 <main+0x620>
	  }

	  HAL_UART_Transmit(&huart2, output_array, 17, HAL_MAX_DELAY);
 8002630:	2301      	movs	r3, #1
 8002632:	425b      	negs	r3, r3
 8002634:	2220      	movs	r2, #32
 8002636:	2140      	movs	r1, #64	; 0x40
 8002638:	1852      	adds	r2, r2, r1
 800263a:	19d1      	adds	r1, r2, r7
 800263c:	4804      	ldr	r0, [pc, #16]	; (8002650 <main+0x69c>)
 800263e:	2211      	movs	r2, #17
 8002640:	f001 f95c 	bl	80038fc <HAL_UART_Transmit>
  {
 8002644:	e4e2      	b.n	800200c <main+0x58>
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	fffffea8 	.word	0xfffffea8
 800264c:	fffffec8 	.word	0xfffffec8
 8002650:	2000057c 	.word	0x2000057c

08002654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002654:	b590      	push	{r4, r7, lr}
 8002656:	b093      	sub	sp, #76	; 0x4c
 8002658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800265a:	2414      	movs	r4, #20
 800265c:	193b      	adds	r3, r7, r4
 800265e:	0018      	movs	r0, r3
 8002660:	2334      	movs	r3, #52	; 0x34
 8002662:	001a      	movs	r2, r3
 8002664:	2100      	movs	r1, #0
 8002666:	f001 fe5f 	bl	8004328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	0018      	movs	r0, r3
 800266e:	2310      	movs	r3, #16
 8002670:	001a      	movs	r2, r3
 8002672:	2100      	movs	r1, #0
 8002674:	f001 fe58 	bl	8004328 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002678:	0021      	movs	r1, r4
 800267a:	187b      	adds	r3, r7, r1
 800267c:	2202      	movs	r2, #2
 800267e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002680:	187b      	adds	r3, r7, r1
 8002682:	2201      	movs	r2, #1
 8002684:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002686:	187b      	adds	r3, r7, r1
 8002688:	2210      	movs	r2, #16
 800268a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800268c:	187b      	adds	r3, r7, r1
 800268e:	2200      	movs	r2, #0
 8002690:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002692:	187b      	adds	r3, r7, r1
 8002694:	0018      	movs	r0, r3
 8002696:	f000 fbeb 	bl	8002e70 <HAL_RCC_OscConfig>
 800269a:	1e03      	subs	r3, r0, #0
 800269c:	d001      	beq.n	80026a2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800269e:	f000 f86f 	bl	8002780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	2207      	movs	r2, #7
 80026a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	2200      	movs	r2, #0
 80026ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	2200      	movs	r2, #0
 80026b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	2100      	movs	r1, #0
 80026be:	0018      	movs	r0, r3
 80026c0:	f000 ff5c 	bl	800357c <HAL_RCC_ClockConfig>
 80026c4:	1e03      	subs	r3, r0, #0
 80026c6:	d001      	beq.n	80026cc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80026c8:	f000 f85a 	bl	8002780 <Error_Handler>
  }
}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b013      	add	sp, #76	; 0x4c
 80026d2:	bd90      	pop	{r4, r7, pc}

080026d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026d8:	4b14      	ldr	r3, [pc, #80]	; (800272c <MX_USART2_UART_Init+0x58>)
 80026da:	4a15      	ldr	r2, [pc, #84]	; (8002730 <MX_USART2_UART_Init+0x5c>)
 80026dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <MX_USART2_UART_Init+0x58>)
 80026e0:	2296      	movs	r2, #150	; 0x96
 80026e2:	0212      	lsls	r2, r2, #8
 80026e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <MX_USART2_UART_Init+0x58>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <MX_USART2_UART_Init+0x58>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <MX_USART2_UART_Init+0x58>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <MX_USART2_UART_Init+0x58>)
 80026fa:	220c      	movs	r2, #12
 80026fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fe:	4b0b      	ldr	r3, [pc, #44]	; (800272c <MX_USART2_UART_Init+0x58>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002704:	4b09      	ldr	r3, [pc, #36]	; (800272c <MX_USART2_UART_Init+0x58>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <MX_USART2_UART_Init+0x58>)
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <MX_USART2_UART_Init+0x58>)
 8002712:	2200      	movs	r2, #0
 8002714:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002716:	4b05      	ldr	r3, [pc, #20]	; (800272c <MX_USART2_UART_Init+0x58>)
 8002718:	0018      	movs	r0, r3
 800271a:	f001 f89b 	bl	8003854 <HAL_UART_Init>
 800271e:	1e03      	subs	r3, r0, #0
 8002720:	d001      	beq.n	8002726 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002722:	f000 f82d 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	2000057c 	.word	0x2000057c
 8002730:	40004400 	.word	0x40004400

08002734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <MX_GPIO_Init+0x48>)
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	4b0f      	ldr	r3, [pc, #60]	; (800277c <MX_GPIO_Init+0x48>)
 8002740:	2180      	movs	r1, #128	; 0x80
 8002742:	03c9      	lsls	r1, r1, #15
 8002744:	430a      	orrs	r2, r1
 8002746:	615a      	str	r2, [r3, #20]
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <MX_GPIO_Init+0x48>)
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	03db      	lsls	r3, r3, #15
 8002750:	4013      	ands	r3, r2
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <MX_GPIO_Init+0x48>)
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <MX_GPIO_Init+0x48>)
 800275c:	2180      	movs	r1, #128	; 0x80
 800275e:	0289      	lsls	r1, r1, #10
 8002760:	430a      	orrs	r2, r1
 8002762:	615a      	str	r2, [r3, #20]
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <MX_GPIO_Init+0x48>)
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	029b      	lsls	r3, r3, #10
 800276c:	4013      	ands	r3, r2
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	b002      	add	sp, #8
 8002778:	bd80      	pop	{r7, pc}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	40021000 	.word	0x40021000

08002780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002784:	b672      	cpsid	i
}
 8002786:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002788:	e7fe      	b.n	8002788 <Error_Handler+0x8>
	...

0800278c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002792:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <HAL_MspInit+0x44>)
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_MspInit+0x44>)
 8002798:	2101      	movs	r1, #1
 800279a:	430a      	orrs	r2, r1
 800279c:	619a      	str	r2, [r3, #24]
 800279e:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <HAL_MspInit+0x44>)
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2201      	movs	r2, #1
 80027a4:	4013      	ands	r3, r2
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <HAL_MspInit+0x44>)
 80027ac:	69da      	ldr	r2, [r3, #28]
 80027ae:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <HAL_MspInit+0x44>)
 80027b0:	2180      	movs	r1, #128	; 0x80
 80027b2:	0549      	lsls	r1, r1, #21
 80027b4:	430a      	orrs	r2, r1
 80027b6:	61da      	str	r2, [r3, #28]
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_MspInit+0x44>)
 80027ba:	69da      	ldr	r2, [r3, #28]
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	055b      	lsls	r3, r3, #21
 80027c0:	4013      	ands	r3, r2
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b002      	add	sp, #8
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	40021000 	.word	0x40021000

080027d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b08b      	sub	sp, #44	; 0x2c
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	2414      	movs	r4, #20
 80027de:	193b      	adds	r3, r7, r4
 80027e0:	0018      	movs	r0, r3
 80027e2:	2314      	movs	r3, #20
 80027e4:	001a      	movs	r2, r3
 80027e6:	2100      	movs	r1, #0
 80027e8:	f001 fd9e 	bl	8004328 <memset>
  if(huart->Instance==USART2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1c      	ldr	r2, [pc, #112]	; (8002864 <HAL_UART_MspInit+0x90>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d132      	bne.n	800285c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027f6:	4b1c      	ldr	r3, [pc, #112]	; (8002868 <HAL_UART_MspInit+0x94>)
 80027f8:	69da      	ldr	r2, [r3, #28]
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_UART_MspInit+0x94>)
 80027fc:	2180      	movs	r1, #128	; 0x80
 80027fe:	0289      	lsls	r1, r1, #10
 8002800:	430a      	orrs	r2, r1
 8002802:	61da      	str	r2, [r3, #28]
 8002804:	4b18      	ldr	r3, [pc, #96]	; (8002868 <HAL_UART_MspInit+0x94>)
 8002806:	69da      	ldr	r2, [r3, #28]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	029b      	lsls	r3, r3, #10
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_UART_MspInit+0x94>)
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	4b14      	ldr	r3, [pc, #80]	; (8002868 <HAL_UART_MspInit+0x94>)
 8002818:	2180      	movs	r1, #128	; 0x80
 800281a:	0289      	lsls	r1, r1, #10
 800281c:	430a      	orrs	r2, r1
 800281e:	615a      	str	r2, [r3, #20]
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_UART_MspInit+0x94>)
 8002822:	695a      	ldr	r2, [r3, #20]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	029b      	lsls	r3, r3, #10
 8002828:	4013      	ands	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800282e:	0021      	movs	r1, r4
 8002830:	187b      	adds	r3, r7, r1
 8002832:	4a0e      	ldr	r2, [pc, #56]	; (800286c <HAL_UART_MspInit+0x98>)
 8002834:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002836:	187b      	adds	r3, r7, r1
 8002838:	2202      	movs	r2, #2
 800283a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	187b      	adds	r3, r7, r1
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002842:	187b      	adds	r3, r7, r1
 8002844:	2203      	movs	r2, #3
 8002846:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002848:	187b      	adds	r3, r7, r1
 800284a:	2201      	movs	r2, #1
 800284c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284e:	187a      	adds	r2, r7, r1
 8002850:	2390      	movs	r3, #144	; 0x90
 8002852:	05db      	lsls	r3, r3, #23
 8002854:	0011      	movs	r1, r2
 8002856:	0018      	movs	r0, r3
 8002858:	f000 f9a2 	bl	8002ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800285c:	46c0      	nop			; (mov r8, r8)
 800285e:	46bd      	mov	sp, r7
 8002860:	b00b      	add	sp, #44	; 0x2c
 8002862:	bd90      	pop	{r4, r7, pc}
 8002864:	40004400 	.word	0x40004400
 8002868:	40021000 	.word	0x40021000
 800286c:	00008004 	.word	0x00008004

08002870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002874:	e7fe      	b.n	8002874 <NMI_Handler+0x4>

08002876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800287a:	e7fe      	b.n	800287a <HardFault_Handler+0x4>

0800287c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002880:	46c0      	nop			; (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002894:	f000 f8b4 	bl	8002a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002898:	46c0      	nop			; (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <do_xor>:
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	e010      	b.n	80028dc <do_xor+0x34>
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	18d3      	adds	r3, r2, r3
 80028c0:	7819      	ldrb	r1, [r3, #0]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	18d3      	adds	r3, r2, r3
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	18c3      	adds	r3, r0, r3
 80028d0:	404a      	eors	r2, r1
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3301      	adds	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b0f      	cmp	r3, #15
 80028e0:	ddeb      	ble.n	80028ba <do_xor+0x12>
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	46c0      	nop			; (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b006      	add	sp, #24
 80028ea:	bd80      	pop	{r7, pc}

080028ec <Reset_Handler>:
 80028ec:	4813      	ldr	r0, [pc, #76]	; (800293c <LoopForever+0x2>)
 80028ee:	4685      	mov	sp, r0
 80028f0:	f7ff ffd5 	bl	800289e <SystemInit>
 80028f4:	4812      	ldr	r0, [pc, #72]	; (8002940 <LoopForever+0x6>)
 80028f6:	6801      	ldr	r1, [r0, #0]
 80028f8:	0e09      	lsrs	r1, r1, #24
 80028fa:	4a12      	ldr	r2, [pc, #72]	; (8002944 <LoopForever+0xa>)
 80028fc:	4291      	cmp	r1, r2
 80028fe:	d105      	bne.n	800290c <ApplicationStart>
 8002900:	4811      	ldr	r0, [pc, #68]	; (8002948 <LoopForever+0xe>)
 8002902:	4912      	ldr	r1, [pc, #72]	; (800294c <LoopForever+0x12>)
 8002904:	6001      	str	r1, [r0, #0]
 8002906:	4812      	ldr	r0, [pc, #72]	; (8002950 <LoopForever+0x16>)
 8002908:	4912      	ldr	r1, [pc, #72]	; (8002954 <LoopForever+0x1a>)
 800290a:	6001      	str	r1, [r0, #0]

0800290c <ApplicationStart>:
 800290c:	4812      	ldr	r0, [pc, #72]	; (8002958 <LoopForever+0x1e>)
 800290e:	4913      	ldr	r1, [pc, #76]	; (800295c <LoopForever+0x22>)
 8002910:	4a13      	ldr	r2, [pc, #76]	; (8002960 <LoopForever+0x26>)
 8002912:	2300      	movs	r3, #0
 8002914:	e002      	b.n	800291c <LoopCopyDataInit>

08002916 <CopyDataInit>:
 8002916:	58d4      	ldr	r4, [r2, r3]
 8002918:	50c4      	str	r4, [r0, r3]
 800291a:	3304      	adds	r3, #4

0800291c <LoopCopyDataInit>:
 800291c:	18c4      	adds	r4, r0, r3
 800291e:	428c      	cmp	r4, r1
 8002920:	d3f9      	bcc.n	8002916 <CopyDataInit>
 8002922:	4a10      	ldr	r2, [pc, #64]	; (8002964 <LoopForever+0x2a>)
 8002924:	4c10      	ldr	r4, [pc, #64]	; (8002968 <LoopForever+0x2e>)
 8002926:	2300      	movs	r3, #0
 8002928:	e001      	b.n	800292e <LoopFillZerobss>

0800292a <FillZerobss>:
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	3204      	adds	r2, #4

0800292e <LoopFillZerobss>:
 800292e:	42a2      	cmp	r2, r4
 8002930:	d3fb      	bcc.n	800292a <FillZerobss>
 8002932:	f001 fcd5 	bl	80042e0 <__libc_init_array>
 8002936:	f7ff fb3d 	bl	8001fb4 <main>

0800293a <LoopForever>:
 800293a:	e7fe      	b.n	800293a <LoopForever>
 800293c:	20001800 	.word	0x20001800
 8002940:	00000004 	.word	0x00000004
 8002944:	0000001f 	.word	0x0000001f
 8002948:	40021018 	.word	0x40021018
 800294c:	00000001 	.word	0x00000001
 8002950:	40010000 	.word	0x40010000
 8002954:	00000000 	.word	0x00000000
 8002958:	20000000 	.word	0x20000000
 800295c:	20000560 	.word	0x20000560
 8002960:	080043d4 	.word	0x080043d4
 8002964:	20000560 	.word	0x20000560
 8002968:	20000608 	.word	0x20000608

0800296c <ADC1_IRQHandler>:
 800296c:	e7fe      	b.n	800296c <ADC1_IRQHandler>
	...

08002970 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002974:	4b07      	ldr	r3, [pc, #28]	; (8002994 <HAL_Init+0x24>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_Init+0x24>)
 800297a:	2110      	movs	r1, #16
 800297c:	430a      	orrs	r2, r1
 800297e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002980:	2000      	movs	r0, #0
 8002982:	f000 f809 	bl	8002998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002986:	f7ff ff01 	bl	800278c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	40022000 	.word	0x40022000

08002998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002998:	b590      	push	{r4, r7, lr}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a0:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <HAL_InitTick+0x5c>)
 80029a2:	681c      	ldr	r4, [r3, #0]
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <HAL_InitTick+0x60>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	0019      	movs	r1, r3
 80029aa:	23fa      	movs	r3, #250	; 0xfa
 80029ac:	0098      	lsls	r0, r3, #2
 80029ae:	f7fd fbab 	bl	8000108 <__udivsi3>
 80029b2:	0003      	movs	r3, r0
 80029b4:	0019      	movs	r1, r3
 80029b6:	0020      	movs	r0, r4
 80029b8:	f7fd fba6 	bl	8000108 <__udivsi3>
 80029bc:	0003      	movs	r3, r0
 80029be:	0018      	movs	r0, r3
 80029c0:	f000 f8e1 	bl	8002b86 <HAL_SYSTICK_Config>
 80029c4:	1e03      	subs	r3, r0, #0
 80029c6:	d001      	beq.n	80029cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e00f      	b.n	80029ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d80b      	bhi.n	80029ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	2301      	movs	r3, #1
 80029d6:	425b      	negs	r3, r3
 80029d8:	2200      	movs	r2, #0
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 f8be 	bl	8002b5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_InitTick+0x64>)
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	e000      	b.n	80029ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
}
 80029ec:	0018      	movs	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b003      	add	sp, #12
 80029f2:	bd90      	pop	{r4, r7, pc}
 80029f4:	20000554 	.word	0x20000554
 80029f8:	2000055c 	.word	0x2000055c
 80029fc:	20000558 	.word	0x20000558

08002a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_IncTick+0x1c>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	001a      	movs	r2, r3
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_IncTick+0x20>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	18d2      	adds	r2, r2, r3
 8002a10:	4b03      	ldr	r3, [pc, #12]	; (8002a20 <HAL_IncTick+0x20>)
 8002a12:	601a      	str	r2, [r3, #0]
}
 8002a14:	46c0      	nop			; (mov r8, r8)
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	2000055c 	.word	0x2000055c
 8002a20:	20000604 	.word	0x20000604

08002a24 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  return uwTick;
 8002a28:	4b02      	ldr	r3, [pc, #8]	; (8002a34 <HAL_GetTick+0x10>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
}
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	20000604 	.word	0x20000604

08002a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	0002      	movs	r2, r0
 8002a40:	6039      	str	r1, [r7, #0]
 8002a42:	1dfb      	adds	r3, r7, #7
 8002a44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a46:	1dfb      	adds	r3, r7, #7
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8002a4c:	d828      	bhi.n	8002aa0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a4e:	4a2f      	ldr	r2, [pc, #188]	; (8002b0c <__NVIC_SetPriority+0xd4>)
 8002a50:	1dfb      	adds	r3, r7, #7
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	b25b      	sxtb	r3, r3
 8002a56:	089b      	lsrs	r3, r3, #2
 8002a58:	33c0      	adds	r3, #192	; 0xc0
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	589b      	ldr	r3, [r3, r2]
 8002a5e:	1dfa      	adds	r2, r7, #7
 8002a60:	7812      	ldrb	r2, [r2, #0]
 8002a62:	0011      	movs	r1, r2
 8002a64:	2203      	movs	r2, #3
 8002a66:	400a      	ands	r2, r1
 8002a68:	00d2      	lsls	r2, r2, #3
 8002a6a:	21ff      	movs	r1, #255	; 0xff
 8002a6c:	4091      	lsls	r1, r2
 8002a6e:	000a      	movs	r2, r1
 8002a70:	43d2      	mvns	r2, r2
 8002a72:	401a      	ands	r2, r3
 8002a74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	019b      	lsls	r3, r3, #6
 8002a7a:	22ff      	movs	r2, #255	; 0xff
 8002a7c:	401a      	ands	r2, r3
 8002a7e:	1dfb      	adds	r3, r7, #7
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	0018      	movs	r0, r3
 8002a84:	2303      	movs	r3, #3
 8002a86:	4003      	ands	r3, r0
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a8c:	481f      	ldr	r0, [pc, #124]	; (8002b0c <__NVIC_SetPriority+0xd4>)
 8002a8e:	1dfb      	adds	r3, r7, #7
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	b25b      	sxtb	r3, r3
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	430a      	orrs	r2, r1
 8002a98:	33c0      	adds	r3, #192	; 0xc0
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002a9e:	e031      	b.n	8002b04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002aa0:	4a1b      	ldr	r2, [pc, #108]	; (8002b10 <__NVIC_SetPriority+0xd8>)
 8002aa2:	1dfb      	adds	r3, r7, #7
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	230f      	movs	r3, #15
 8002aaa:	400b      	ands	r3, r1
 8002aac:	3b08      	subs	r3, #8
 8002aae:	089b      	lsrs	r3, r3, #2
 8002ab0:	3306      	adds	r3, #6
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	18d3      	adds	r3, r2, r3
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	1dfa      	adds	r2, r7, #7
 8002abc:	7812      	ldrb	r2, [r2, #0]
 8002abe:	0011      	movs	r1, r2
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	400a      	ands	r2, r1
 8002ac4:	00d2      	lsls	r2, r2, #3
 8002ac6:	21ff      	movs	r1, #255	; 0xff
 8002ac8:	4091      	lsls	r1, r2
 8002aca:	000a      	movs	r2, r1
 8002acc:	43d2      	mvns	r2, r2
 8002ace:	401a      	ands	r2, r3
 8002ad0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	019b      	lsls	r3, r3, #6
 8002ad6:	22ff      	movs	r2, #255	; 0xff
 8002ad8:	401a      	ands	r2, r3
 8002ada:	1dfb      	adds	r3, r7, #7
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	0018      	movs	r0, r3
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	4003      	ands	r3, r0
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ae8:	4809      	ldr	r0, [pc, #36]	; (8002b10 <__NVIC_SetPriority+0xd8>)
 8002aea:	1dfb      	adds	r3, r7, #7
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	001c      	movs	r4, r3
 8002af0:	230f      	movs	r3, #15
 8002af2:	4023      	ands	r3, r4
 8002af4:	3b08      	subs	r3, #8
 8002af6:	089b      	lsrs	r3, r3, #2
 8002af8:	430a      	orrs	r2, r1
 8002afa:	3306      	adds	r3, #6
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	18c3      	adds	r3, r0, r3
 8002b00:	3304      	adds	r3, #4
 8002b02:	601a      	str	r2, [r3, #0]
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b003      	add	sp, #12
 8002b0a:	bd90      	pop	{r4, r7, pc}
 8002b0c:	e000e100 	.word	0xe000e100
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	1e5a      	subs	r2, r3, #1
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	045b      	lsls	r3, r3, #17
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d301      	bcc.n	8002b2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e010      	b.n	8002b4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <SysTick_Config+0x44>)
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	3a01      	subs	r2, #1
 8002b32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b34:	2301      	movs	r3, #1
 8002b36:	425b      	negs	r3, r3
 8002b38:	2103      	movs	r1, #3
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f7ff ff7c 	bl	8002a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <SysTick_Config+0x44>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b46:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <SysTick_Config+0x44>)
 8002b48:	2207      	movs	r2, #7
 8002b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	0018      	movs	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b002      	add	sp, #8
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	e000e010 	.word	0xe000e010

08002b5c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	210f      	movs	r1, #15
 8002b68:	187b      	adds	r3, r7, r1
 8002b6a:	1c02      	adds	r2, r0, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	187b      	adds	r3, r7, r1
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b25b      	sxtb	r3, r3
 8002b76:	0011      	movs	r1, r2
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f7ff ff5d 	bl	8002a38 <__NVIC_SetPriority>
}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b004      	add	sp, #16
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7ff ffbf 	bl	8002b14 <SysTick_Config>
 8002b96:	0003      	movs	r3, r0
}
 8002b98:	0018      	movs	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b002      	add	sp, #8
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bae:	e149      	b.n	8002e44 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4091      	lsls	r1, r2
 8002bba:	000a      	movs	r2, r1
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d100      	bne.n	8002bc8 <HAL_GPIO_Init+0x28>
 8002bc6:	e13a      	b.n	8002e3e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2203      	movs	r2, #3
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d005      	beq.n	8002be0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2203      	movs	r2, #3
 8002bda:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d130      	bne.n	8002c42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	2203      	movs	r2, #3
 8002bec:	409a      	lsls	r2, r3
 8002bee:	0013      	movs	r3, r2
 8002bf0:	43da      	mvns	r2, r3
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	409a      	lsls	r2, r3
 8002c02:	0013      	movs	r3, r2
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c16:	2201      	movs	r2, #1
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	0013      	movs	r3, r2
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	091b      	lsrs	r3, r3, #4
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	401a      	ands	r2, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	409a      	lsls	r2, r3
 8002c34:	0013      	movs	r3, r2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2203      	movs	r2, #3
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d017      	beq.n	8002c7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	2203      	movs	r2, #3
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	0013      	movs	r3, r2
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4013      	ands	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	0013      	movs	r3, r2
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2203      	movs	r2, #3
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d123      	bne.n	8002cd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	08da      	lsrs	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3208      	adds	r2, #8
 8002c92:	0092      	lsls	r2, r2, #2
 8002c94:	58d3      	ldr	r3, [r2, r3]
 8002c96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2207      	movs	r2, #7
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	0013      	movs	r3, r2
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	691a      	ldr	r2, [r3, #16]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2107      	movs	r1, #7
 8002cb6:	400b      	ands	r3, r1
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	0013      	movs	r3, r2
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	08da      	lsrs	r2, r3, #3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3208      	adds	r2, #8
 8002ccc:	0092      	lsls	r2, r2, #2
 8002cce:	6939      	ldr	r1, [r7, #16]
 8002cd0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	2203      	movs	r2, #3
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	0013      	movs	r3, r2
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2203      	movs	r2, #3
 8002cf0:	401a      	ands	r2, r3
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	0013      	movs	r3, r2
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	23c0      	movs	r3, #192	; 0xc0
 8002d0c:	029b      	lsls	r3, r3, #10
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d100      	bne.n	8002d14 <HAL_GPIO_Init+0x174>
 8002d12:	e094      	b.n	8002e3e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d14:	4b51      	ldr	r3, [pc, #324]	; (8002e5c <HAL_GPIO_Init+0x2bc>)
 8002d16:	699a      	ldr	r2, [r3, #24]
 8002d18:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <HAL_GPIO_Init+0x2bc>)
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	619a      	str	r2, [r3, #24]
 8002d20:	4b4e      	ldr	r3, [pc, #312]	; (8002e5c <HAL_GPIO_Init+0x2bc>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	2201      	movs	r2, #1
 8002d26:	4013      	ands	r3, r2
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d2c:	4a4c      	ldr	r2, [pc, #304]	; (8002e60 <HAL_GPIO_Init+0x2c0>)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	089b      	lsrs	r3, r3, #2
 8002d32:	3302      	adds	r3, #2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	589b      	ldr	r3, [r3, r2]
 8002d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	4013      	ands	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	220f      	movs	r2, #15
 8002d44:	409a      	lsls	r2, r3
 8002d46:	0013      	movs	r3, r2
 8002d48:	43da      	mvns	r2, r3
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	2390      	movs	r3, #144	; 0x90
 8002d54:	05db      	lsls	r3, r3, #23
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d00d      	beq.n	8002d76 <HAL_GPIO_Init+0x1d6>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a41      	ldr	r2, [pc, #260]	; (8002e64 <HAL_GPIO_Init+0x2c4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d007      	beq.n	8002d72 <HAL_GPIO_Init+0x1d2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a40      	ldr	r2, [pc, #256]	; (8002e68 <HAL_GPIO_Init+0x2c8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d101      	bne.n	8002d6e <HAL_GPIO_Init+0x1ce>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e004      	b.n	8002d78 <HAL_GPIO_Init+0x1d8>
 8002d6e:	2305      	movs	r3, #5
 8002d70:	e002      	b.n	8002d78 <HAL_GPIO_Init+0x1d8>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_GPIO_Init+0x1d8>
 8002d76:	2300      	movs	r3, #0
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	2103      	movs	r1, #3
 8002d7c:	400a      	ands	r2, r1
 8002d7e:	0092      	lsls	r2, r2, #2
 8002d80:	4093      	lsls	r3, r2
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d88:	4935      	ldr	r1, [pc, #212]	; (8002e60 <HAL_GPIO_Init+0x2c0>)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	089b      	lsrs	r3, r3, #2
 8002d8e:	3302      	adds	r3, #2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d96:	4b35      	ldr	r3, [pc, #212]	; (8002e6c <HAL_GPIO_Init+0x2cc>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	2380      	movs	r3, #128	; 0x80
 8002dac:	035b      	lsls	r3, r3, #13
 8002dae:	4013      	ands	r3, r2
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002dba:	4b2c      	ldr	r3, [pc, #176]	; (8002e6c <HAL_GPIO_Init+0x2cc>)
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002dc0:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <HAL_GPIO_Init+0x2cc>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	43da      	mvns	r2, r3
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	039b      	lsls	r3, r3, #14
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002de4:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <HAL_GPIO_Init+0x2cc>)
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002dea:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <HAL_GPIO_Init+0x2cc>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	43da      	mvns	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4013      	ands	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	029b      	lsls	r3, r3, #10
 8002e02:	4013      	ands	r3, r2
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e0e:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <HAL_GPIO_Init+0x2cc>)
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002e14:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <HAL_GPIO_Init+0x2cc>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	43da      	mvns	r2, r3
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	025b      	lsls	r3, r3, #9
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <HAL_GPIO_Init+0x2cc>)
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3301      	adds	r3, #1
 8002e42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	40da      	lsrs	r2, r3
 8002e4c:	1e13      	subs	r3, r2, #0
 8002e4e:	d000      	beq.n	8002e52 <HAL_GPIO_Init+0x2b2>
 8002e50:	e6ae      	b.n	8002bb0 <HAL_GPIO_Init+0x10>
  } 
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46c0      	nop			; (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b006      	add	sp, #24
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40010000 	.word	0x40010000
 8002e64:	48000400 	.word	0x48000400
 8002e68:	48000800 	.word	0x48000800
 8002e6c:	40010400 	.word	0x40010400

08002e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d102      	bne.n	8002e84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f000 fb76 	bl	8003570 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d100      	bne.n	8002e90 <HAL_RCC_OscConfig+0x20>
 8002e8e:	e08e      	b.n	8002fae <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e90:	4bc5      	ldr	r3, [pc, #788]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	220c      	movs	r2, #12
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d00e      	beq.n	8002eba <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e9c:	4bc2      	ldr	r3, [pc, #776]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	220c      	movs	r2, #12
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d117      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x68>
 8002ea8:	4bbf      	ldr	r3, [pc, #764]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	23c0      	movs	r3, #192	; 0xc0
 8002eae:	025b      	lsls	r3, r3, #9
 8002eb0:	401a      	ands	r2, r3
 8002eb2:	2380      	movs	r3, #128	; 0x80
 8002eb4:	025b      	lsls	r3, r3, #9
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d10e      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eba:	4bbb      	ldr	r3, [pc, #748]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	029b      	lsls	r3, r3, #10
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d100      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x58>
 8002ec6:	e071      	b.n	8002fac <HAL_RCC_OscConfig+0x13c>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d000      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x62>
 8002ed0:	e06c      	b.n	8002fac <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	f000 fb4c 	bl	8003570 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d107      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x80>
 8002ee0:	4bb1      	ldr	r3, [pc, #708]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4bb0      	ldr	r3, [pc, #704]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002ee6:	2180      	movs	r1, #128	; 0x80
 8002ee8:	0249      	lsls	r1, r1, #9
 8002eea:	430a      	orrs	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	e02f      	b.n	8002f50 <HAL_RCC_OscConfig+0xe0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10c      	bne.n	8002f12 <HAL_RCC_OscConfig+0xa2>
 8002ef8:	4bab      	ldr	r3, [pc, #684]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4baa      	ldr	r3, [pc, #680]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002efe:	49ab      	ldr	r1, [pc, #684]	; (80031ac <HAL_RCC_OscConfig+0x33c>)
 8002f00:	400a      	ands	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	4ba8      	ldr	r3, [pc, #672]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4ba7      	ldr	r3, [pc, #668]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002f0a:	49a9      	ldr	r1, [pc, #676]	; (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002f0c:	400a      	ands	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	e01e      	b.n	8002f50 <HAL_RCC_OscConfig+0xe0>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b05      	cmp	r3, #5
 8002f18:	d10e      	bne.n	8002f38 <HAL_RCC_OscConfig+0xc8>
 8002f1a:	4ba3      	ldr	r3, [pc, #652]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4ba2      	ldr	r3, [pc, #648]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002f20:	2180      	movs	r1, #128	; 0x80
 8002f22:	02c9      	lsls	r1, r1, #11
 8002f24:	430a      	orrs	r2, r1
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	4b9f      	ldr	r3, [pc, #636]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b9e      	ldr	r3, [pc, #632]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002f2e:	2180      	movs	r1, #128	; 0x80
 8002f30:	0249      	lsls	r1, r1, #9
 8002f32:	430a      	orrs	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	e00b      	b.n	8002f50 <HAL_RCC_OscConfig+0xe0>
 8002f38:	4b9b      	ldr	r3, [pc, #620]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b9a      	ldr	r3, [pc, #616]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002f3e:	499b      	ldr	r1, [pc, #620]	; (80031ac <HAL_RCC_OscConfig+0x33c>)
 8002f40:	400a      	ands	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	4b98      	ldr	r3, [pc, #608]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4b97      	ldr	r3, [pc, #604]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002f4a:	4999      	ldr	r1, [pc, #612]	; (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002f4c:	400a      	ands	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d014      	beq.n	8002f82 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7ff fd64 	bl	8002a24 <HAL_GetTick>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f62:	f7ff fd5f 	bl	8002a24 <HAL_GetTick>
 8002f66:	0002      	movs	r2, r0
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b64      	cmp	r3, #100	; 0x64
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e2fd      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f74:	4b8c      	ldr	r3, [pc, #560]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	029b      	lsls	r3, r3, #10
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0xf2>
 8002f80:	e015      	b.n	8002fae <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7ff fd4f 	bl	8002a24 <HAL_GetTick>
 8002f86:	0003      	movs	r3, r0
 8002f88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7ff fd4a 	bl	8002a24 <HAL_GetTick>
 8002f90:	0002      	movs	r2, r0
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	; 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e2e8      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9e:	4b82      	ldr	r3, [pc, #520]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	029b      	lsls	r3, r3, #10
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x11c>
 8002faa:	e000      	b.n	8002fae <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d100      	bne.n	8002fba <HAL_RCC_OscConfig+0x14a>
 8002fb8:	e06c      	b.n	8003094 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fba:	4b7b      	ldr	r3, [pc, #492]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	220c      	movs	r2, #12
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d00e      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fc4:	4b78      	ldr	r3, [pc, #480]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	220c      	movs	r2, #12
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d11f      	bne.n	8003010 <HAL_RCC_OscConfig+0x1a0>
 8002fd0:	4b75      	ldr	r3, [pc, #468]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	23c0      	movs	r3, #192	; 0xc0
 8002fd6:	025b      	lsls	r3, r3, #9
 8002fd8:	401a      	ands	r2, r3
 8002fda:	2380      	movs	r3, #128	; 0x80
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d116      	bne.n	8003010 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	4b71      	ldr	r3, [pc, #452]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x188>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e2bb      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff8:	4b6b      	ldr	r3, [pc, #428]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	22f8      	movs	r2, #248	; 0xf8
 8002ffe:	4393      	bics	r3, r2
 8003000:	0019      	movs	r1, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	00da      	lsls	r2, r3, #3
 8003008:	4b67      	ldr	r3, [pc, #412]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 800300a:	430a      	orrs	r2, r1
 800300c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300e:	e041      	b.n	8003094 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d024      	beq.n	8003062 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003018:	4b63      	ldr	r3, [pc, #396]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b62      	ldr	r3, [pc, #392]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 800301e:	2101      	movs	r1, #1
 8003020:	430a      	orrs	r2, r1
 8003022:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7ff fcfe 	bl	8002a24 <HAL_GetTick>
 8003028:	0003      	movs	r3, r0
 800302a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800302e:	f7ff fcf9 	bl	8002a24 <HAL_GetTick>
 8003032:	0002      	movs	r2, r0
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e297      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003040:	4b59      	ldr	r3, [pc, #356]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2202      	movs	r2, #2
 8003046:	4013      	ands	r3, r2
 8003048:	d0f1      	beq.n	800302e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304a:	4b57      	ldr	r3, [pc, #348]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	22f8      	movs	r2, #248	; 0xf8
 8003050:	4393      	bics	r3, r2
 8003052:	0019      	movs	r1, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	00da      	lsls	r2, r3, #3
 800305a:	4b53      	ldr	r3, [pc, #332]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 800305c:	430a      	orrs	r2, r1
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	e018      	b.n	8003094 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003062:	4b51      	ldr	r3, [pc, #324]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4b50      	ldr	r3, [pc, #320]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8003068:	2101      	movs	r1, #1
 800306a:	438a      	bics	r2, r1
 800306c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7ff fcd9 	bl	8002a24 <HAL_GetTick>
 8003072:	0003      	movs	r3, r0
 8003074:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003078:	f7ff fcd4 	bl	8002a24 <HAL_GetTick>
 800307c:	0002      	movs	r2, r0
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e272      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308a:	4b47      	ldr	r3, [pc, #284]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2202      	movs	r2, #2
 8003090:	4013      	ands	r3, r2
 8003092:	d1f1      	bne.n	8003078 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2208      	movs	r2, #8
 800309a:	4013      	ands	r3, r2
 800309c:	d036      	beq.n	800310c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d019      	beq.n	80030da <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a6:	4b40      	ldr	r3, [pc, #256]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 80030a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030aa:	4b3f      	ldr	r3, [pc, #252]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 80030ac:	2101      	movs	r1, #1
 80030ae:	430a      	orrs	r2, r1
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b2:	f7ff fcb7 	bl	8002a24 <HAL_GetTick>
 80030b6:	0003      	movs	r3, r0
 80030b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030bc:	f7ff fcb2 	bl	8002a24 <HAL_GetTick>
 80030c0:	0002      	movs	r2, r0
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e250      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ce:	4b36      	ldr	r3, [pc, #216]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2202      	movs	r2, #2
 80030d4:	4013      	ands	r3, r2
 80030d6:	d0f1      	beq.n	80030bc <HAL_RCC_OscConfig+0x24c>
 80030d8:	e018      	b.n	800310c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030da:	4b33      	ldr	r3, [pc, #204]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 80030dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030de:	4b32      	ldr	r3, [pc, #200]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 80030e0:	2101      	movs	r1, #1
 80030e2:	438a      	bics	r2, r1
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e6:	f7ff fc9d 	bl	8002a24 <HAL_GetTick>
 80030ea:	0003      	movs	r3, r0
 80030ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f0:	f7ff fc98 	bl	8002a24 <HAL_GetTick>
 80030f4:	0002      	movs	r2, r0
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e236      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003102:	4b29      	ldr	r3, [pc, #164]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2202      	movs	r2, #2
 8003108:	4013      	ands	r3, r2
 800310a:	d1f1      	bne.n	80030f0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2204      	movs	r2, #4
 8003112:	4013      	ands	r3, r2
 8003114:	d100      	bne.n	8003118 <HAL_RCC_OscConfig+0x2a8>
 8003116:	e0b5      	b.n	8003284 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003118:	201f      	movs	r0, #31
 800311a:	183b      	adds	r3, r7, r0
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003120:	4b21      	ldr	r3, [pc, #132]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8003122:	69da      	ldr	r2, [r3, #28]
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	055b      	lsls	r3, r3, #21
 8003128:	4013      	ands	r3, r2
 800312a:	d110      	bne.n	800314e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312c:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 800312e:	69da      	ldr	r2, [r3, #28]
 8003130:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 8003132:	2180      	movs	r1, #128	; 0x80
 8003134:	0549      	lsls	r1, r1, #21
 8003136:	430a      	orrs	r2, r1
 8003138:	61da      	str	r2, [r3, #28]
 800313a:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 800313c:	69da      	ldr	r2, [r3, #28]
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	055b      	lsls	r3, r3, #21
 8003142:	4013      	ands	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003148:	183b      	adds	r3, r7, r0
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314e:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <HAL_RCC_OscConfig+0x344>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4013      	ands	r3, r2
 8003158:	d11a      	bne.n	8003190 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800315a:	4b16      	ldr	r3, [pc, #88]	; (80031b4 <HAL_RCC_OscConfig+0x344>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <HAL_RCC_OscConfig+0x344>)
 8003160:	2180      	movs	r1, #128	; 0x80
 8003162:	0049      	lsls	r1, r1, #1
 8003164:	430a      	orrs	r2, r1
 8003166:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003168:	f7ff fc5c 	bl	8002a24 <HAL_GetTick>
 800316c:	0003      	movs	r3, r0
 800316e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003172:	f7ff fc57 	bl	8002a24 <HAL_GetTick>
 8003176:	0002      	movs	r2, r0
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b64      	cmp	r3, #100	; 0x64
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e1f5      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_RCC_OscConfig+0x344>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	4013      	ands	r3, r2
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d10f      	bne.n	80031b8 <HAL_RCC_OscConfig+0x348>
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 800319a:	6a1a      	ldr	r2, [r3, #32]
 800319c:	4b02      	ldr	r3, [pc, #8]	; (80031a8 <HAL_RCC_OscConfig+0x338>)
 800319e:	2101      	movs	r1, #1
 80031a0:	430a      	orrs	r2, r1
 80031a2:	621a      	str	r2, [r3, #32]
 80031a4:	e036      	b.n	8003214 <HAL_RCC_OscConfig+0x3a4>
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	40021000 	.word	0x40021000
 80031ac:	fffeffff 	.word	0xfffeffff
 80031b0:	fffbffff 	.word	0xfffbffff
 80031b4:	40007000 	.word	0x40007000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10c      	bne.n	80031da <HAL_RCC_OscConfig+0x36a>
 80031c0:	4bca      	ldr	r3, [pc, #808]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80031c2:	6a1a      	ldr	r2, [r3, #32]
 80031c4:	4bc9      	ldr	r3, [pc, #804]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80031c6:	2101      	movs	r1, #1
 80031c8:	438a      	bics	r2, r1
 80031ca:	621a      	str	r2, [r3, #32]
 80031cc:	4bc7      	ldr	r3, [pc, #796]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80031ce:	6a1a      	ldr	r2, [r3, #32]
 80031d0:	4bc6      	ldr	r3, [pc, #792]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80031d2:	2104      	movs	r1, #4
 80031d4:	438a      	bics	r2, r1
 80031d6:	621a      	str	r2, [r3, #32]
 80031d8:	e01c      	b.n	8003214 <HAL_RCC_OscConfig+0x3a4>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b05      	cmp	r3, #5
 80031e0:	d10c      	bne.n	80031fc <HAL_RCC_OscConfig+0x38c>
 80031e2:	4bc2      	ldr	r3, [pc, #776]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80031e4:	6a1a      	ldr	r2, [r3, #32]
 80031e6:	4bc1      	ldr	r3, [pc, #772]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80031e8:	2104      	movs	r1, #4
 80031ea:	430a      	orrs	r2, r1
 80031ec:	621a      	str	r2, [r3, #32]
 80031ee:	4bbf      	ldr	r3, [pc, #764]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80031f0:	6a1a      	ldr	r2, [r3, #32]
 80031f2:	4bbe      	ldr	r3, [pc, #760]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80031f4:	2101      	movs	r1, #1
 80031f6:	430a      	orrs	r2, r1
 80031f8:	621a      	str	r2, [r3, #32]
 80031fa:	e00b      	b.n	8003214 <HAL_RCC_OscConfig+0x3a4>
 80031fc:	4bbb      	ldr	r3, [pc, #748]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80031fe:	6a1a      	ldr	r2, [r3, #32]
 8003200:	4bba      	ldr	r3, [pc, #744]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 8003202:	2101      	movs	r1, #1
 8003204:	438a      	bics	r2, r1
 8003206:	621a      	str	r2, [r3, #32]
 8003208:	4bb8      	ldr	r3, [pc, #736]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 800320a:	6a1a      	ldr	r2, [r3, #32]
 800320c:	4bb7      	ldr	r3, [pc, #732]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 800320e:	2104      	movs	r1, #4
 8003210:	438a      	bics	r2, r1
 8003212:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d014      	beq.n	8003246 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321c:	f7ff fc02 	bl	8002a24 <HAL_GetTick>
 8003220:	0003      	movs	r3, r0
 8003222:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003224:	e009      	b.n	800323a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7ff fbfd 	bl	8002a24 <HAL_GetTick>
 800322a:	0002      	movs	r2, r0
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	4aaf      	ldr	r2, [pc, #700]	; (80034f0 <HAL_RCC_OscConfig+0x680>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e19a      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323a:	4bac      	ldr	r3, [pc, #688]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	2202      	movs	r2, #2
 8003240:	4013      	ands	r3, r2
 8003242:	d0f0      	beq.n	8003226 <HAL_RCC_OscConfig+0x3b6>
 8003244:	e013      	b.n	800326e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003246:	f7ff fbed 	bl	8002a24 <HAL_GetTick>
 800324a:	0003      	movs	r3, r0
 800324c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324e:	e009      	b.n	8003264 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003250:	f7ff fbe8 	bl	8002a24 <HAL_GetTick>
 8003254:	0002      	movs	r2, r0
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	4aa5      	ldr	r2, [pc, #660]	; (80034f0 <HAL_RCC_OscConfig+0x680>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e185      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003264:	4ba1      	ldr	r3, [pc, #644]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	2202      	movs	r2, #2
 800326a:	4013      	ands	r3, r2
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800326e:	231f      	movs	r3, #31
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d105      	bne.n	8003284 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003278:	4b9c      	ldr	r3, [pc, #624]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 800327a:	69da      	ldr	r2, [r3, #28]
 800327c:	4b9b      	ldr	r3, [pc, #620]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 800327e:	499d      	ldr	r1, [pc, #628]	; (80034f4 <HAL_RCC_OscConfig+0x684>)
 8003280:	400a      	ands	r2, r1
 8003282:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2210      	movs	r2, #16
 800328a:	4013      	ands	r3, r2
 800328c:	d063      	beq.n	8003356 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d12a      	bne.n	80032ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003296:	4b95      	ldr	r3, [pc, #596]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 8003298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800329a:	4b94      	ldr	r3, [pc, #592]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 800329c:	2104      	movs	r1, #4
 800329e:	430a      	orrs	r2, r1
 80032a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80032a2:	4b92      	ldr	r3, [pc, #584]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80032a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032a6:	4b91      	ldr	r3, [pc, #580]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80032a8:	2101      	movs	r1, #1
 80032aa:	430a      	orrs	r2, r1
 80032ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ae:	f7ff fbb9 	bl	8002a24 <HAL_GetTick>
 80032b2:	0003      	movs	r3, r0
 80032b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80032b8:	f7ff fbb4 	bl	8002a24 <HAL_GetTick>
 80032bc:	0002      	movs	r2, r0
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e152      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80032ca:	4b88      	ldr	r3, [pc, #544]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80032cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ce:	2202      	movs	r2, #2
 80032d0:	4013      	ands	r3, r2
 80032d2:	d0f1      	beq.n	80032b8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032d4:	4b85      	ldr	r3, [pc, #532]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80032d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d8:	22f8      	movs	r2, #248	; 0xf8
 80032da:	4393      	bics	r3, r2
 80032dc:	0019      	movs	r1, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	00da      	lsls	r2, r3, #3
 80032e4:	4b81      	ldr	r3, [pc, #516]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80032e6:	430a      	orrs	r2, r1
 80032e8:	635a      	str	r2, [r3, #52]	; 0x34
 80032ea:	e034      	b.n	8003356 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	3305      	adds	r3, #5
 80032f2:	d111      	bne.n	8003318 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80032f4:	4b7d      	ldr	r3, [pc, #500]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80032f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f8:	4b7c      	ldr	r3, [pc, #496]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80032fa:	2104      	movs	r1, #4
 80032fc:	438a      	bics	r2, r1
 80032fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003300:	4b7a      	ldr	r3, [pc, #488]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 8003302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003304:	22f8      	movs	r2, #248	; 0xf8
 8003306:	4393      	bics	r3, r2
 8003308:	0019      	movs	r1, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	00da      	lsls	r2, r3, #3
 8003310:	4b76      	ldr	r3, [pc, #472]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 8003312:	430a      	orrs	r2, r1
 8003314:	635a      	str	r2, [r3, #52]	; 0x34
 8003316:	e01e      	b.n	8003356 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003318:	4b74      	ldr	r3, [pc, #464]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 800331a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800331c:	4b73      	ldr	r3, [pc, #460]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 800331e:	2104      	movs	r1, #4
 8003320:	430a      	orrs	r2, r1
 8003322:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003324:	4b71      	ldr	r3, [pc, #452]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 8003326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003328:	4b70      	ldr	r3, [pc, #448]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 800332a:	2101      	movs	r1, #1
 800332c:	438a      	bics	r2, r1
 800332e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003330:	f7ff fb78 	bl	8002a24 <HAL_GetTick>
 8003334:	0003      	movs	r3, r0
 8003336:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800333a:	f7ff fb73 	bl	8002a24 <HAL_GetTick>
 800333e:	0002      	movs	r2, r0
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e111      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800334c:	4b67      	ldr	r3, [pc, #412]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 800334e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003350:	2202      	movs	r2, #2
 8003352:	4013      	ands	r3, r2
 8003354:	d1f1      	bne.n	800333a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2220      	movs	r2, #32
 800335c:	4013      	ands	r3, r2
 800335e:	d05c      	beq.n	800341a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003360:	4b62      	ldr	r3, [pc, #392]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	220c      	movs	r2, #12
 8003366:	4013      	ands	r3, r2
 8003368:	2b0c      	cmp	r3, #12
 800336a:	d00e      	beq.n	800338a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800336c:	4b5f      	ldr	r3, [pc, #380]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	220c      	movs	r2, #12
 8003372:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003374:	2b08      	cmp	r3, #8
 8003376:	d114      	bne.n	80033a2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003378:	4b5c      	ldr	r3, [pc, #368]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	23c0      	movs	r3, #192	; 0xc0
 800337e:	025b      	lsls	r3, r3, #9
 8003380:	401a      	ands	r2, r3
 8003382:	23c0      	movs	r3, #192	; 0xc0
 8003384:	025b      	lsls	r3, r3, #9
 8003386:	429a      	cmp	r2, r3
 8003388:	d10b      	bne.n	80033a2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800338a:	4b58      	ldr	r3, [pc, #352]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	029b      	lsls	r3, r3, #10
 8003392:	4013      	ands	r3, r2
 8003394:	d040      	beq.n	8003418 <HAL_RCC_OscConfig+0x5a8>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d03c      	beq.n	8003418 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e0e6      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d01b      	beq.n	80033e2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80033aa:	4b50      	ldr	r3, [pc, #320]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80033ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ae:	4b4f      	ldr	r3, [pc, #316]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80033b0:	2180      	movs	r1, #128	; 0x80
 80033b2:	0249      	lsls	r1, r1, #9
 80033b4:	430a      	orrs	r2, r1
 80033b6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7ff fb34 	bl	8002a24 <HAL_GetTick>
 80033bc:	0003      	movs	r3, r0
 80033be:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033c2:	f7ff fb2f 	bl	8002a24 <HAL_GetTick>
 80033c6:	0002      	movs	r2, r0
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e0cd      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80033d4:	4b45      	ldr	r3, [pc, #276]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80033d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	029b      	lsls	r3, r3, #10
 80033dc:	4013      	ands	r3, r2
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x552>
 80033e0:	e01b      	b.n	800341a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80033e2:	4b42      	ldr	r3, [pc, #264]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80033e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e6:	4b41      	ldr	r3, [pc, #260]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80033e8:	4943      	ldr	r1, [pc, #268]	; (80034f8 <HAL_RCC_OscConfig+0x688>)
 80033ea:	400a      	ands	r2, r1
 80033ec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ee:	f7ff fb19 	bl	8002a24 <HAL_GetTick>
 80033f2:	0003      	movs	r3, r0
 80033f4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033f8:	f7ff fb14 	bl	8002a24 <HAL_GetTick>
 80033fc:	0002      	movs	r2, r0
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e0b2      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800340a:	4b38      	ldr	r3, [pc, #224]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 800340c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	029b      	lsls	r3, r3, #10
 8003412:	4013      	ands	r3, r2
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x588>
 8003416:	e000      	b.n	800341a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003418:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	2b00      	cmp	r3, #0
 8003420:	d100      	bne.n	8003424 <HAL_RCC_OscConfig+0x5b4>
 8003422:	e0a4      	b.n	800356e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003424:	4b31      	ldr	r3, [pc, #196]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	220c      	movs	r2, #12
 800342a:	4013      	ands	r3, r2
 800342c:	2b08      	cmp	r3, #8
 800342e:	d100      	bne.n	8003432 <HAL_RCC_OscConfig+0x5c2>
 8003430:	e078      	b.n	8003524 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	2b02      	cmp	r3, #2
 8003438:	d14c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343a:	4b2c      	ldr	r3, [pc, #176]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b2b      	ldr	r3, [pc, #172]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 8003440:	492e      	ldr	r1, [pc, #184]	; (80034fc <HAL_RCC_OscConfig+0x68c>)
 8003442:	400a      	ands	r2, r1
 8003444:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003446:	f7ff faed 	bl	8002a24 <HAL_GetTick>
 800344a:	0003      	movs	r3, r0
 800344c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003450:	f7ff fae8 	bl	8002a24 <HAL_GetTick>
 8003454:	0002      	movs	r2, r0
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e086      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003462:	4b22      	ldr	r3, [pc, #136]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	2380      	movs	r3, #128	; 0x80
 8003468:	049b      	lsls	r3, r3, #18
 800346a:	4013      	ands	r3, r2
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800346e:	4b1f      	ldr	r3, [pc, #124]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	220f      	movs	r2, #15
 8003474:	4393      	bics	r3, r2
 8003476:	0019      	movs	r1, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800347c:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 800347e:	430a      	orrs	r2, r1
 8003480:	62da      	str	r2, [r3, #44]	; 0x2c
 8003482:	4b1a      	ldr	r3, [pc, #104]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4a1e      	ldr	r2, [pc, #120]	; (8003500 <HAL_RCC_OscConfig+0x690>)
 8003488:	4013      	ands	r3, r2
 800348a:	0019      	movs	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	431a      	orrs	r2, r3
 8003496:	4b15      	ldr	r3, [pc, #84]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800349c:	4b13      	ldr	r3, [pc, #76]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4b12      	ldr	r3, [pc, #72]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80034a2:	2180      	movs	r1, #128	; 0x80
 80034a4:	0449      	lsls	r1, r1, #17
 80034a6:	430a      	orrs	r2, r1
 80034a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034aa:	f7ff fabb 	bl	8002a24 <HAL_GetTick>
 80034ae:	0003      	movs	r3, r0
 80034b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b4:	f7ff fab6 	bl	8002a24 <HAL_GetTick>
 80034b8:	0002      	movs	r2, r0
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e054      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	049b      	lsls	r3, r3, #18
 80034ce:	4013      	ands	r3, r2
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x644>
 80034d2:	e04c      	b.n	800356e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <HAL_RCC_OscConfig+0x67c>)
 80034da:	4908      	ldr	r1, [pc, #32]	; (80034fc <HAL_RCC_OscConfig+0x68c>)
 80034dc:	400a      	ands	r2, r1
 80034de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7ff faa0 	bl	8002a24 <HAL_GetTick>
 80034e4:	0003      	movs	r3, r0
 80034e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e8:	e015      	b.n	8003516 <HAL_RCC_OscConfig+0x6a6>
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	40021000 	.word	0x40021000
 80034f0:	00001388 	.word	0x00001388
 80034f4:	efffffff 	.word	0xefffffff
 80034f8:	fffeffff 	.word	0xfffeffff
 80034fc:	feffffff 	.word	0xfeffffff
 8003500:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003504:	f7ff fa8e 	bl	8002a24 <HAL_GetTick>
 8003508:	0002      	movs	r2, r0
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e02c      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003516:	4b18      	ldr	r3, [pc, #96]	; (8003578 <HAL_RCC_OscConfig+0x708>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	2380      	movs	r3, #128	; 0x80
 800351c:	049b      	lsls	r3, r3, #18
 800351e:	4013      	ands	r3, r2
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x694>
 8003522:	e024      	b.n	800356e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e01f      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003530:	4b11      	ldr	r3, [pc, #68]	; (8003578 <HAL_RCC_OscConfig+0x708>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003536:	4b10      	ldr	r3, [pc, #64]	; (8003578 <HAL_RCC_OscConfig+0x708>)
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	23c0      	movs	r3, #192	; 0xc0
 8003540:	025b      	lsls	r3, r3, #9
 8003542:	401a      	ands	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	429a      	cmp	r2, r3
 800354a:	d10e      	bne.n	800356a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	220f      	movs	r2, #15
 8003550:	401a      	ands	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	429a      	cmp	r2, r3
 8003558:	d107      	bne.n	800356a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	23f0      	movs	r3, #240	; 0xf0
 800355e:	039b      	lsls	r3, r3, #14
 8003560:	401a      	ands	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d001      	beq.n	800356e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	b008      	add	sp, #32
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40021000 	.word	0x40021000

0800357c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0bf      	b.n	8003710 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003590:	4b61      	ldr	r3, [pc, #388]	; (8003718 <HAL_RCC_ClockConfig+0x19c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2201      	movs	r2, #1
 8003596:	4013      	ands	r3, r2
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d911      	bls.n	80035c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359e:	4b5e      	ldr	r3, [pc, #376]	; (8003718 <HAL_RCC_ClockConfig+0x19c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2201      	movs	r2, #1
 80035a4:	4393      	bics	r3, r2
 80035a6:	0019      	movs	r1, r3
 80035a8:	4b5b      	ldr	r3, [pc, #364]	; (8003718 <HAL_RCC_ClockConfig+0x19c>)
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b0:	4b59      	ldr	r3, [pc, #356]	; (8003718 <HAL_RCC_ClockConfig+0x19c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2201      	movs	r2, #1
 80035b6:	4013      	ands	r3, r2
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d001      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e0a6      	b.n	8003710 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2202      	movs	r2, #2
 80035c8:	4013      	ands	r3, r2
 80035ca:	d015      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2204      	movs	r2, #4
 80035d2:	4013      	ands	r3, r2
 80035d4:	d006      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035d6:	4b51      	ldr	r3, [pc, #324]	; (800371c <HAL_RCC_ClockConfig+0x1a0>)
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	4b50      	ldr	r3, [pc, #320]	; (800371c <HAL_RCC_ClockConfig+0x1a0>)
 80035dc:	21e0      	movs	r1, #224	; 0xe0
 80035de:	00c9      	lsls	r1, r1, #3
 80035e0:	430a      	orrs	r2, r1
 80035e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e4:	4b4d      	ldr	r3, [pc, #308]	; (800371c <HAL_RCC_ClockConfig+0x1a0>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	22f0      	movs	r2, #240	; 0xf0
 80035ea:	4393      	bics	r3, r2
 80035ec:	0019      	movs	r1, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	4b4a      	ldr	r3, [pc, #296]	; (800371c <HAL_RCC_ClockConfig+0x1a0>)
 80035f4:	430a      	orrs	r2, r1
 80035f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2201      	movs	r2, #1
 80035fe:	4013      	ands	r3, r2
 8003600:	d04c      	beq.n	800369c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d107      	bne.n	800361a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360a:	4b44      	ldr	r3, [pc, #272]	; (800371c <HAL_RCC_ClockConfig+0x1a0>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	029b      	lsls	r3, r3, #10
 8003612:	4013      	ands	r3, r2
 8003614:	d120      	bne.n	8003658 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e07a      	b.n	8003710 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d107      	bne.n	8003632 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003622:	4b3e      	ldr	r3, [pc, #248]	; (800371c <HAL_RCC_ClockConfig+0x1a0>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	049b      	lsls	r3, r3, #18
 800362a:	4013      	ands	r3, r2
 800362c:	d114      	bne.n	8003658 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e06e      	b.n	8003710 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d107      	bne.n	800364a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800363a:	4b38      	ldr	r3, [pc, #224]	; (800371c <HAL_RCC_ClockConfig+0x1a0>)
 800363c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800363e:	2380      	movs	r3, #128	; 0x80
 8003640:	029b      	lsls	r3, r3, #10
 8003642:	4013      	ands	r3, r2
 8003644:	d108      	bne.n	8003658 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e062      	b.n	8003710 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364a:	4b34      	ldr	r3, [pc, #208]	; (800371c <HAL_RCC_ClockConfig+0x1a0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2202      	movs	r2, #2
 8003650:	4013      	ands	r3, r2
 8003652:	d101      	bne.n	8003658 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e05b      	b.n	8003710 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003658:	4b30      	ldr	r3, [pc, #192]	; (800371c <HAL_RCC_ClockConfig+0x1a0>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2203      	movs	r2, #3
 800365e:	4393      	bics	r3, r2
 8003660:	0019      	movs	r1, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	4b2d      	ldr	r3, [pc, #180]	; (800371c <HAL_RCC_ClockConfig+0x1a0>)
 8003668:	430a      	orrs	r2, r1
 800366a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800366c:	f7ff f9da 	bl	8002a24 <HAL_GetTick>
 8003670:	0003      	movs	r3, r0
 8003672:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003674:	e009      	b.n	800368a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003676:	f7ff f9d5 	bl	8002a24 <HAL_GetTick>
 800367a:	0002      	movs	r2, r0
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	4a27      	ldr	r2, [pc, #156]	; (8003720 <HAL_RCC_ClockConfig+0x1a4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d901      	bls.n	800368a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e042      	b.n	8003710 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	4b24      	ldr	r3, [pc, #144]	; (800371c <HAL_RCC_ClockConfig+0x1a0>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	220c      	movs	r2, #12
 8003690:	401a      	ands	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	429a      	cmp	r2, r3
 800369a:	d1ec      	bne.n	8003676 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800369c:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <HAL_RCC_ClockConfig+0x19c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2201      	movs	r2, #1
 80036a2:	4013      	ands	r3, r2
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d211      	bcs.n	80036ce <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036aa:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <HAL_RCC_ClockConfig+0x19c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2201      	movs	r2, #1
 80036b0:	4393      	bics	r3, r2
 80036b2:	0019      	movs	r1, r3
 80036b4:	4b18      	ldr	r3, [pc, #96]	; (8003718 <HAL_RCC_ClockConfig+0x19c>)
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036bc:	4b16      	ldr	r3, [pc, #88]	; (8003718 <HAL_RCC_ClockConfig+0x19c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2201      	movs	r2, #1
 80036c2:	4013      	ands	r3, r2
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d001      	beq.n	80036ce <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e020      	b.n	8003710 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2204      	movs	r2, #4
 80036d4:	4013      	ands	r3, r2
 80036d6:	d009      	beq.n	80036ec <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036d8:	4b10      	ldr	r3, [pc, #64]	; (800371c <HAL_RCC_ClockConfig+0x1a0>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4a11      	ldr	r2, [pc, #68]	; (8003724 <HAL_RCC_ClockConfig+0x1a8>)
 80036de:	4013      	ands	r3, r2
 80036e0:	0019      	movs	r1, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	4b0d      	ldr	r3, [pc, #52]	; (800371c <HAL_RCC_ClockConfig+0x1a0>)
 80036e8:	430a      	orrs	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036ec:	f000 f820 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 80036f0:	0001      	movs	r1, r0
 80036f2:	4b0a      	ldr	r3, [pc, #40]	; (800371c <HAL_RCC_ClockConfig+0x1a0>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	091b      	lsrs	r3, r3, #4
 80036f8:	220f      	movs	r2, #15
 80036fa:	4013      	ands	r3, r2
 80036fc:	4a0a      	ldr	r2, [pc, #40]	; (8003728 <HAL_RCC_ClockConfig+0x1ac>)
 80036fe:	5cd3      	ldrb	r3, [r2, r3]
 8003700:	000a      	movs	r2, r1
 8003702:	40da      	lsrs	r2, r3
 8003704:	4b09      	ldr	r3, [pc, #36]	; (800372c <HAL_RCC_ClockConfig+0x1b0>)
 8003706:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003708:	2000      	movs	r0, #0
 800370a:	f7ff f945 	bl	8002998 <HAL_InitTick>
  
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	0018      	movs	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	b004      	add	sp, #16
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40022000 	.word	0x40022000
 800371c:	40021000 	.word	0x40021000
 8003720:	00001388 	.word	0x00001388
 8003724:	fffff8ff 	.word	0xfffff8ff
 8003728:	08004394 	.word	0x08004394
 800372c:	20000554 	.word	0x20000554

08003730 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	2300      	movs	r3, #0
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	2300      	movs	r3, #0
 8003744:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800374a:	4b2d      	ldr	r3, [pc, #180]	; (8003800 <HAL_RCC_GetSysClockFreq+0xd0>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	220c      	movs	r2, #12
 8003754:	4013      	ands	r3, r2
 8003756:	2b0c      	cmp	r3, #12
 8003758:	d046      	beq.n	80037e8 <HAL_RCC_GetSysClockFreq+0xb8>
 800375a:	d848      	bhi.n	80037ee <HAL_RCC_GetSysClockFreq+0xbe>
 800375c:	2b04      	cmp	r3, #4
 800375e:	d002      	beq.n	8003766 <HAL_RCC_GetSysClockFreq+0x36>
 8003760:	2b08      	cmp	r3, #8
 8003762:	d003      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0x3c>
 8003764:	e043      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003766:	4b27      	ldr	r3, [pc, #156]	; (8003804 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003768:	613b      	str	r3, [r7, #16]
      break;
 800376a:	e043      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	0c9b      	lsrs	r3, r3, #18
 8003770:	220f      	movs	r2, #15
 8003772:	4013      	ands	r3, r2
 8003774:	4a24      	ldr	r2, [pc, #144]	; (8003808 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003776:	5cd3      	ldrb	r3, [r2, r3]
 8003778:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800377a:	4b21      	ldr	r3, [pc, #132]	; (8003800 <HAL_RCC_GetSysClockFreq+0xd0>)
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	220f      	movs	r2, #15
 8003780:	4013      	ands	r3, r2
 8003782:	4a22      	ldr	r2, [pc, #136]	; (800380c <HAL_RCC_GetSysClockFreq+0xdc>)
 8003784:	5cd3      	ldrb	r3, [r2, r3]
 8003786:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	23c0      	movs	r3, #192	; 0xc0
 800378c:	025b      	lsls	r3, r3, #9
 800378e:	401a      	ands	r2, r3
 8003790:	2380      	movs	r3, #128	; 0x80
 8003792:	025b      	lsls	r3, r3, #9
 8003794:	429a      	cmp	r2, r3
 8003796:	d109      	bne.n	80037ac <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	481a      	ldr	r0, [pc, #104]	; (8003804 <HAL_RCC_GetSysClockFreq+0xd4>)
 800379c:	f7fc fcb4 	bl	8000108 <__udivsi3>
 80037a0:	0003      	movs	r3, r0
 80037a2:	001a      	movs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4353      	muls	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	e01a      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	23c0      	movs	r3, #192	; 0xc0
 80037b0:	025b      	lsls	r3, r3, #9
 80037b2:	401a      	ands	r2, r3
 80037b4:	23c0      	movs	r3, #192	; 0xc0
 80037b6:	025b      	lsls	r3, r3, #9
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d109      	bne.n	80037d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	4814      	ldr	r0, [pc, #80]	; (8003810 <HAL_RCC_GetSysClockFreq+0xe0>)
 80037c0:	f7fc fca2 	bl	8000108 <__udivsi3>
 80037c4:	0003      	movs	r3, r0
 80037c6:	001a      	movs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4353      	muls	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037d0:	68b9      	ldr	r1, [r7, #8]
 80037d2:	480c      	ldr	r0, [pc, #48]	; (8003804 <HAL_RCC_GetSysClockFreq+0xd4>)
 80037d4:	f7fc fc98 	bl	8000108 <__udivsi3>
 80037d8:	0003      	movs	r3, r0
 80037da:	001a      	movs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4353      	muls	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	613b      	str	r3, [r7, #16]
      break;
 80037e6:	e005      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80037e8:	4b09      	ldr	r3, [pc, #36]	; (8003810 <HAL_RCC_GetSysClockFreq+0xe0>)
 80037ea:	613b      	str	r3, [r7, #16]
      break;
 80037ec:	e002      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCC_GetSysClockFreq+0xd4>)
 80037f0:	613b      	str	r3, [r7, #16]
      break;
 80037f2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037f4:	693b      	ldr	r3, [r7, #16]
}
 80037f6:	0018      	movs	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	b006      	add	sp, #24
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	40021000 	.word	0x40021000
 8003804:	007a1200 	.word	0x007a1200
 8003808:	080043ac 	.word	0x080043ac
 800380c:	080043bc 	.word	0x080043bc
 8003810:	02dc6c00 	.word	0x02dc6c00

08003814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003818:	4b02      	ldr	r3, [pc, #8]	; (8003824 <HAL_RCC_GetHCLKFreq+0x10>)
 800381a:	681b      	ldr	r3, [r3, #0]
}
 800381c:	0018      	movs	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	20000554 	.word	0x20000554

08003828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800382c:	f7ff fff2 	bl	8003814 <HAL_RCC_GetHCLKFreq>
 8003830:	0001      	movs	r1, r0
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	0a1b      	lsrs	r3, r3, #8
 8003838:	2207      	movs	r2, #7
 800383a:	4013      	ands	r3, r2
 800383c:	4a04      	ldr	r2, [pc, #16]	; (8003850 <HAL_RCC_GetPCLK1Freq+0x28>)
 800383e:	5cd3      	ldrb	r3, [r2, r3]
 8003840:	40d9      	lsrs	r1, r3
 8003842:	000b      	movs	r3, r1
}    
 8003844:	0018      	movs	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	40021000 	.word	0x40021000
 8003850:	080043a4 	.word	0x080043a4

08003854 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e044      	b.n	80038f0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d107      	bne.n	800387e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2278      	movs	r2, #120	; 0x78
 8003872:	2100      	movs	r1, #0
 8003874:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	0018      	movs	r0, r3
 800387a:	f7fe ffab 	bl	80027d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2224      	movs	r2, #36	; 0x24
 8003882:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2101      	movs	r1, #1
 8003890:	438a      	bics	r2, r1
 8003892:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	0018      	movs	r0, r3
 8003898:	f000 f9b8 	bl	8003c0c <UART_SetConfig>
 800389c:	0003      	movs	r3, r0
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e024      	b.n	80038f0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	0018      	movs	r0, r3
 80038b2:	f000 faeb 	bl	8003e8c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	490d      	ldr	r1, [pc, #52]	; (80038f8 <HAL_UART_Init+0xa4>)
 80038c2:	400a      	ands	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	212a      	movs	r1, #42	; 0x2a
 80038d2:	438a      	bics	r2, r1
 80038d4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2101      	movs	r1, #1
 80038e2:	430a      	orrs	r2, r1
 80038e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	0018      	movs	r0, r3
 80038ea:	f000 fb83 	bl	8003ff4 <UART_CheckIdleState>
 80038ee:	0003      	movs	r3, r0
}
 80038f0:	0018      	movs	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b002      	add	sp, #8
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	ffffb7ff 	.word	0xffffb7ff

080038fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08a      	sub	sp, #40	; 0x28
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	1dbb      	adds	r3, r7, #6
 800390a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003910:	2b20      	cmp	r3, #32
 8003912:	d000      	beq.n	8003916 <HAL_UART_Transmit+0x1a>
 8003914:	e08d      	b.n	8003a32 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_UART_Transmit+0x28>
 800391c:	1dbb      	adds	r3, r7, #6
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e085      	b.n	8003a34 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	015b      	lsls	r3, r3, #5
 8003930:	429a      	cmp	r2, r3
 8003932:	d109      	bne.n	8003948 <HAL_UART_Transmit+0x4c>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d105      	bne.n	8003948 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2201      	movs	r2, #1
 8003940:	4013      	ands	r3, r2
 8003942:	d001      	beq.n	8003948 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e075      	b.n	8003a34 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2284      	movs	r2, #132	; 0x84
 800394c:	2100      	movs	r1, #0
 800394e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2221      	movs	r2, #33	; 0x21
 8003954:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003956:	f7ff f865 	bl	8002a24 <HAL_GetTick>
 800395a:	0003      	movs	r3, r0
 800395c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1dba      	adds	r2, r7, #6
 8003962:	2150      	movs	r1, #80	; 0x50
 8003964:	8812      	ldrh	r2, [r2, #0]
 8003966:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1dba      	adds	r2, r7, #6
 800396c:	2152      	movs	r1, #82	; 0x52
 800396e:	8812      	ldrh	r2, [r2, #0]
 8003970:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	015b      	lsls	r3, r3, #5
 800397a:	429a      	cmp	r2, r3
 800397c:	d108      	bne.n	8003990 <HAL_UART_Transmit+0x94>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d104      	bne.n	8003990 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	e003      	b.n	8003998 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003994:	2300      	movs	r3, #0
 8003996:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003998:	e030      	b.n	80039fc <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	0013      	movs	r3, r2
 80039a4:	2200      	movs	r2, #0
 80039a6:	2180      	movs	r1, #128	; 0x80
 80039a8:	f000 fbcc 	bl	8004144 <UART_WaitOnFlagUntilTimeout>
 80039ac:	1e03      	subs	r3, r0, #0
 80039ae:	d004      	beq.n	80039ba <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e03c      	b.n	8003a34 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10b      	bne.n	80039d8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	881a      	ldrh	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	05d2      	lsls	r2, r2, #23
 80039ca:	0dd2      	lsrs	r2, r2, #23
 80039cc:	b292      	uxth	r2, r2
 80039ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	3302      	adds	r3, #2
 80039d4:	61bb      	str	r3, [r7, #24]
 80039d6:	e008      	b.n	80039ea <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	781a      	ldrb	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	b292      	uxth	r2, r2
 80039e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	3301      	adds	r3, #1
 80039e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2252      	movs	r2, #82	; 0x52
 80039ee:	5a9b      	ldrh	r3, [r3, r2]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b299      	uxth	r1, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2252      	movs	r2, #82	; 0x52
 80039fa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2252      	movs	r2, #82	; 0x52
 8003a00:	5a9b      	ldrh	r3, [r3, r2]
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1c8      	bne.n	800399a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	0013      	movs	r3, r2
 8003a12:	2200      	movs	r2, #0
 8003a14:	2140      	movs	r1, #64	; 0x40
 8003a16:	f000 fb95 	bl	8004144 <UART_WaitOnFlagUntilTimeout>
 8003a1a:	1e03      	subs	r3, r0, #0
 8003a1c:	d004      	beq.n	8003a28 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e005      	b.n	8003a34 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e000      	b.n	8003a34 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8003a32:	2302      	movs	r3, #2
  }
}
 8003a34:	0018      	movs	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b008      	add	sp, #32
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	; 0x28
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	1dbb      	adds	r3, r7, #6
 8003a4a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2280      	movs	r2, #128	; 0x80
 8003a50:	589b      	ldr	r3, [r3, r2]
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	d000      	beq.n	8003a58 <HAL_UART_Receive+0x1c>
 8003a56:	e0d1      	b.n	8003bfc <HAL_UART_Receive+0x1c0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_UART_Receive+0x2a>
 8003a5e:	1dbb      	adds	r3, r7, #6
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e0c9      	b.n	8003bfe <HAL_UART_Receive+0x1c2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	015b      	lsls	r3, r3, #5
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d109      	bne.n	8003a8a <HAL_UART_Receive+0x4e>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d105      	bne.n	8003a8a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2201      	movs	r2, #1
 8003a82:	4013      	ands	r3, r2
 8003a84:	d001      	beq.n	8003a8a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e0b9      	b.n	8003bfe <HAL_UART_Receive+0x1c2>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2284      	movs	r2, #132	; 0x84
 8003a8e:	2100      	movs	r1, #0
 8003a90:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2280      	movs	r2, #128	; 0x80
 8003a96:	2122      	movs	r1, #34	; 0x22
 8003a98:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aa0:	f7fe ffc0 	bl	8002a24 <HAL_GetTick>
 8003aa4:	0003      	movs	r3, r0
 8003aa6:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	1dba      	adds	r2, r7, #6
 8003aac:	2158      	movs	r1, #88	; 0x58
 8003aae:	8812      	ldrh	r2, [r2, #0]
 8003ab0:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1dba      	adds	r2, r7, #6
 8003ab6:	215a      	movs	r1, #90	; 0x5a
 8003ab8:	8812      	ldrh	r2, [r2, #0]
 8003aba:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	2380      	movs	r3, #128	; 0x80
 8003ac2:	015b      	lsls	r3, r3, #5
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d10d      	bne.n	8003ae4 <HAL_UART_Receive+0xa8>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d104      	bne.n	8003ada <HAL_UART_Receive+0x9e>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	225c      	movs	r2, #92	; 0x5c
 8003ad4:	494c      	ldr	r1, [pc, #304]	; (8003c08 <HAL_UART_Receive+0x1cc>)
 8003ad6:	5299      	strh	r1, [r3, r2]
 8003ad8:	e02e      	b.n	8003b38 <HAL_UART_Receive+0xfc>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	225c      	movs	r2, #92	; 0x5c
 8003ade:	21ff      	movs	r1, #255	; 0xff
 8003ae0:	5299      	strh	r1, [r3, r2]
 8003ae2:	e029      	b.n	8003b38 <HAL_UART_Receive+0xfc>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10d      	bne.n	8003b08 <HAL_UART_Receive+0xcc>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d104      	bne.n	8003afe <HAL_UART_Receive+0xc2>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	225c      	movs	r2, #92	; 0x5c
 8003af8:	21ff      	movs	r1, #255	; 0xff
 8003afa:	5299      	strh	r1, [r3, r2]
 8003afc:	e01c      	b.n	8003b38 <HAL_UART_Receive+0xfc>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	225c      	movs	r2, #92	; 0x5c
 8003b02:	217f      	movs	r1, #127	; 0x7f
 8003b04:	5299      	strh	r1, [r3, r2]
 8003b06:	e017      	b.n	8003b38 <HAL_UART_Receive+0xfc>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	055b      	lsls	r3, r3, #21
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d10d      	bne.n	8003b30 <HAL_UART_Receive+0xf4>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d104      	bne.n	8003b26 <HAL_UART_Receive+0xea>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	225c      	movs	r2, #92	; 0x5c
 8003b20:	217f      	movs	r1, #127	; 0x7f
 8003b22:	5299      	strh	r1, [r3, r2]
 8003b24:	e008      	b.n	8003b38 <HAL_UART_Receive+0xfc>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	225c      	movs	r2, #92	; 0x5c
 8003b2a:	213f      	movs	r1, #63	; 0x3f
 8003b2c:	5299      	strh	r1, [r3, r2]
 8003b2e:	e003      	b.n	8003b38 <HAL_UART_Receive+0xfc>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	225c      	movs	r2, #92	; 0x5c
 8003b34:	2100      	movs	r1, #0
 8003b36:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003b38:	2312      	movs	r3, #18
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	215c      	movs	r1, #92	; 0x5c
 8003b40:	5a52      	ldrh	r2, [r2, r1]
 8003b42:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	015b      	lsls	r3, r3, #5
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d108      	bne.n	8003b62 <HAL_UART_Receive+0x126>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d104      	bne.n	8003b62 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	e003      	b.n	8003b6a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003b6a:	e03b      	b.n	8003be4 <HAL_UART_Receive+0x1a8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	0013      	movs	r3, r2
 8003b76:	2200      	movs	r2, #0
 8003b78:	2120      	movs	r1, #32
 8003b7a:	f000 fae3 	bl	8004144 <UART_WaitOnFlagUntilTimeout>
 8003b7e:	1e03      	subs	r3, r0, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2280      	movs	r2, #128	; 0x80
 8003b86:	2120      	movs	r1, #32
 8003b88:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e037      	b.n	8003bfe <HAL_UART_Receive+0x1c2>
      }
      if (pdata8bits == NULL)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10e      	bne.n	8003bb2 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2212      	movs	r2, #18
 8003b9e:	18ba      	adds	r2, r7, r2
 8003ba0:	8812      	ldrh	r2, [r2, #0]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	3302      	adds	r3, #2
 8003bae:	61bb      	str	r3, [r7, #24]
 8003bb0:	e00f      	b.n	8003bd2 <HAL_UART_Receive+0x196>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2212      	movs	r2, #18
 8003bbe:	18ba      	adds	r2, r7, r2
 8003bc0:	8812      	ldrh	r2, [r2, #0]
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	225a      	movs	r2, #90	; 0x5a
 8003bd6:	5a9b      	ldrh	r3, [r3, r2]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b299      	uxth	r1, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	225a      	movs	r2, #90	; 0x5a
 8003be2:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	225a      	movs	r2, #90	; 0x5a
 8003be8:	5a9b      	ldrh	r3, [r3, r2]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1bd      	bne.n	8003b6c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2280      	movs	r2, #128	; 0x80
 8003bf4:	2120      	movs	r1, #32
 8003bf6:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	e000      	b.n	8003bfe <HAL_UART_Receive+0x1c2>
  }
  else
  {
    return HAL_BUSY;
 8003bfc:	2302      	movs	r3, #2
  }
}
 8003bfe:	0018      	movs	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b008      	add	sp, #32
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	000001ff 	.word	0x000001ff

08003c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c14:	231e      	movs	r3, #30
 8003c16:	18fb      	adds	r3, r7, r3
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a8d      	ldr	r2, [pc, #564]	; (8003e70 <UART_SetConfig+0x264>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	0019      	movs	r1, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	4a88      	ldr	r2, [pc, #544]	; (8003e74 <UART_SetConfig+0x268>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	0019      	movs	r1, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4a7f      	ldr	r2, [pc, #508]	; (8003e78 <UART_SetConfig+0x26c>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	0019      	movs	r1, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a7b      	ldr	r2, [pc, #492]	; (8003e7c <UART_SetConfig+0x270>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d127      	bne.n	8003ce2 <UART_SetConfig+0xd6>
 8003c92:	4b7b      	ldr	r3, [pc, #492]	; (8003e80 <UART_SetConfig+0x274>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	2203      	movs	r2, #3
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d00d      	beq.n	8003cba <UART_SetConfig+0xae>
 8003c9e:	d81b      	bhi.n	8003cd8 <UART_SetConfig+0xcc>
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d014      	beq.n	8003cce <UART_SetConfig+0xc2>
 8003ca4:	d818      	bhi.n	8003cd8 <UART_SetConfig+0xcc>
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <UART_SetConfig+0xa4>
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d00a      	beq.n	8003cc4 <UART_SetConfig+0xb8>
 8003cae:	e013      	b.n	8003cd8 <UART_SetConfig+0xcc>
 8003cb0:	231f      	movs	r3, #31
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	e021      	b.n	8003cfe <UART_SetConfig+0xf2>
 8003cba:	231f      	movs	r3, #31
 8003cbc:	18fb      	adds	r3, r7, r3
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	e01c      	b.n	8003cfe <UART_SetConfig+0xf2>
 8003cc4:	231f      	movs	r3, #31
 8003cc6:	18fb      	adds	r3, r7, r3
 8003cc8:	2204      	movs	r2, #4
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	e017      	b.n	8003cfe <UART_SetConfig+0xf2>
 8003cce:	231f      	movs	r3, #31
 8003cd0:	18fb      	adds	r3, r7, r3
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	701a      	strb	r2, [r3, #0]
 8003cd6:	e012      	b.n	8003cfe <UART_SetConfig+0xf2>
 8003cd8:	231f      	movs	r3, #31
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	2210      	movs	r2, #16
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	e00d      	b.n	8003cfe <UART_SetConfig+0xf2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a67      	ldr	r2, [pc, #412]	; (8003e84 <UART_SetConfig+0x278>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d104      	bne.n	8003cf6 <UART_SetConfig+0xea>
 8003cec:	231f      	movs	r3, #31
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
 8003cf4:	e003      	b.n	8003cfe <UART_SetConfig+0xf2>
 8003cf6:	231f      	movs	r3, #31
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	2210      	movs	r2, #16
 8003cfc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69da      	ldr	r2, [r3, #28]
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	021b      	lsls	r3, r3, #8
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d15c      	bne.n	8003dc4 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003d0a:	231f      	movs	r3, #31
 8003d0c:	18fb      	adds	r3, r7, r3
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d015      	beq.n	8003d40 <UART_SetConfig+0x134>
 8003d14:	dc18      	bgt.n	8003d48 <UART_SetConfig+0x13c>
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d00d      	beq.n	8003d36 <UART_SetConfig+0x12a>
 8003d1a:	dc15      	bgt.n	8003d48 <UART_SetConfig+0x13c>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <UART_SetConfig+0x11a>
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d005      	beq.n	8003d30 <UART_SetConfig+0x124>
 8003d24:	e010      	b.n	8003d48 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d26:	f7ff fd7f 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8003d2a:	0003      	movs	r3, r0
 8003d2c:	61bb      	str	r3, [r7, #24]
        break;
 8003d2e:	e012      	b.n	8003d56 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d30:	4b55      	ldr	r3, [pc, #340]	; (8003e88 <UART_SetConfig+0x27c>)
 8003d32:	61bb      	str	r3, [r7, #24]
        break;
 8003d34:	e00f      	b.n	8003d56 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d36:	f7ff fcfb 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	61bb      	str	r3, [r7, #24]
        break;
 8003d3e:	e00a      	b.n	8003d56 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	61bb      	str	r3, [r7, #24]
        break;
 8003d46:	e006      	b.n	8003d56 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d4c:	231e      	movs	r3, #30
 8003d4e:	18fb      	adds	r3, r7, r3
 8003d50:	2201      	movs	r2, #1
 8003d52:	701a      	strb	r2, [r3, #0]
        break;
 8003d54:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d100      	bne.n	8003d5e <UART_SetConfig+0x152>
 8003d5c:	e07a      	b.n	8003e54 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	005a      	lsls	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	085b      	lsrs	r3, r3, #1
 8003d68:	18d2      	adds	r2, r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	0019      	movs	r1, r3
 8003d70:	0010      	movs	r0, r2
 8003d72:	f7fc f9c9 	bl	8000108 <__udivsi3>
 8003d76:	0003      	movs	r3, r0
 8003d78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b0f      	cmp	r3, #15
 8003d7e:	d91c      	bls.n	8003dba <UART_SetConfig+0x1ae>
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	2380      	movs	r3, #128	; 0x80
 8003d84:	025b      	lsls	r3, r3, #9
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d217      	bcs.n	8003dba <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	200e      	movs	r0, #14
 8003d90:	183b      	adds	r3, r7, r0
 8003d92:	210f      	movs	r1, #15
 8003d94:	438a      	bics	r2, r1
 8003d96:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	085b      	lsrs	r3, r3, #1
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2207      	movs	r2, #7
 8003da0:	4013      	ands	r3, r2
 8003da2:	b299      	uxth	r1, r3
 8003da4:	183b      	adds	r3, r7, r0
 8003da6:	183a      	adds	r2, r7, r0
 8003da8:	8812      	ldrh	r2, [r2, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	183a      	adds	r2, r7, r0
 8003db4:	8812      	ldrh	r2, [r2, #0]
 8003db6:	60da      	str	r2, [r3, #12]
 8003db8:	e04c      	b.n	8003e54 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003dba:	231e      	movs	r3, #30
 8003dbc:	18fb      	adds	r3, r7, r3
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	e047      	b.n	8003e54 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dc4:	231f      	movs	r3, #31
 8003dc6:	18fb      	adds	r3, r7, r3
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d015      	beq.n	8003dfa <UART_SetConfig+0x1ee>
 8003dce:	dc18      	bgt.n	8003e02 <UART_SetConfig+0x1f6>
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d00d      	beq.n	8003df0 <UART_SetConfig+0x1e4>
 8003dd4:	dc15      	bgt.n	8003e02 <UART_SetConfig+0x1f6>
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <UART_SetConfig+0x1d4>
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d005      	beq.n	8003dea <UART_SetConfig+0x1de>
 8003dde:	e010      	b.n	8003e02 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de0:	f7ff fd22 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8003de4:	0003      	movs	r3, r0
 8003de6:	61bb      	str	r3, [r7, #24]
        break;
 8003de8:	e012      	b.n	8003e10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dea:	4b27      	ldr	r3, [pc, #156]	; (8003e88 <UART_SetConfig+0x27c>)
 8003dec:	61bb      	str	r3, [r7, #24]
        break;
 8003dee:	e00f      	b.n	8003e10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df0:	f7ff fc9e 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 8003df4:	0003      	movs	r3, r0
 8003df6:	61bb      	str	r3, [r7, #24]
        break;
 8003df8:	e00a      	b.n	8003e10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	021b      	lsls	r3, r3, #8
 8003dfe:	61bb      	str	r3, [r7, #24]
        break;
 8003e00:	e006      	b.n	8003e10 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e06:	231e      	movs	r3, #30
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	701a      	strb	r2, [r3, #0]
        break;
 8003e0e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d01e      	beq.n	8003e54 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	085a      	lsrs	r2, r3, #1
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	18d2      	adds	r2, r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	0019      	movs	r1, r3
 8003e26:	0010      	movs	r0, r2
 8003e28:	f7fc f96e 	bl	8000108 <__udivsi3>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b0f      	cmp	r3, #15
 8003e34:	d90a      	bls.n	8003e4c <UART_SetConfig+0x240>
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	2380      	movs	r3, #128	; 0x80
 8003e3a:	025b      	lsls	r3, r3, #9
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d205      	bcs.n	8003e4c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60da      	str	r2, [r3, #12]
 8003e4a:	e003      	b.n	8003e54 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003e4c:	231e      	movs	r3, #30
 8003e4e:	18fb      	adds	r3, r7, r3
 8003e50:	2201      	movs	r2, #1
 8003e52:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003e60:	231e      	movs	r3, #30
 8003e62:	18fb      	adds	r3, r7, r3
 8003e64:	781b      	ldrb	r3, [r3, #0]
}
 8003e66:	0018      	movs	r0, r3
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	b008      	add	sp, #32
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	efff69f3 	.word	0xefff69f3
 8003e74:	ffffcfff 	.word	0xffffcfff
 8003e78:	fffff4ff 	.word	0xfffff4ff
 8003e7c:	40013800 	.word	0x40013800
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40004400 	.word	0x40004400
 8003e88:	007a1200 	.word	0x007a1200

08003e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	2201      	movs	r2, #1
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d00b      	beq.n	8003eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	4a4a      	ldr	r2, [pc, #296]	; (8003fd0 <UART_AdvFeatureConfig+0x144>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	0019      	movs	r1, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	2202      	movs	r2, #2
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	d00b      	beq.n	8003ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	4a43      	ldr	r2, [pc, #268]	; (8003fd4 <UART_AdvFeatureConfig+0x148>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	0019      	movs	r1, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	2204      	movs	r2, #4
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d00b      	beq.n	8003efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	4a3b      	ldr	r2, [pc, #236]	; (8003fd8 <UART_AdvFeatureConfig+0x14c>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	0019      	movs	r1, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	2208      	movs	r2, #8
 8003f00:	4013      	ands	r3, r2
 8003f02:	d00b      	beq.n	8003f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	4a34      	ldr	r2, [pc, #208]	; (8003fdc <UART_AdvFeatureConfig+0x150>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	0019      	movs	r1, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	2210      	movs	r2, #16
 8003f22:	4013      	ands	r3, r2
 8003f24:	d00b      	beq.n	8003f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a2c      	ldr	r2, [pc, #176]	; (8003fe0 <UART_AdvFeatureConfig+0x154>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	0019      	movs	r1, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	2220      	movs	r2, #32
 8003f44:	4013      	ands	r3, r2
 8003f46:	d00b      	beq.n	8003f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	4a25      	ldr	r2, [pc, #148]	; (8003fe4 <UART_AdvFeatureConfig+0x158>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	0019      	movs	r1, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	2240      	movs	r2, #64	; 0x40
 8003f66:	4013      	ands	r3, r2
 8003f68:	d01d      	beq.n	8003fa6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	4a1d      	ldr	r2, [pc, #116]	; (8003fe8 <UART_AdvFeatureConfig+0x15c>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	0019      	movs	r1, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f86:	2380      	movs	r3, #128	; 0x80
 8003f88:	035b      	lsls	r3, r3, #13
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d10b      	bne.n	8003fa6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4a15      	ldr	r2, [pc, #84]	; (8003fec <UART_AdvFeatureConfig+0x160>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	0019      	movs	r1, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	2280      	movs	r2, #128	; 0x80
 8003fac:	4013      	ands	r3, r2
 8003fae:	d00b      	beq.n	8003fc8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <UART_AdvFeatureConfig+0x164>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	0019      	movs	r1, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	605a      	str	r2, [r3, #4]
  }
}
 8003fc8:	46c0      	nop			; (mov r8, r8)
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b002      	add	sp, #8
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	fffdffff 	.word	0xfffdffff
 8003fd4:	fffeffff 	.word	0xfffeffff
 8003fd8:	fffbffff 	.word	0xfffbffff
 8003fdc:	ffff7fff 	.word	0xffff7fff
 8003fe0:	ffffefff 	.word	0xffffefff
 8003fe4:	ffffdfff 	.word	0xffffdfff
 8003fe8:	ffefffff 	.word	0xffefffff
 8003fec:	ff9fffff 	.word	0xff9fffff
 8003ff0:	fff7ffff 	.word	0xfff7ffff

08003ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b092      	sub	sp, #72	; 0x48
 8003ff8:	af02      	add	r7, sp, #8
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2284      	movs	r2, #132	; 0x84
 8004000:	2100      	movs	r1, #0
 8004002:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004004:	f7fe fd0e 	bl	8002a24 <HAL_GetTick>
 8004008:	0003      	movs	r3, r0
 800400a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2208      	movs	r2, #8
 8004014:	4013      	ands	r3, r2
 8004016:	2b08      	cmp	r3, #8
 8004018:	d12c      	bne.n	8004074 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800401a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800401c:	2280      	movs	r2, #128	; 0x80
 800401e:	0391      	lsls	r1, r2, #14
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	4a46      	ldr	r2, [pc, #280]	; (800413c <UART_CheckIdleState+0x148>)
 8004024:	9200      	str	r2, [sp, #0]
 8004026:	2200      	movs	r2, #0
 8004028:	f000 f88c 	bl	8004144 <UART_WaitOnFlagUntilTimeout>
 800402c:	1e03      	subs	r3, r0, #0
 800402e:	d021      	beq.n	8004074 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004030:	f3ef 8310 	mrs	r3, PRIMASK
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004038:	63bb      	str	r3, [r7, #56]	; 0x38
 800403a:	2301      	movs	r3, #1
 800403c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004040:	f383 8810 	msr	PRIMASK, r3
}
 8004044:	46c0      	nop			; (mov r8, r8)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2180      	movs	r1, #128	; 0x80
 8004052:	438a      	bics	r2, r1
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800405a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405c:	f383 8810 	msr	PRIMASK, r3
}
 8004060:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2278      	movs	r2, #120	; 0x78
 800406c:	2100      	movs	r1, #0
 800406e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e05f      	b.n	8004134 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2204      	movs	r2, #4
 800407c:	4013      	ands	r3, r2
 800407e:	2b04      	cmp	r3, #4
 8004080:	d146      	bne.n	8004110 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004084:	2280      	movs	r2, #128	; 0x80
 8004086:	03d1      	lsls	r1, r2, #15
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	4a2c      	ldr	r2, [pc, #176]	; (800413c <UART_CheckIdleState+0x148>)
 800408c:	9200      	str	r2, [sp, #0]
 800408e:	2200      	movs	r2, #0
 8004090:	f000 f858 	bl	8004144 <UART_WaitOnFlagUntilTimeout>
 8004094:	1e03      	subs	r3, r0, #0
 8004096:	d03b      	beq.n	8004110 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004098:	f3ef 8310 	mrs	r3, PRIMASK
 800409c:	60fb      	str	r3, [r7, #12]
  return(result);
 800409e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a0:	637b      	str	r3, [r7, #52]	; 0x34
 80040a2:	2301      	movs	r3, #1
 80040a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f383 8810 	msr	PRIMASK, r3
}
 80040ac:	46c0      	nop			; (mov r8, r8)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4921      	ldr	r1, [pc, #132]	; (8004140 <UART_CheckIdleState+0x14c>)
 80040ba:	400a      	ands	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f383 8810 	msr	PRIMASK, r3
}
 80040c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ca:	f3ef 8310 	mrs	r3, PRIMASK
 80040ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80040d0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d2:	633b      	str	r3, [r7, #48]	; 0x30
 80040d4:	2301      	movs	r3, #1
 80040d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f383 8810 	msr	PRIMASK, r3
}
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2101      	movs	r1, #1
 80040ec:	438a      	bics	r2, r1
 80040ee:	609a      	str	r2, [r3, #8]
 80040f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	f383 8810 	msr	PRIMASK, r3
}
 80040fa:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2280      	movs	r2, #128	; 0x80
 8004100:	2120      	movs	r1, #32
 8004102:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2278      	movs	r2, #120	; 0x78
 8004108:	2100      	movs	r1, #0
 800410a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e011      	b.n	8004134 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2280      	movs	r2, #128	; 0x80
 800411a:	2120      	movs	r1, #32
 800411c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2278      	movs	r2, #120	; 0x78
 800412e:	2100      	movs	r1, #0
 8004130:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	0018      	movs	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	b010      	add	sp, #64	; 0x40
 800413a:	bd80      	pop	{r7, pc}
 800413c:	01ffffff 	.word	0x01ffffff
 8004140:	fffffedf 	.word	0xfffffedf

08004144 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	1dfb      	adds	r3, r7, #7
 8004152:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004154:	e04b      	b.n	80041ee <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	3301      	adds	r3, #1
 800415a:	d048      	beq.n	80041ee <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415c:	f7fe fc62 	bl	8002a24 <HAL_GetTick>
 8004160:	0002      	movs	r2, r0
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	429a      	cmp	r2, r3
 800416a:	d302      	bcc.n	8004172 <UART_WaitOnFlagUntilTimeout+0x2e>
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e04b      	b.n	800420e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2204      	movs	r2, #4
 800417e:	4013      	ands	r3, r2
 8004180:	d035      	beq.n	80041ee <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	2208      	movs	r2, #8
 800418a:	4013      	ands	r3, r2
 800418c:	2b08      	cmp	r3, #8
 800418e:	d111      	bne.n	80041b4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2208      	movs	r2, #8
 8004196:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	0018      	movs	r0, r3
 800419c:	f000 f83c 	bl	8004218 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2284      	movs	r2, #132	; 0x84
 80041a4:	2108      	movs	r1, #8
 80041a6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2278      	movs	r2, #120	; 0x78
 80041ac:	2100      	movs	r1, #0
 80041ae:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e02c      	b.n	800420e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69da      	ldr	r2, [r3, #28]
 80041ba:	2380      	movs	r3, #128	; 0x80
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	401a      	ands	r2, r3
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d112      	bne.n	80041ee <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2280      	movs	r2, #128	; 0x80
 80041ce:	0112      	lsls	r2, r2, #4
 80041d0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	0018      	movs	r0, r3
 80041d6:	f000 f81f 	bl	8004218 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2284      	movs	r2, #132	; 0x84
 80041de:	2120      	movs	r1, #32
 80041e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2278      	movs	r2, #120	; 0x78
 80041e6:	2100      	movs	r1, #0
 80041e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e00f      	b.n	800420e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	4013      	ands	r3, r2
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	425a      	negs	r2, r3
 80041fe:	4153      	adcs	r3, r2
 8004200:	b2db      	uxtb	r3, r3
 8004202:	001a      	movs	r2, r3
 8004204:	1dfb      	adds	r3, r7, #7
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d0a4      	beq.n	8004156 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	0018      	movs	r0, r3
 8004210:	46bd      	mov	sp, r7
 8004212:	b004      	add	sp, #16
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08e      	sub	sp, #56	; 0x38
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004220:	f3ef 8310 	mrs	r3, PRIMASK
 8004224:	617b      	str	r3, [r7, #20]
  return(result);
 8004226:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004228:	637b      	str	r3, [r7, #52]	; 0x34
 800422a:	2301      	movs	r3, #1
 800422c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	f383 8810 	msr	PRIMASK, r3
}
 8004234:	46c0      	nop			; (mov r8, r8)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4926      	ldr	r1, [pc, #152]	; (80042dc <UART_EndRxTransfer+0xc4>)
 8004242:	400a      	ands	r2, r1
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004248:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f383 8810 	msr	PRIMASK, r3
}
 8004250:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004252:	f3ef 8310 	mrs	r3, PRIMASK
 8004256:	623b      	str	r3, [r7, #32]
  return(result);
 8004258:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425a:	633b      	str	r3, [r7, #48]	; 0x30
 800425c:	2301      	movs	r3, #1
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	f383 8810 	msr	PRIMASK, r3
}
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2101      	movs	r1, #1
 8004274:	438a      	bics	r2, r1
 8004276:	609a      	str	r2, [r3, #8]
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427e:	f383 8810 	msr	PRIMASK, r3
}
 8004282:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004288:	2b01      	cmp	r3, #1
 800428a:	d118      	bne.n	80042be <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800428c:	f3ef 8310 	mrs	r3, PRIMASK
 8004290:	60bb      	str	r3, [r7, #8]
  return(result);
 8004292:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004296:	2301      	movs	r3, #1
 8004298:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f383 8810 	msr	PRIMASK, r3
}
 80042a0:	46c0      	nop			; (mov r8, r8)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2110      	movs	r1, #16
 80042ae:	438a      	bics	r2, r1
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f383 8810 	msr	PRIMASK, r3
}
 80042bc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2280      	movs	r2, #128	; 0x80
 80042c2:	2120      	movs	r1, #32
 80042c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b00e      	add	sp, #56	; 0x38
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	fffffedf 	.word	0xfffffedf

080042e0 <__libc_init_array>:
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	2600      	movs	r6, #0
 80042e4:	4d0c      	ldr	r5, [pc, #48]	; (8004318 <__libc_init_array+0x38>)
 80042e6:	4c0d      	ldr	r4, [pc, #52]	; (800431c <__libc_init_array+0x3c>)
 80042e8:	1b64      	subs	r4, r4, r5
 80042ea:	10a4      	asrs	r4, r4, #2
 80042ec:	42a6      	cmp	r6, r4
 80042ee:	d109      	bne.n	8004304 <__libc_init_array+0x24>
 80042f0:	2600      	movs	r6, #0
 80042f2:	f000 f821 	bl	8004338 <_init>
 80042f6:	4d0a      	ldr	r5, [pc, #40]	; (8004320 <__libc_init_array+0x40>)
 80042f8:	4c0a      	ldr	r4, [pc, #40]	; (8004324 <__libc_init_array+0x44>)
 80042fa:	1b64      	subs	r4, r4, r5
 80042fc:	10a4      	asrs	r4, r4, #2
 80042fe:	42a6      	cmp	r6, r4
 8004300:	d105      	bne.n	800430e <__libc_init_array+0x2e>
 8004302:	bd70      	pop	{r4, r5, r6, pc}
 8004304:	00b3      	lsls	r3, r6, #2
 8004306:	58eb      	ldr	r3, [r5, r3]
 8004308:	4798      	blx	r3
 800430a:	3601      	adds	r6, #1
 800430c:	e7ee      	b.n	80042ec <__libc_init_array+0xc>
 800430e:	00b3      	lsls	r3, r6, #2
 8004310:	58eb      	ldr	r3, [r5, r3]
 8004312:	4798      	blx	r3
 8004314:	3601      	adds	r6, #1
 8004316:	e7f2      	b.n	80042fe <__libc_init_array+0x1e>
 8004318:	080043cc 	.word	0x080043cc
 800431c:	080043cc 	.word	0x080043cc
 8004320:	080043cc 	.word	0x080043cc
 8004324:	080043d0 	.word	0x080043d0

08004328 <memset>:
 8004328:	0003      	movs	r3, r0
 800432a:	1882      	adds	r2, r0, r2
 800432c:	4293      	cmp	r3, r2
 800432e:	d100      	bne.n	8004332 <memset+0xa>
 8004330:	4770      	bx	lr
 8004332:	7019      	strb	r1, [r3, #0]
 8004334:	3301      	adds	r3, #1
 8004336:	e7f9      	b.n	800432c <memset+0x4>

08004338 <_init>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433e:	bc08      	pop	{r3}
 8004340:	469e      	mov	lr, r3
 8004342:	4770      	bx	lr

08004344 <_fini>:
 8004344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434a:	bc08      	pop	{r3}
 800434c:	469e      	mov	lr, r3
 800434e:	4770      	bx	lr
